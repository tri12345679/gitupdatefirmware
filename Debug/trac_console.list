
trac_console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005144  08005144  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800514c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d4  20000074  080051c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  080051c0  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5c  00000000  00000000  0003349e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00036100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004334  00000000  00000000  000383a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131ac  00000000  00000000  0003c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972f6  00000000  00000000  0004f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6b7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  000e6bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005028 	.word	0x08005028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005028 	.word	0x08005028

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fab0 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f824 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f880 	bl	80005f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f001 fb08 	bl	8001b08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004f8:	4a09      	ldr	r2, [pc, #36]	; (8000520 <main+0x3c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x40>)
 80004fe:	f001 fb4d 	bl	8001b9c <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x44>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <main+0x48>)
 800050a:	2100      	movs	r1, #0
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x4c>)
 800050e:	f001 fb45 	bl	8001b9c <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <main+0x50>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f001 fb1a 	bl	8001b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x38>
 800051e:	bf00      	nop
 8000520:	08005078 	.word	0x08005078
 8000524:	08000645 	.word	0x08000645
 8000528:	20000090 	.word	0x20000090
 800052c:	0800509c 	.word	0x0800509c
 8000530:	08000661 	.word	0x08000661
 8000534:	20000094 	.word	0x20000094

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 f868 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xb4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xb4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xb4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <SystemClock_Config+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SystemClock_Config+0xb8>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SystemClock_Config+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fb73 	bl	8000c94 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b4:	f000 f874 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fdd6 	bl	8001184 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005de:	f000 f85f 	bl	80006a0 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_GPIO_Init+0x4c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_GPIO_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("task1 \r\n");
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <StartTask1+0x18>)
 800064e:	f004 f85b 	bl	8004708 <puts>
    osDelay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f001 fb33 	bl	8001cc0 <osDelay>
	printf("task1 \r\n");
 800065a:	e7f7      	b.n	800064c <StartTask1+0x8>
 800065c:	08005050 	.word	0x08005050

08000660 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task2 \r\n");
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <StartTask2+0x18>)
 800066a:	f004 f84d 	bl	8004708 <puts>
    osDelay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f001 fb25 	bl	8001cc0 <osDelay>
	  printf("task2 \r\n");
 8000676:	e7f7      	b.n	8000668 <StartTask2+0x8>
 8000678:	08005058 	.word	0x08005058

0800067c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800068e:	f000 f9ff 	bl	8000a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40000800 	.word	0x40000800

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_MspInit+0x54>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a11      	ldr	r2, [pc, #68]	; (8000700 <HAL_MspInit+0x54>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x54>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_MspInit+0x54>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_MspInit+0x54>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_MspInit+0x54>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	f06f 0001 	mvn.w	r0, #1
 80006f2:	f000 faa5 	bl	8000c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <HAL_InitTick+0xe4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a32      	ldr	r2, [pc, #200]	; (80007e8 <HAL_InitTick+0xe4>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <HAL_InitTick+0xe4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000730:	f107 0210 	add.w	r2, r7, #16
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 feee 	bl	800151c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800074a:	f000 fed3 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 800074e:	6378      	str	r0, [r7, #52]	; 0x34
 8000750:	e004      	b.n	800075c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000752:	f000 fecf 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8000756:	4603      	mov	r3, r0
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075e:	4a23      	ldr	r2, [pc, #140]	; (80007ec <HAL_InitTick+0xe8>)
 8000760:	fba2 2303 	umull	r2, r3, r2, r3
 8000764:	0c9b      	lsrs	r3, r3, #18
 8000766:	3b01      	subs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <HAL_InitTick+0xec>)
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <HAL_InitTick+0xf0>)
 800076e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_InitTick+0xec>)
 8000772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000776:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000778:	4a1d      	ldr	r2, [pc, #116]	; (80007f0 <HAL_InitTick+0xec>)
 800077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_InitTick+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_InitTick+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_InitTick+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000790:	4817      	ldr	r0, [pc, #92]	; (80007f0 <HAL_InitTick+0xec>)
 8000792:	f000 fef5 	bl	8001580 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800079c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d11b      	bne.n	80007dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007a4:	4812      	ldr	r0, [pc, #72]	; (80007f0 <HAL_InitTick+0xec>)
 80007a6:	f000 ff45 	bl	8001634 <HAL_TIM_Base_Start_IT>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d111      	bne.n	80007dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007b8:	201e      	movs	r0, #30
 80007ba:	f000 fa5d 	bl	8000c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d808      	bhi.n	80007d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	201e      	movs	r0, #30
 80007ca:	f000 fa39 	bl	8000c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_InitTick+0xf4>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	e002      	b.n	80007dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	431bde83 	.word	0x431bde83
 80007f0:	20000098 	.word	0x20000098
 80007f4:	40000800 	.word	0x40000800
 80007f8:	20000004 	.word	0x20000004

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <TIM4_IRQHandler+0x10>)
 800082e:	f000 ff63 	bl	80016f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000098 	.word	0x20000098

0800083c <ITM_SendChar>:
#define DEMCR				*((volatile uint32_t*) 0xE000EDFCU)
//ITM Register Address
#define ITM_STIMULUS_PORT0	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN 		*((volatile uint32_t*) 0xE0000E00)
void ITM_SendChar(uint8_t ch)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
// Enable TRCENA
	DEMCR |= (1<<24);
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <ITM_SendChar+0x48>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <ITM_SendChar+0x48>)
 800084c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000850:	6013      	str	r3, [r2, #0]
// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <ITM_SendChar+0x4c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <ITM_SendChar+0x4c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6013      	str	r3, [r2, #0]
// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800085e:	bf00      	nop
 8000860:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f8      	beq.n	8000860 <ITM_SendChar+0x24>
// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800086e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	6013      	str	r3, [r2, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000edfc 	.word	0xe000edfc
 8000888:	e0000e00 	.word	0xe0000e00

0800088c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e00a      	b.n	80008b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800089e:	f3af 8000 	nop.w
 80008a2:	4601      	mov	r1, r0
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	b2ca      	uxtb	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf0      	blt.n	800089e <_read+0x12>
  }

  return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e009      	b.n	80008ec <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffab 	bl	800083c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf1      	blt.n	80008d8 <_write+0x12>
  }
  return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_close>:

int _close(int file)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000926:	605a      	str	r2, [r3, #4]
  return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_isatty>:

int _isatty(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f003 fe08 	bl	80045ac <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20020000 	.word	0x20020000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	200000e0 	.word	0x200000e0
 80009d0:	20004a48 	.word	0x20004a48

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a22:	f7ff ffd7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 fdc7 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fd5b 	bl	80004e4 <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a3c:	0800514c 	.word	0x0800514c
  ldr r2, =_sbss
 8000a40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a44:	20004a48 	.word	0x20004a48

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f8d8 	bl	8000c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f7ff fe42 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe14 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000e4 	.word	0x200000e4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000e4 	.word	0x200000e4

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff4c 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c52:	f7ff ff61 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f7ff ffb1 	bl	8000bc4 <NVIC_EncodePriority>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff80 	bl	8000b70 <__NVIC_SetPriority>
}
 8000c70:	bf00      	nop
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff54 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e267      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d075      	beq.n	8000d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb2:	4b88      	ldr	r3, [pc, #544]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cbe:	4b85      	ldr	r3, [pc, #532]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d112      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cca:	4b82      	ldr	r3, [pc, #520]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d05b      	beq.n	8000d9c <HAL_RCC_OscConfig+0x108>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d157      	bne.n	8000d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e242      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf8:	d106      	bne.n	8000d08 <HAL_RCC_OscConfig+0x74>
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a75      	ldr	r2, [pc, #468]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6f      	ldr	r2, [pc, #444]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6c      	ldr	r2, [pc, #432]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d2c:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a68      	ldr	r2, [pc, #416]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a65      	ldr	r2, [pc, #404]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff feb4 	bl	8000ab8 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff feb0 	bl	8000ab8 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e207      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5b      	ldr	r3, [pc, #364]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xc0>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fea0 	bl	8000ab8 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fe9c 	bl	8000ab8 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1f3      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0xe8>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc2:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1c7      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4937      	ldr	r1, [pc, #220]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fe55 	bl	8000ab8 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fe51 	bl	8000ab8 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1a8      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4925      	ldr	r1, [pc, #148]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fe34 	bl	8000ab8 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fe30 	bl	8000ab8 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e187      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d036      	beq.n	8000eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_RCC_OscConfig+0x248>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fe14 	bl	8000ab8 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fe10 	bl	8000ab8 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e167      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x200>
 8000eb2:	e01b      	b.n	8000eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_RCC_OscConfig+0x248>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fdfd 	bl	8000ab8 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	e00e      	b.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fdf9 	bl	8000ab8 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d907      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e150      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	42470000 	.word	0x42470000
 8000edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ea      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8097 	beq.w	8001028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b81      	ldr	r3, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a7c      	ldr	r2, [pc, #496]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b74      	ldr	r3, [pc, #464]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fdb9 	bl	8000ab8 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fdb5 	bl	8000ab8 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e10c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2ea>
 8000f70:	4b64      	ldr	r3, [pc, #400]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	4a63      	ldr	r2, [pc, #396]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x30c>
 8000f86:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6713      	str	r3, [r2, #112]	; 0x70
 8000f92:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	4a5b      	ldr	r2, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000fa0:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	; 0x70
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fd7a 	bl	8000ab8 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fd76 	bl	8000ab8 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0cb      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ee      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fd64 	bl	8000ab8 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fd60 	bl	8000ab8 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0b5      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a38      	ldr	r2, [pc, #224]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a1 	beq.w	8001174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d05c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d141      	bne.n	80010ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_RCC_OscConfig+0x478>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd34 	bl	8000ab8 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fd30 	bl	8000ab8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e087      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	3b01      	subs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	491b      	ldr	r1, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x478>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fd09 	bl	8000ab8 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fd05 	bl	8000ab8 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e05c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x416>
 80010c8:	e054      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_RCC_OscConfig+0x478>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcf2 	bl	8000ab8 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fcee 	bl	8000ab8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e045      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x470>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
 80010f6:	e03d      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e038      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000
 800110c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x4ec>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d028      	beq.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d121      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d11a      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001148:	4293      	cmp	r3, r2
 800114a:	d111      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fc20 	bl	8000ab8 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fc1c 	bl	8000ab8 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f821 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f9ea 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	080050c0 	.word	0x080050c0
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b090      	sub	sp, #64	; 0x40
 8001356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
 800135c:	2300      	movs	r3, #0
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d00d      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x40>
 8001374:	2b08      	cmp	r3, #8
 8001376:	f200 80a1 	bhi.w	80014bc <HAL_RCC_GetSysClockFreq+0x16c>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x34>
 800137e:	2b04      	cmp	r3, #4
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x3a>
 8001382:	e09b      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001388:	e09b      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800138e:	e098      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d028      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	099b      	lsrs	r3, r3, #6
 80013ac:	2200      	movs	r2, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	627a      	str	r2, [r7, #36]	; 0x24
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013b8:	2100      	movs	r1, #0
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013bc:	fb03 f201 	mul.w	r2, r3, r1
 80013c0:	2300      	movs	r3, #0
 80013c2:	fb00 f303 	mul.w	r3, r0, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013ca:	fba0 1202 	umull	r1, r2, r0, r2
 80013ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013d0:	460a      	mov	r2, r1
 80013d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80013d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013d6:	4413      	add	r3, r2
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	2200      	movs	r2, #0
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	61fa      	str	r2, [r7, #28]
 80013e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013ea:	f7fe fef9 	bl	80001e0 <__aeabi_uldivmod>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4613      	mov	r3, r2
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013f6:	e053      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	2200      	movs	r2, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	617a      	str	r2, [r7, #20]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800140a:	f04f 0b00 	mov.w	fp, #0
 800140e:	4652      	mov	r2, sl
 8001410:	465b      	mov	r3, fp
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	0159      	lsls	r1, r3, #5
 800141c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001420:	0150      	lsls	r0, r2, #5
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ebb2 080a 	subs.w	r8, r2, sl
 800142a:	eb63 090b 	sbc.w	r9, r3, fp
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800143a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800143e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001442:	ebb2 0408 	subs.w	r4, r2, r8
 8001446:	eb63 0509 	sbc.w	r5, r3, r9
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	00eb      	lsls	r3, r5, #3
 8001454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001458:	00e2      	lsls	r2, r4, #3
 800145a:	4614      	mov	r4, r2
 800145c:	461d      	mov	r5, r3
 800145e:	eb14 030a 	adds.w	r3, r4, sl
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	eb45 030b 	adc.w	r3, r5, fp
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001476:	4629      	mov	r1, r5
 8001478:	028b      	lsls	r3, r1, #10
 800147a:	4621      	mov	r1, r4
 800147c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001480:	4621      	mov	r1, r4
 8001482:	028a      	lsls	r2, r1, #10
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	2200      	movs	r2, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001494:	f7fe fea4 	bl	80001e0 <__aeabi_uldivmod>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4613      	mov	r3, r2
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	3301      	adds	r3, #1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80014b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3740      	adds	r7, #64	; 0x40
 80014c8:	46bd      	mov	sp, r7
 80014ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	00f42400 	.word	0x00f42400
 80014d8:	017d7840 	.word	0x017d7840

080014dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014f8:	f7ff fff0 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4903      	ldr	r1, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	080050d0 	.word	0x080050d0

0800151c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	220f      	movs	r2, #15
 800152a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_GetClockConfig+0x5c>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_RCC_GetClockConfig+0x5c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_GetClockConfig+0x5c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_GetClockConfig+0x5c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_RCC_GetClockConfig+0x60>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0207 	and.w	r2, r3, #7
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f839 	bl	800161e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f9ca 	bl	8001958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d001      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e044      	b.n	80016d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d018      	beq.n	80016a0 <HAL_TIM_Base_Start_IT+0x6c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d013      	beq.n	80016a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00e      	beq.n	80016a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_TIM_Base_Start_IT+0xb8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_TIM_Base_Start_IT+0x6c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d004      	beq.n	80016a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d111      	bne.n	80016c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d010      	beq.n	80016d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c2:	e007      	b.n	80016d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40000400 	.word	0x40000400
 80016ec:	40000800 	.word	0x40000800
 80016f0:	40000c00 	.word	0x40000c00
 80016f4:	40014000 	.word	0x40014000

080016f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0202 	mvn.w	r2, #2
 8001724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ee 	bl	800191c <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8e0 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8f1 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0204 	mvn.w	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8c4 	bl	800191c <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8b6 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8c7 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d122      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d11b      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0208 	mvn.w	r2, #8
 80017cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f89a 	bl	800191c <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88c 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f89d 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0210 	mvn.w	r2, #16
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2208      	movs	r2, #8
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f870 	bl	800191c <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f862 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f873 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0201 	mvn.w	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe ff00 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8e2 	bl	8001a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f838 	bl	8001944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f8ac 	bl	8001a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <TIM_Base_SetConfig+0xe4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00f      	beq.n	8001990 <TIM_Base_SetConfig+0x38>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001976:	d00b      	beq.n	8001990 <TIM_Base_SetConfig+0x38>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <TIM_Base_SetConfig+0xe8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <TIM_Base_SetConfig+0x38>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <TIM_Base_SetConfig+0xec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <TIM_Base_SetConfig+0x38>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <TIM_Base_SetConfig+0xf0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d108      	bne.n	80019a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <TIM_Base_SetConfig+0xe4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01b      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d017      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <TIM_Base_SetConfig+0xe8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <TIM_Base_SetConfig+0xec>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00f      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <TIM_Base_SetConfig+0xf0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00b      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <TIM_Base_SetConfig+0xf4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <TIM_Base_SetConfig+0xf8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d003      	beq.n	80019e2 <TIM_Base_SetConfig+0x8a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <TIM_Base_SetConfig+0xfc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d108      	bne.n	80019f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <TIM_Base_SetConfig+0xe4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d103      	bne.n	8001a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	615a      	str	r2, [r3, #20]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800

08001a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <__NVIC_SetPriority>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Handler+0x1c>)
 8001ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001adc:	f001 fcfe 	bl	80034dc <xTaskGetSchedulerState>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ae6:	f002 fae7 	bl	80040b8 <xPortSysTickHandler>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001af8:	2100      	movs	r1, #0
 8001afa:	f06f 0004 	mvn.w	r0, #4
 8001afe:	f7ff ffbf 	bl	8001a80 <__NVIC_SetPriority>
#endif
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b0e:	f3ef 8305 	mrs	r3, IPSR
 8001b12:	603b      	str	r3, [r7, #0]
  return(result);
 8001b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b1a:	f06f 0305 	mvn.w	r3, #5
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	e00c      	b.n	8001b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <osKernelInitialize+0x44>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <osKernelInitialize+0x44>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e002      	b.n	8001b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200000e8 	.word	0x200000e8

08001b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b56:	f3ef 8305 	mrs	r3, IPSR
 8001b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b62:	f06f 0305 	mvn.w	r3, #5
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	e010      	b.n	8001b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <osKernelStart+0x48>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d109      	bne.n	8001b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b72:	f7ff ffbf 	bl	8001af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <osKernelStart+0x48>)
 8001b78:	2202      	movs	r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b7c:	f001 f866 	bl	8002c4c <vTaskStartScheduler>
      stat = osOK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e002      	b.n	8001b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000e8 	.word	0x200000e8

08001b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	; 0x38
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bac:	f3ef 8305 	mrs	r3, IPSR
 8001bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8001bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d17e      	bne.n	8001cb6 <osThreadNew+0x11a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d07b      	beq.n	8001cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001bc2:	2318      	movs	r3, #24
 8001bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d045      	beq.n	8001c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <osThreadNew+0x48>
        name = attr->name;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <osThreadNew+0x6e>
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b38      	cmp	r3, #56	; 0x38
 8001bfc:	d805      	bhi.n	8001c0a <osThreadNew+0x6e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <osThreadNew+0x72>
        return (NULL);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e054      	b.n	8001cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00e      	beq.n	8001c44 <osThreadNew+0xa8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c2c:	d90a      	bls.n	8001c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <osThreadNew+0xa8>
        mem = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	e010      	b.n	8001c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <osThreadNew+0xca>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <osThreadNew+0xca>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <osThreadNew+0xca>
          mem = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e001      	b.n	8001c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d110      	bne.n	8001c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c74:	9202      	str	r2, [sp, #8]
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6a3a      	ldr	r2, [r7, #32]
 8001c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fe0c 	bl	80028a0 <xTaskCreateStatic>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e013      	b.n	8001cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d110      	bne.n	8001cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fe57 	bl	800295a <xTaskCreate>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cb6:	693b      	ldr	r3, [r7, #16]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cc8:	f3ef 8305 	mrs	r3, IPSR
 8001ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <osDelay+0x1c>
    stat = osErrorISR;
 8001cd4:	f06f 0305 	mvn.w	r3, #5
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e007      	b.n	8001cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <osDelay+0x2c>
      vTaskDelay(ticks);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ff7c 	bl	8002be4 <vTaskDelay>
    }
  }

  return (stat);
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <vApplicationGetIdleTaskMemory+0x30>)
 8001d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200000ec 	.word	0x200000ec
 8001d28:	20000148 	.word	0x20000148

08001d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <vApplicationGetTimerTaskMemory+0x30>)
 8001d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	20000348 	.word	0x20000348
 8001d5c:	200003a4 	.word	0x200003a4

08001d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0208 	add.w	r2, r3, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f103 0208 	add.w	r2, r3, #8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f103 0208 	add.w	r2, r3, #8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d103      	bne.n	8001e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e00c      	b.n	8001e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3308      	adds	r3, #8
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e002      	b.n	8001e30 <vListInsert+0x2e>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d2f6      	bcs.n	8001e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6892      	ldr	r2, [r2, #8]
 8001e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6852      	ldr	r2, [r2, #4]
 8001e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d103      	bne.n	8001ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ef2:	f002 f84f 	bl	8003f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	441a      	add	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	3b01      	subs	r3, #1
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	441a      	add	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22ff      	movs	r2, #255	; 0xff
 8001f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01a      	beq.n	8001f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3310      	adds	r3, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f903 	bl	8003160 <xTaskRemoveFromEventList>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <xQueueGenericReset+0xcc>)
 8001f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	e009      	b.n	8001f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3310      	adds	r3, #16
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fef2 	bl	8001d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3324      	adds	r3, #36	; 0x24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff feed 	bl	8001d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f86:	f002 f835 	bl	8003ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001fbe:	bf00      	nop
 8001fc0:	e7fe      	b.n	8001fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <xQueueGenericCreateStatic+0x52>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <xQueueGenericCreateStatic+0x56>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <xQueueGenericCreateStatic+0x58>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	623b      	str	r3, [r7, #32]
}
 8002006:	bf00      	nop
 8002008:	e7fe      	b.n	8002008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <xQueueGenericCreateStatic+0x7e>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <xQueueGenericCreateStatic+0x82>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <xQueueGenericCreateStatic+0x84>
 800201a:	2300      	movs	r3, #0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	61fb      	str	r3, [r7, #28]
}
 8002032:	bf00      	nop
 8002034:	e7fe      	b.n	8002034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002036:	2350      	movs	r3, #80	; 0x50
 8002038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b50      	cmp	r3, #80	; 0x50
 800203e:	d00a      	beq.n	8002056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	61bb      	str	r3, [r7, #24]
}
 8002052:	bf00      	nop
 8002054:	e7fe      	b.n	8002054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800206a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f805 	bl	8002088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002080:	4618      	mov	r0, r3
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e002      	b.n	80020aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020b6:	2101      	movs	r1, #1
 80020b8:	69b8      	ldr	r0, [r7, #24]
 80020ba:	f7ff ff05 	bl	8001ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xQueueGenericSend+0x32>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <xQueueGenericSend+0x40>
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <xQueueGenericSend+0x44>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <xQueueGenericSend+0x46>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <xQueueGenericSend+0x60>
	__asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800212c:	bf00      	nop
 800212e:	e7fe      	b.n	800212e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <xQueueGenericSend+0x6e>
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <xQueueGenericSend+0x72>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <xQueueGenericSend+0x74>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xQueueGenericSend+0x8e>
	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	623b      	str	r3, [r7, #32]
}
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800215e:	f001 f9bd 	bl	80034dc <xTaskGetSchedulerState>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <xQueueGenericSend+0x9e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <xQueueGenericSend+0xa2>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <xQueueGenericSend+0xa4>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <xQueueGenericSend+0xbe>
	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	61fb      	str	r3, [r7, #28]
}
 800218a:	bf00      	nop
 800218c:	e7fe      	b.n	800218c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800218e:	f001 ff01 	bl	8003f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <xQueueGenericSend+0xd4>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d129      	bne.n	80021f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021aa:	f000 fa0b 	bl	80025c4 <prvCopyDataToQueue>
 80021ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	3324      	adds	r3, #36	; 0x24
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 ffcf 	bl	8003160 <xTaskRemoveFromEventList>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <xQueueGenericSend+0x1f8>)
 80021ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	e00a      	b.n	80021f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <xQueueGenericSend+0x1f8>)
 80021e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80021f0:	f001 ff00 	bl	8003ff4 <vPortExitCritical>
				return pdPASS;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e063      	b.n	80022c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021fe:	f001 fef9 	bl	8003ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002202:	2300      	movs	r3, #0
 8002204:	e05c      	b.n	80022c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4618      	mov	r0, r3
 8002212:	f001 f809 	bl	8003228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800221a:	f001 feeb 	bl	8003ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800221e:	f000 fd7b 	bl	8002d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002222:	f001 feb7 	bl	8003f94 <vPortEnterCritical>
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800222c:	b25b      	sxtb	r3, r3
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d103      	bne.n	800223c <xQueueGenericSend+0x16c>
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002242:	b25b      	sxtb	r3, r3
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d103      	bne.n	8002252 <xQueueGenericSend+0x182>
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002252:	f001 fecf 	bl	8003ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002256:	1d3a      	adds	r2, r7, #4
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fff8 	bl	8003254 <xTaskCheckForTimeOut>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d124      	bne.n	80022b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800226a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800226c:	f000 faa2 	bl	80027b4 <prvIsQueueFull>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d018      	beq.n	80022a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	3310      	adds	r3, #16
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 ff1e 	bl	80030c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002286:	f000 fa2d 	bl	80026e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800228a:	f000 fd53 	bl	8002d34 <xTaskResumeAll>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f47f af7c 	bne.w	800218e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <xQueueGenericSend+0x1f8>)
 8002298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	e772      	b.n	800218e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022aa:	f000 fa1b 	bl	80026e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ae:	f000 fd41 	bl	8002d34 <xTaskResumeAll>
 80022b2:	e76c      	b.n	800218e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022b6:	f000 fa15 	bl	80026e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022ba:	f000 fd3b 	bl	8002d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3738      	adds	r7, #56	; 0x38
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b090      	sub	sp, #64	; 0x40
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022f6:	bf00      	nop
 80022f8:	e7fe      	b.n	80022f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <xQueueGenericSendFromISR+0x3c>
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <xQueueGenericSendFromISR+0x40>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <xQueueGenericSendFromISR+0x42>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002324:	bf00      	nop
 8002326:	e7fe      	b.n	8002326 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d103      	bne.n	8002336 <xQueueGenericSendFromISR+0x6a>
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <xQueueGenericSendFromISR+0x6e>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <xQueueGenericSendFromISR+0x70>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	623b      	str	r3, [r7, #32]
}
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002356:	f001 feff 	bl	8004158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800235a:	f3ef 8211 	mrs	r2, BASEPRI
 800235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	61fa      	str	r2, [r7, #28]
 8002370:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002372:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <xQueueGenericSendFromISR+0xbc>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d12f      	bne.n	80023e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800238e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800239e:	f000 f911 	bl	80025c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d112      	bne.n	80023d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d016      	beq.n	80023e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	3324      	adds	r3, #36	; 0x24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fed1 	bl	8003160 <xTaskRemoveFromEventList>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	b25a      	sxtb	r2, r3
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80023e2:	2301      	movs	r3, #1
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80023e6:	e001      	b.n	80023ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3740      	adds	r7, #64	; 0x40
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <xQueueReceive+0x30>
	__asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	623b      	str	r3, [r7, #32]
}
 8002430:	bf00      	nop
 8002432:	e7fe      	b.n	8002432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <xQueueReceive+0x3e>
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xQueueReceive+0x42>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueReceive+0x44>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <xQueueReceive+0x5e>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	61fb      	str	r3, [r7, #28]
}
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002462:	f001 f83b 	bl	80034dc <xTaskGetSchedulerState>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <xQueueReceive+0x6e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <xQueueReceive+0x72>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <xQueueReceive+0x74>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueReceive+0x8e>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61bb      	str	r3, [r7, #24]
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002492:	f001 fd7f 	bl	8003f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01f      	beq.n	80024e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024a6:	f000 f8f7 	bl	8002698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00f      	beq.n	80024da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	3310      	adds	r3, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fe4e 	bl	8003160 <xTaskRemoveFromEventList>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <xQueueReceive+0x1bc>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024da:	f001 fd8b 	bl	8003ff4 <vPortExitCritical>
				return pdPASS;
 80024de:	2301      	movs	r3, #1
 80024e0:	e069      	b.n	80025b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024e8:	f001 fd84 	bl	8003ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e062      	b.n	80025b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fe94 	bl	8003228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002504:	f001 fd76 	bl	8003ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002508:	f000 fc06 	bl	8002d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800250c:	f001 fd42 	bl	8003f94 <vPortEnterCritical>
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d103      	bne.n	8002526 <xQueueReceive+0x122>
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d103      	bne.n	800253c <xQueueReceive+0x138>
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800253c:	f001 fd5a 	bl	8003ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002540:	1d3a      	adds	r2, r7, #4
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fe83 	bl	8003254 <xTaskCheckForTimeOut>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d123      	bne.n	800259c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002556:	f000 f917 	bl	8002788 <prvIsQueueEmpty>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	3324      	adds	r3, #36	; 0x24
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fda9 	bl	80030c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800256e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002570:	f000 f8b8 	bl	80026e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002574:	f000 fbde 	bl	8002d34 <xTaskResumeAll>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d189      	bne.n	8002492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <xQueueReceive+0x1bc>)
 8002580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	e780      	b.n	8002492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002592:	f000 f8a7 	bl	80026e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002596:	f000 fbcd 	bl	8002d34 <xTaskResumeAll>
 800259a:	e77a      	b.n	8002492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800259c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259e:	f000 f8a1 	bl	80026e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025a2:	f000 fbc7 	bl	8002d34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a8:	f000 f8ee 	bl	8002788 <prvIsQueueEmpty>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f43f af6f 	beq.w	8002492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d14d      	bne.n	8002686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ff92 	bl	8003518 <xTaskPriorityDisinherit>
 80025f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e043      	b.n	8002686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d119      	bne.n	8002638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6858      	ldr	r0, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	461a      	mov	r2, r3
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	f001 fff6 	bl	8004600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	441a      	add	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d32b      	bcc.n	8002686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e026      	b.n	8002686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68d8      	ldr	r0, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	461a      	mov	r2, r3
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	f001 ffdc 	bl	8004600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	425b      	negs	r3, r3
 8002652:	441a      	add	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	425b      	negs	r3, r3
 800266e:	441a      	add	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d105      	bne.n	8002686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	3b01      	subs	r3, #1
 8002684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800268e:	697b      	ldr	r3, [r7, #20]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	441a      	add	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d303      	bcc.n	80026cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	461a      	mov	r2, r3
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f001 ff92 	bl	8004600 <memcpy>
	}
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026ec:	f001 fc52 	bl	8003f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f8:	e011      	b.n	800271e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3324      	adds	r3, #36	; 0x24
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd2a 	bl	8003160 <xTaskRemoveFromEventList>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002712:	f000 fe01 	bl	8003318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3b01      	subs	r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	dce9      	bgt.n	80026fa <prvUnlockQueue+0x16>
 8002726:	e000      	b.n	800272a <prvUnlockQueue+0x46>
					break;
 8002728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002732:	f001 fc5f 	bl	8003ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002736:	f001 fc2d 	bl	8003f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002742:	e011      	b.n	8002768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3310      	adds	r3, #16
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd05 	bl	8003160 <xTaskRemoveFromEventList>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800275c:	f000 fddc 	bl	8003318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002760:	7bbb      	ldrb	r3, [r7, #14]
 8002762:	3b01      	subs	r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800276c:	2b00      	cmp	r3, #0
 800276e:	dce9      	bgt.n	8002744 <prvUnlockQueue+0x60>
 8002770:	e000      	b.n	8002774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800277c:	f001 fc3a 	bl	8003ff4 <vPortExitCritical>
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002790:	f001 fc00 	bl	8003f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800279c:	2301      	movs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e001      	b.n	80027a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027a6:	f001 fc25 	bl	8003ff4 <vPortExitCritical>

	return xReturn;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027bc:	f001 fbea 	bl	8003f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d102      	bne.n	80027d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e001      	b.n	80027d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027d6:	f001 fc0d 	bl	8003ff4 <vPortExitCritical>

	return xReturn;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e014      	b.n	800281e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <vQueueAddToRegistry+0x50>)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002800:	490c      	ldr	r1, [pc, #48]	; (8002834 <vQueueAddToRegistry+0x50>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <vQueueAddToRegistry+0x50>)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002816:	e006      	b.n	8002826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3301      	adds	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b07      	cmp	r3, #7
 8002822:	d9e7      	bls.n	80027f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200007a4 	.word	0x200007a4

08002838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002848:	f001 fba4 	bl	8003f94 <vPortEnterCritical>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d103      	bne.n	8002862 <vQueueWaitForMessageRestricted+0x2a>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002868:	b25b      	sxtb	r3, r3
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d103      	bne.n	8002878 <vQueueWaitForMessageRestricted+0x40>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002878:	f001 fbbc 	bl	8003ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fc3b 	bl	8003108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff26 	bl	80026e4 <prvUnlockQueue>
	}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08e      	sub	sp, #56	; 0x38
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	623b      	str	r3, [r7, #32]
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	61fb      	str	r3, [r7, #28]
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028e6:	235c      	movs	r3, #92	; 0x5c
 80028e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b5c      	cmp	r3, #92	; 0x5c
 80028ee:	d00a      	beq.n	8002906 <xTaskCreateStatic+0x66>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	61bb      	str	r3, [r7, #24]
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01e      	beq.n	800294c <xTaskCreateStatic+0xac>
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01b      	beq.n	800294c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002926:	2300      	movs	r3, #0
 8002928:	9303      	str	r3, [sp, #12]
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f850 	bl	80029e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002946:	f000 f8dd 	bl	8002b04 <prvAddNewTaskToReadyList>
 800294a:	e001      	b.n	8002950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002950:	697b      	ldr	r3, [r7, #20]
	}
 8002952:	4618      	mov	r0, r3
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08c      	sub	sp, #48	; 0x30
 800295e:	af04      	add	r7, sp, #16
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fc32 	bl	80041d8 <pvPortMalloc>
 8002974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800297c:	205c      	movs	r0, #92	; 0x5c
 800297e:	f001 fc2b 	bl	80041d8 <pvPortMalloc>
 8002982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e005      	b.n	800299e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f001 fcec 	bl	8004370 <vPortFree>
 8002998:	e001      	b.n	800299e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	2300      	movs	r3, #0
 80029b0:	9303      	str	r3, [sp, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f80e 	bl	80029e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c8:	69f8      	ldr	r0, [r7, #28]
 80029ca:	f000 f89b 	bl	8002b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e002      	b.n	80029da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029da:	69bb      	ldr	r3, [r7, #24]
	}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	461a      	mov	r2, r3
 80029fc:	21a5      	movs	r1, #165	; 0xa5
 80029fe:	f001 fe0d 	bl	800461c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	617b      	str	r3, [r7, #20]
}
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01f      	beq.n	8002a82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e012      	b.n	8002a6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	7819      	ldrb	r1, [r3, #0]
 8002a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	3334      	adds	r3, #52	; 0x34
 8002a58:	460a      	mov	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d9e9      	bls.n	8002a48 <prvInitialiseNewTask+0x64>
 8002a74:	e000      	b.n	8002a78 <prvInitialiseNewTask+0x94>
			{
				break;
 8002a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	e003      	b.n	8002a8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	2b37      	cmp	r3, #55	; 0x37
 8002a8e:	d901      	bls.n	8002a94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a90:	2337      	movs	r3, #55	; 0x37
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f978 	bl	8001da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f973 	bl	8001da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	68f9      	ldr	r1, [r7, #12]
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	f001 f928 	bl	8003d38 <pxPortInitialiseStack>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002afa:	bf00      	nop
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b0c:	f001 fa42 	bl	8003f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b22:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d110      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b30:	f000 fc16 	bl	8003360 <prvInitialiseTaskLists>
 8002b34:	e00d      	b.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <prvAddNewTaskToReadyList+0xcc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d802      	bhi.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <prvAddNewTaskToReadyList+0xd4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d903      	bls.n	8002b78 <prvAddNewTaskToReadyList+0x74>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <prvAddNewTaskToReadyList+0xd4>)
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <prvAddNewTaskToReadyList+0xd8>)
 8002b86:	441a      	add	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f7ff f913 	bl	8001dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b94:	f001 fa2e 	bl	8003ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <prvAddNewTaskToReadyList+0xcc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d207      	bcs.n	8002bbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <prvAddNewTaskToReadyList+0xdc>)
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000cb8 	.word	0x20000cb8
 8002bcc:	200007e4 	.word	0x200007e4
 8002bd0:	20000cc4 	.word	0x20000cc4
 8002bd4:	20000cd4 	.word	0x20000cd4
 8002bd8:	20000cc0 	.word	0x20000cc0
 8002bdc:	200007e8 	.word	0x200007e8
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d017      	beq.n	8002c26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <vTaskDelay+0x60>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <vTaskDelay+0x30>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	60bb      	str	r3, [r7, #8]
}
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c14:	f000 f880 	bl	8002d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c18:	2100      	movs	r1, #0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fcea 	bl	80035f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c20:	f000 f888 	bl	8002d34 <xTaskResumeAll>
 8002c24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <vTaskDelay+0x64>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000ce0 	.word	0x20000ce0
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c5a:	463a      	mov	r2, r7
 8002c5c:	1d39      	adds	r1, r7, #4
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f848 	bl	8001cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	460a      	mov	r2, r1
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <vTaskStartScheduler+0xb4>)
 8002c7c:	4821      	ldr	r0, [pc, #132]	; (8002d04 <vTaskStartScheduler+0xb8>)
 8002c7e:	f7ff fe0f 	bl	80028a0 <xTaskCreateStatic>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <vTaskStartScheduler+0xbc>)
 8002c86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <vTaskStartScheduler+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e001      	b.n	8002c9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ca0:	f000 fcfc 	bl	800369c <xTimerCreateTimerTask>
 8002ca4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d116      	bne.n	8002cda <vTaskStartScheduler+0x8e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	613b      	str	r3, [r7, #16]
}
 8002cbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <vTaskStartScheduler+0xc0>)
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <vTaskStartScheduler+0xc4>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <vTaskStartScheduler+0xc8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cd4:	f001 f8bc 	bl	8003e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cd8:	e00e      	b.n	8002cf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d10a      	bne.n	8002cf8 <vTaskStartScheduler+0xac>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	60fb      	str	r3, [r7, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <vTaskStartScheduler+0xaa>
}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	08005060 	.word	0x08005060
 8002d04:	08003331 	.word	0x08003331
 8002d08:	20000cdc 	.word	0x20000cdc
 8002d0c:	20000cd8 	.word	0x20000cd8
 8002d10:	20000cc4 	.word	0x20000cc4
 8002d14:	20000cbc 	.word	0x20000cbc

08002d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <vTaskSuspendAll+0x18>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a03      	ldr	r2, [pc, #12]	; (8002d30 <vTaskSuspendAll+0x18>)
 8002d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	20000ce0 	.word	0x20000ce0

08002d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <xTaskResumeAll+0x118>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	603b      	str	r3, [r7, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d60:	f001 f918 	bl	8003f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <xTaskResumeAll+0x118>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <xTaskResumeAll+0x118>)
 8002d6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <xTaskResumeAll+0x118>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d162      	bne.n	8002e3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <xTaskResumeAll+0x11c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d05e      	beq.n	8002e3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d7e:	e02f      	b.n	8002de0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <xTaskResumeAll+0x120>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3318      	adds	r3, #24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f871 	bl	8001e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f86c 	bl	8001e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <xTaskResumeAll+0x124>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d903      	bls.n	8002db0 <xTaskResumeAll+0x7c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <xTaskResumeAll+0x124>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <xTaskResumeAll+0x128>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fe fff7 	bl	8001dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <xTaskResumeAll+0x12c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <xTaskResumeAll+0x130>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <xTaskResumeAll+0x120>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1cb      	bne.n	8002d80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dee:	f000 fb55 	bl	800349c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <xTaskResumeAll+0x134>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dfe:	f000 f847 	bl	8002e90 <xTaskIncrementTick>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <xTaskResumeAll+0x130>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f1      	bne.n	8002dfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <xTaskResumeAll+0x134>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <xTaskResumeAll+0x130>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <xTaskResumeAll+0x138>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e3c:	f001 f8da 	bl	8003ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8002e40:	68bb      	ldr	r3, [r7, #8]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000ce0 	.word	0x20000ce0
 8002e50:	20000cb8 	.word	0x20000cb8
 8002e54:	20000c78 	.word	0x20000c78
 8002e58:	20000cc0 	.word	0x20000cc0
 8002e5c:	200007e8 	.word	0x200007e8
 8002e60:	200007e4 	.word	0x200007e4
 8002e64:	20000ccc 	.word	0x20000ccc
 8002e68:	20000cc8 	.word	0x20000cc8
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <xTaskGetTickCount+0x1c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e7c:	687b      	ldr	r3, [r7, #4]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000cbc 	.word	0x20000cbc

08002e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <xTaskIncrementTick+0x148>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 808f 	bne.w	8002fc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <xTaskIncrementTick+0x14c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <xTaskIncrementTick+0x14c>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d120      	bne.n	8002efa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002eb8:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <xTaskIncrementTick+0x150>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	603b      	str	r3, [r7, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <xTaskIncrementTick+0x46>
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <xTaskIncrementTick+0x150>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <xTaskIncrementTick+0x154>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <xTaskIncrementTick+0x150>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4a3f      	ldr	r2, [pc, #252]	; (8002fe4 <xTaskIncrementTick+0x154>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <xTaskIncrementTick+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <xTaskIncrementTick+0x158>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	f000 fad1 	bl	800349c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <xTaskIncrementTick+0x15c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d349      	bcc.n	8002f98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <xTaskIncrementTick+0x150>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <xTaskIncrementTick+0x15c>)
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	601a      	str	r2, [r3, #0]
					break;
 8002f16:	e03f      	b.n	8002f98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <xTaskIncrementTick+0x150>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d203      	bcs.n	8002f38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <xTaskIncrementTick+0x15c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f36:	e02f      	b.n	8002f98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe ff99 	bl	8001e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe ff90 	bl	8001e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <xTaskIncrementTick+0x160>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d903      	bls.n	8002f68 <xTaskIncrementTick+0xd8>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <xTaskIncrementTick+0x160>)
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <xTaskIncrementTick+0x164>)
 8002f76:	441a      	add	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7fe ff1b 	bl	8001dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <xTaskIncrementTick+0x168>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d3b8      	bcc.n	8002f04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f96:	e7b5      	b.n	8002f04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <xTaskIncrementTick+0x168>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	4915      	ldr	r1, [pc, #84]	; (8002ff4 <xTaskIncrementTick+0x164>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d901      	bls.n	8002fb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <xTaskIncrementTick+0x16c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e004      	b.n	8002fcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <xTaskIncrementTick+0x170>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <xTaskIncrementTick+0x170>)
 8002fca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002fcc:	697b      	ldr	r3, [r7, #20]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000ce0 	.word	0x20000ce0
 8002fdc:	20000cbc 	.word	0x20000cbc
 8002fe0:	20000c70 	.word	0x20000c70
 8002fe4:	20000c74 	.word	0x20000c74
 8002fe8:	20000cd0 	.word	0x20000cd0
 8002fec:	20000cd8 	.word	0x20000cd8
 8002ff0:	20000cc0 	.word	0x20000cc0
 8002ff4:	200007e8 	.word	0x200007e8
 8002ff8:	200007e4 	.word	0x200007e4
 8002ffc:	20000ccc 	.word	0x20000ccc
 8003000:	20000cc8 	.word	0x20000cc8

08003004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <vTaskSwitchContext+0xa8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <vTaskSwitchContext+0xac>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003018:	e041      	b.n	800309e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <vTaskSwitchContext+0xac>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <vTaskSwitchContext+0xb0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e010      	b.n	800304a <vTaskSwitchContext+0x46>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <vTaskSwitchContext+0x40>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	607b      	str	r3, [r7, #4]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <vTaskSwitchContext+0x3e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3b01      	subs	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	491b      	ldr	r1, [pc, #108]	; (80030b8 <vTaskSwitchContext+0xb4>)
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0e4      	beq.n	8003028 <vTaskSwitchContext+0x24>
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <vTaskSwitchContext+0xb4>)
 800306a:	4413      	add	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3308      	adds	r3, #8
 8003080:	429a      	cmp	r2, r3
 8003082:	d104      	bne.n	800308e <vTaskSwitchContext+0x8a>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a09      	ldr	r2, [pc, #36]	; (80030bc <vTaskSwitchContext+0xb8>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <vTaskSwitchContext+0xb0>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000ce0 	.word	0x20000ce0
 80030b0:	20000ccc 	.word	0x20000ccc
 80030b4:	20000cc0 	.word	0x20000cc0
 80030b8:	200007e8 	.word	0x200007e8
 80030bc:	200007e4 	.word	0x200007e4

080030c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60fb      	str	r3, [r7, #12]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <vTaskPlaceOnEventList+0x44>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3318      	adds	r3, #24
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fe87 	bl	8001e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030f4:	2101      	movs	r1, #1
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f000 fa7c 	bl	80035f4 <prvAddCurrentTaskToDelayedList>
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200007e4 	.word	0x200007e4

08003108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	617b      	str	r3, [r7, #20]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <vTaskPlaceOnEventListRestricted+0x54>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3318      	adds	r3, #24
 8003136:	4619      	mov	r1, r3
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7fe fe3e 	bl	8001dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f000 fa51 	bl	80035f4 <prvAddCurrentTaskToDelayedList>
	}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200007e4 	.word	0x200007e4

08003160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	60fb      	str	r3, [r7, #12]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3318      	adds	r3, #24
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fe6f 	bl	8001e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <xTaskRemoveFromEventList+0xb0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fe66 	bl	8001e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <xTaskRemoveFromEventList+0xb4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d903      	bls.n	80031bc <xTaskRemoveFromEventList+0x5c>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	4a16      	ldr	r2, [pc, #88]	; (8003214 <xTaskRemoveFromEventList+0xb4>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <xTaskRemoveFromEventList+0xb8>)
 80031ca:	441a      	add	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fe fdf1 	bl	8001dba <vListInsertEnd>
 80031d8:	e005      	b.n	80031e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3318      	adds	r3, #24
 80031de:	4619      	mov	r1, r3
 80031e0:	480e      	ldr	r0, [pc, #56]	; (800321c <xTaskRemoveFromEventList+0xbc>)
 80031e2:	f7fe fdea 	bl	8001dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <xTaskRemoveFromEventList+0xc0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d905      	bls.n	8003200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <xTaskRemoveFromEventList+0xc4>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e001      	b.n	8003204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003204:	697b      	ldr	r3, [r7, #20]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000ce0 	.word	0x20000ce0
 8003214:	20000cc0 	.word	0x20000cc0
 8003218:	200007e8 	.word	0x200007e8
 800321c:	20000c78 	.word	0x20000c78
 8003220:	200007e4 	.word	0x200007e4
 8003224:	20000ccc 	.word	0x20000ccc

08003228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <vTaskInternalSetTimeOutState+0x24>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <vTaskInternalSetTimeOutState+0x28>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000cd0 	.word	0x20000cd0
 8003250:	20000cbc 	.word	0x20000cbc

08003254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	613b      	str	r3, [r7, #16]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	60fb      	str	r3, [r7, #12]
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003296:	f000 fe7d 	bl	8003f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <xTaskCheckForTimeOut+0xbc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d102      	bne.n	80032ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e023      	b.n	8003302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <xTaskCheckForTimeOut+0xc0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d007      	beq.n	80032d6 <xTaskCheckForTimeOut+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e015      	b.n	8003302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d20b      	bcs.n	80032f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff9b 	bl	8003228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e004      	b.n	8003302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032fe:	2301      	movs	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003302:	f000 fe77 	bl	8003ff4 <vPortExitCritical>

	return xReturn;
 8003306:	69fb      	ldr	r3, [r7, #28]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000cbc 	.word	0x20000cbc
 8003314:	20000cd0 	.word	0x20000cd0

08003318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <vTaskMissedYield+0x14>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	20000ccc 	.word	0x20000ccc

08003330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003338:	f000 f852 	bl	80033e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <prvIdleTask+0x28>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d9f9      	bls.n	8003338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <prvIdleTask+0x2c>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003354:	e7f0      	b.n	8003338 <prvIdleTask+0x8>
 8003356:	bf00      	nop
 8003358:	200007e8 	.word	0x200007e8
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e00c      	b.n	8003386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <prvInitialiseTaskLists+0x60>)
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fcf0 	bl	8001d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3301      	adds	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b37      	cmp	r3, #55	; 0x37
 800338a:	d9ef      	bls.n	800336c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 800338e:	f7fe fce7 	bl	8001d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003392:	480d      	ldr	r0, [pc, #52]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 8003394:	f7fe fce4 	bl	8001d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003398:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x6c>)
 800339a:	f7fe fce1 	bl	8001d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800339e:	480c      	ldr	r0, [pc, #48]	; (80033d0 <prvInitialiseTaskLists+0x70>)
 80033a0:	f7fe fcde 	bl	8001d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x74>)
 80033a6:	f7fe fcdb 	bl	8001d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvInitialiseTaskLists+0x78>)
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 80033ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvInitialiseTaskLists+0x7c>)
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200007e8 	.word	0x200007e8
 80033c4:	20000c48 	.word	0x20000c48
 80033c8:	20000c5c 	.word	0x20000c5c
 80033cc:	20000c78 	.word	0x20000c78
 80033d0:	20000c8c 	.word	0x20000c8c
 80033d4:	20000ca4 	.word	0x20000ca4
 80033d8:	20000c70 	.word	0x20000c70
 80033dc:	20000c74 	.word	0x20000c74

080033e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e6:	e019      	b.n	800341c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033e8:	f000 fdd4 	bl	8003f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <prvCheckTasksWaitingTermination+0x50>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fd3b 	bl	8001e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 8003410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003412:	f000 fdef 	bl	8003ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f810 	bl	800343c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e1      	bne.n	80033e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000c8c 	.word	0x20000c8c
 8003434:	20000cb8 	.word	0x20000cb8
 8003438:	20000ca0 	.word	0x20000ca0

0800343c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4618      	mov	r0, r3
 8003454:	f000 ff8c 	bl	8004370 <vPortFree>
				vPortFree( pxTCB );
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 ff89 	bl	8004370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800345e:	e018      	b.n	8003492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003466:	2b01      	cmp	r3, #1
 8003468:	d103      	bne.n	8003472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 ff80 	bl	8004370 <vPortFree>
	}
 8003470:	e00f      	b.n	8003492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003478:	2b02      	cmp	r3, #2
 800347a:	d00a      	beq.n	8003492 <prvDeleteTCB+0x56>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	60fb      	str	r3, [r7, #12]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <prvDeleteTCB+0x54>
	}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvResetNextTaskUnblockTime+0x38>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <prvResetNextTaskUnblockTime+0x3c>)
 80034ae:	f04f 32ff 	mov.w	r2, #4294967295
 80034b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034b4:	e008      	b.n	80034c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <prvResetNextTaskUnblockTime+0x38>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <prvResetNextTaskUnblockTime+0x3c>)
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	20000c70 	.word	0x20000c70
 80034d8:	20000cd8 	.word	0x20000cd8

080034dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <xTaskGetSchedulerState+0x34>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034ea:	2301      	movs	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	e008      	b.n	8003502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <xTaskGetSchedulerState+0x38>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034f8:	2302      	movs	r3, #2
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	e001      	b.n	8003502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003502:	687b      	ldr	r3, [r7, #4]
	}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20000cc4 	.word	0x20000cc4
 8003514:	20000ce0 	.word	0x20000ce0

08003518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d056      	beq.n	80035dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <xTaskPriorityDisinherit+0xd0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d00a      	beq.n	800354e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	429a      	cmp	r2, r3
 8003580:	d02c      	beq.n	80035dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d128      	bne.n	80035dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fc70 	bl	8001e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <xTaskPriorityDisinherit+0xd4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d903      	bls.n	80035bc <xTaskPriorityDisinherit+0xa4>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <xTaskPriorityDisinherit+0xd4>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <xTaskPriorityDisinherit+0xd8>)
 80035ca:	441a      	add	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7fe fbf1 	bl	8001dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035dc:	697b      	ldr	r3, [r7, #20]
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200007e4 	.word	0x200007e4
 80035ec:	20000cc0 	.word	0x20000cc0
 80035f0:	200007e8 	.word	0x200007e8

080035f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <prvAddCurrentTaskToDelayedList+0x90>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <prvAddCurrentTaskToDelayedList+0x94>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fc32 	bl	8001e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d10a      	bne.n	800362e <prvAddCurrentTaskToDelayedList+0x3a>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <prvAddCurrentTaskToDelayedList+0x94>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4819      	ldr	r0, [pc, #100]	; (800368c <prvAddCurrentTaskToDelayedList+0x98>)
 8003628:	f7fe fbc7 	bl	8001dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800362c:	e026      	b.n	800367c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <prvAddCurrentTaskToDelayedList+0x94>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	429a      	cmp	r2, r3
 8003644:	d209      	bcs.n	800365a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <prvAddCurrentTaskToDelayedList+0x94>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7fe fbd5 	bl	8001e02 <vListInsert>
}
 8003658:	e010      	b.n	800367c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800365a:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <prvAddCurrentTaskToDelayedList+0xa0>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <prvAddCurrentTaskToDelayedList+0x94>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe fbcb 	bl	8001e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <prvAddCurrentTaskToDelayedList+0xa4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d202      	bcs.n	800367c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000cbc 	.word	0x20000cbc
 8003688:	200007e4 	.word	0x200007e4
 800368c:	20000ca4 	.word	0x20000ca4
 8003690:	20000c74 	.word	0x20000c74
 8003694:	20000c70 	.word	0x20000c70
 8003698:	20000cd8 	.word	0x20000cd8

0800369c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80036a6:	f000 fb07 	bl	8003cb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <xTimerCreateTimerTask+0x80>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d021      	beq.n	80036f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80036ba:	1d3a      	adds	r2, r7, #4
 80036bc:	f107 0108 	add.w	r1, r7, #8
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fb31 	bl	8001d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	9202      	str	r2, [sp, #8]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2302      	movs	r3, #2
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	460a      	mov	r2, r1
 80036dc:	4910      	ldr	r1, [pc, #64]	; (8003720 <xTimerCreateTimerTask+0x84>)
 80036de:	4811      	ldr	r0, [pc, #68]	; (8003724 <xTimerCreateTimerTask+0x88>)
 80036e0:	f7ff f8de 	bl	80028a0 <xTaskCreateStatic>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <xTimerCreateTimerTask+0x8c>)
 80036e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <xTimerCreateTimerTask+0x8c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	613b      	str	r3, [r7, #16]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000d14 	.word	0x20000d14
 8003720:	08005068 	.word	0x08005068
 8003724:	08003861 	.word	0x08003861
 8003728:	20000d18 	.word	0x20000d18

0800372c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	623b      	str	r3, [r7, #32]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <xTimerGenericCommand+0x98>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02a      	beq.n	80037b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b05      	cmp	r3, #5
 8003772:	dc18      	bgt.n	80037a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003774:	f7ff feb2 	bl	80034dc <xTaskGetSchedulerState>
 8003778:	4603      	mov	r3, r0
 800377a:	2b02      	cmp	r3, #2
 800377c:	d109      	bne.n	8003792 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <xTimerGenericCommand+0x98>)
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	f107 0110 	add.w	r1, r7, #16
 8003786:	2300      	movs	r3, #0
 8003788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378a:	f7fe fca1 	bl	80020d0 <xQueueGenericSend>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24
 8003790:	e012      	b.n	80037b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <xTimerGenericCommand+0x98>)
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f107 0110 	add.w	r1, r7, #16
 800379a:	2300      	movs	r3, #0
 800379c:	2200      	movs	r2, #0
 800379e:	f7fe fc97 	bl	80020d0 <xQueueGenericSend>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
 80037a4:	e008      	b.n	80037b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <xTimerGenericCommand+0x98>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f107 0110 	add.w	r1, r7, #16
 80037ae:	2300      	movs	r3, #0
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	f7fe fd8b 	bl	80022cc <xQueueGenericSendFromISR>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3728      	adds	r7, #40	; 0x28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000d14 	.word	0x20000d14

080037c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <prvProcessExpiredTimer+0x94>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fb47 	bl	8001e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d022      	beq.n	800383a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	18d1      	adds	r1, r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6978      	ldr	r0, [r7, #20]
 8003802:	f000 f8d1 	bl	80039a8 <prvInsertTimerInActiveList>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01f      	beq.n	800384c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	2100      	movs	r1, #0
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff88 	bl	800372c <xTimerGenericCommand>
 800381c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	60fb      	str	r3, [r7, #12]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	6978      	ldr	r0, [r7, #20]
 8003852:	4798      	blx	r3
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000d0c 	.word	0x20000d0c

08003860 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f857 	bl	8003920 <prvGetNextExpireTime>
 8003872:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f803 	bl	8003884 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800387e:	f000 f8d5 	bl	8003a2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003882:	e7f1      	b.n	8003868 <prvTimerTask+0x8>

08003884 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800388e:	f7ff fa43 	bl	8002d18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f866 	bl	8003968 <prvSampleTimeNow>
 800389c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d130      	bne.n	8003906 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <prvProcessTimerOrBlockTask+0x3c>
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d806      	bhi.n	80038c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80038b2:	f7ff fa3f 	bl	8002d34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff85 	bl	80037c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80038be:	e024      	b.n	800390a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <prvProcessTimerOrBlockTask+0x90>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <prvProcessTimerOrBlockTask+0x50>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <prvProcessTimerOrBlockTask+0x52>
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <prvProcessTimerOrBlockTask+0x94>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fe ffa7 	bl	8002838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038ea:	f7ff fa23 	bl	8002d34 <xTaskResumeAll>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <prvProcessTimerOrBlockTask+0x98>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
}
 8003904:	e001      	b.n	800390a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003906:	f7ff fa15 	bl	8002d34 <xTaskResumeAll>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000d10 	.word	0x20000d10
 8003918:	20000d14 	.word	0x20000d14
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <prvGetNextExpireTime+0x44>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <prvGetNextExpireTime+0x16>
 8003932:	2201      	movs	r2, #1
 8003934:	e000      	b.n	8003938 <prvGetNextExpireTime+0x18>
 8003936:	2200      	movs	r2, #0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <prvGetNextExpireTime+0x44>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e001      	b.n	8003954 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000d0c 	.word	0x20000d0c

08003968 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003970:	f7ff fa7e 	bl	8002e70 <xTaskGetTickCount>
 8003974:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <prvSampleTimeNow+0x3c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	429a      	cmp	r2, r3
 800397e:	d205      	bcs.n	800398c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003980:	f000 f936 	bl	8003bf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <prvSampleTimeNow+0x3c>)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003998:	68fb      	ldr	r3, [r7, #12]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000d1c 	.word	0x20000d1c

080039a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d812      	bhi.n	80039f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d302      	bcc.n	80039e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e01b      	b.n	8003a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <prvInsertTimerInActiveList+0x7c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe fa08 	bl	8001e02 <vListInsert>
 80039f2:	e012      	b.n	8003a1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d206      	bcs.n	8003a0a <prvInsertTimerInActiveList+0x62>
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e007      	b.n	8003a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <prvInsertTimerInActiveList+0x80>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe f9f4 	bl	8001e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a1a:	697b      	ldr	r3, [r7, #20]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000d10 	.word	0x20000d10
 8003a28:	20000d0c 	.word	0x20000d0c

08003a2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08e      	sub	sp, #56	; 0x38
 8003a30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a32:	e0ca      	b.n	8003bca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da18      	bge.n	8003a6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	61fb      	str	r3, [r7, #28]
}
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a62:	6850      	ldr	r0, [r2, #4]
 8003a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f2c0 80aa 	blt.w	8003bc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe f9f5 	bl	8001e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff6b 	bl	8003968 <prvSampleTimeNow>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b09      	cmp	r3, #9
 8003a98:	f200 8097 	bhi.w	8003bca <prvProcessReceivedCommands+0x19e>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <prvProcessReceivedCommands+0x78>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003acd 	.word	0x08003acd
 8003ab0:	08003b41 	.word	0x08003b41
 8003ab4:	08003b55 	.word	0x08003b55
 8003ab8:	08003b9f 	.word	0x08003b9f
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003acd 	.word	0x08003acd
 8003ac4:	08003b41 	.word	0x08003b41
 8003ac8:	08003b55 	.word	0x08003b55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	18d1      	adds	r1, r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aec:	f7ff ff5c 	bl	80039a8 <prvInsertTimerInActiveList>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d069      	beq.n	8003bca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05e      	beq.n	8003bca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	441a      	add	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1e:	f7ff fe05 	bl	800372c <xTimerGenericCommand>
 8003b22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14f      	bne.n	8003bca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	61bb      	str	r3, [r7, #24]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b52:	e03a      	b.n	8003bca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	617b      	str	r3, [r7, #20]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	18d1      	adds	r1, r2, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b98:	f7ff ff06 	bl	80039a8 <prvInsertTimerInActiveList>
					break;
 8003b9c:	e015      	b.n	8003bca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bae:	f000 fbdf 	bl	8004370 <vPortFree>
 8003bb2:	e00a      	b.n	8003bca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bc6:	e000      	b.n	8003bca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003bc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <prvProcessReceivedCommands+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1d39      	adds	r1, r7, #4
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fc16 	bl	8002404 <xQueueReceive>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f47f af2a 	bne.w	8003a34 <prvProcessReceivedCommands+0x8>
	}
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3730      	adds	r7, #48	; 0x30
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000d14 	.word	0x20000d14

08003bf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bf6:	e048      	b.n	8003c8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe f92f 	bl	8001e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02e      	beq.n	8003c8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90e      	bls.n	8003c5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe f8d4 	bl	8001e02 <vListInsert>
 8003c5a:	e016      	b.n	8003c8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	2100      	movs	r1, #0
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff fd60 	bl	800372c <xTimerGenericCommand>
 8003c6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	603b      	str	r3, [r7, #0]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1b1      	bne.n	8003bf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <prvSwitchTimerLists+0xc4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <prvSwitchTimerLists+0xc0>)
 8003ca0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvSwitchTimerLists+0xc4>)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000d0c 	.word	0x20000d0c
 8003cb4:	20000d10 	.word	0x20000d10

08003cb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003cbe:	f000 f969 	bl	8003f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <prvCheckForValidListAndQueue+0x60>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d120      	bne.n	8003d0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cca:	4814      	ldr	r0, [pc, #80]	; (8003d1c <prvCheckForValidListAndQueue+0x64>)
 8003ccc:	f7fe f848 	bl	8001d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cd0:	4813      	ldr	r0, [pc, #76]	; (8003d20 <prvCheckForValidListAndQueue+0x68>)
 8003cd2:	f7fe f845 	bl	8001d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <prvCheckForValidListAndQueue+0x6c>)
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <prvCheckForValidListAndQueue+0x64>)
 8003cda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <prvCheckForValidListAndQueue+0x70>)
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <prvCheckForValidListAndQueue+0x68>)
 8003ce0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <prvCheckForValidListAndQueue+0x74>)
 8003ce8:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <prvCheckForValidListAndQueue+0x78>)
 8003cea:	2110      	movs	r1, #16
 8003cec:	200a      	movs	r0, #10
 8003cee:	f7fe f953 	bl	8001f98 <xQueueGenericCreateStatic>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <prvCheckForValidListAndQueue+0x60>)
 8003cf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvCheckForValidListAndQueue+0x60>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <prvCheckForValidListAndQueue+0x60>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	490b      	ldr	r1, [pc, #44]	; (8003d34 <prvCheckForValidListAndQueue+0x7c>)
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fd6c 	bl	80027e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d0c:	f000 f972 	bl	8003ff4 <vPortExitCritical>
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000d14 	.word	0x20000d14
 8003d1c:	20000ce4 	.word	0x20000ce4
 8003d20:	20000cf8 	.word	0x20000cf8
 8003d24:	20000d0c 	.word	0x20000d0c
 8003d28:	20000d10 	.word	0x20000d10
 8003d2c:	20000dc0 	.word	0x20000dc0
 8003d30:	20000d20 	.word	0x20000d20
 8003d34:	08005070 	.word	0x08005070

08003d38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b04      	subs	r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b04      	subs	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b04      	subs	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d68:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <pxPortInitialiseStack+0x64>)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b14      	subs	r3, #20
 8003d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f06f 0202 	mvn.w	r2, #2
 8003d86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3b20      	subs	r3, #32
 8003d8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	08003da1 	.word	0x08003da1

08003da0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <prvTaskExitError+0x54>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d00a      	beq.n	8003dca <prvTaskExitError+0x2a>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60fb      	str	r3, [r7, #12]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <prvTaskExitError+0x28>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
}
 8003ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dde:	bf00      	nop
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0fc      	beq.n	8003de0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	2000000c 	.word	0x2000000c
	...

08003e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <prvPortStartFirstTask+0x24>)
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f380 8808 	msr	MSP, r0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8814 	msr	CONTROL, r0
 8003e3a:	b662      	cpsie	i
 8003e3c:	b661      	cpsie	f
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	df00      	svc	0
 8003e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e4a:	bf00      	nop
 8003e4c:	e000ed08 	.word	0xe000ed08

08003e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e56:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <xPortStartScheduler+0x120>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a46      	ldr	r2, [pc, #280]	; (8003f74 <xPortStartScheduler+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10a      	bne.n	8003e76 <xPortStartScheduler+0x26>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e76:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <xPortStartScheduler+0x120>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <xPortStartScheduler+0x128>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10a      	bne.n	8003e96 <xPortStartScheduler+0x46>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <xPortStartScheduler+0x130>)
 8003ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <xPortStartScheduler+0x134>)
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec4:	e009      	b.n	8003eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <xPortStartScheduler+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a2d      	ldr	r2, [pc, #180]	; (8003f84 <xPortStartScheduler+0x134>)
 8003ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d0ef      	beq.n	8003ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ee6:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <xPortStartScheduler+0x134>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1c3 0307 	rsb	r3, r3, #7
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00a      	beq.n	8003f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	60bb      	str	r3, [r7, #8]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <xPortStartScheduler+0x134>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <xPortStartScheduler+0x134>)
 8003f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <xPortStartScheduler+0x134>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <xPortStartScheduler+0x134>)
 8003f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f3e:	f000 f8dd 	bl	80040fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <xPortStartScheduler+0x13c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f48:	f000 f8fc 	bl	8004144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <xPortStartScheduler+0x140>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <xPortStartScheduler+0x140>)
 8003f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f58:	f7ff ff66 	bl	8003e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f5c:	f7ff f852 	bl	8003004 <vTaskSwitchContext>
	prvTaskExitError();
 8003f60:	f7ff ff1e 	bl	8003da0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00
 8003f74:	410fc271 	.word	0x410fc271
 8003f78:	410fc270 	.word	0x410fc270
 8003f7c:	e000e400 	.word	0xe000e400
 8003f80:	20000e10 	.word	0x20000e10
 8003f84:	20000e14 	.word	0x20000e14
 8003f88:	e000ed20 	.word	0xe000ed20
 8003f8c:	2000000c 	.word	0x2000000c
 8003f90:	e000ef34 	.word	0xe000ef34

08003f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	607b      	str	r3, [r7, #4]
}
 8003fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <vPortEnterCritical+0x58>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <vPortEnterCritical+0x58>)
 8003fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <vPortEnterCritical+0x58>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10f      	bne.n	8003fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <vPortEnterCritical+0x5c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vPortEnterCritical+0x4a>
	}
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	2000000c 	.word	0x2000000c
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <vPortExitCritical+0x50>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <vPortExitCritical+0x24>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	607b      	str	r3, [r7, #4]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <vPortExitCritical+0x50>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3b01      	subs	r3, #1
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <vPortExitCritical+0x50>)
 8004020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <vPortExitCritical+0x50>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <vPortExitCritical+0x42>
 800402a:	2300      	movs	r3, #0
 800402c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f383 8811 	msr	BASEPRI, r3
}
 8004034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
	...

08004050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004050:	f3ef 8009 	mrs	r0, PSP
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <pxCurrentTCBConst>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f01e 0f10 	tst.w	lr, #16
 8004060:	bf08      	it	eq
 8004062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	6010      	str	r0, [r2, #0]
 800406c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004074:	f380 8811 	msr	BASEPRI, r0
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f7fe ffc0 	bl	8003004 <vTaskSwitchContext>
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f380 8811 	msr	BASEPRI, r0
 800408c:	bc09      	pop	{r0, r3}
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	6808      	ldr	r0, [r1, #0]
 8004092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004096:	f01e 0f10 	tst.w	lr, #16
 800409a:	bf08      	it	eq
 800409c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040a0:	f380 8809 	msr	PSP, r0
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst>:
 80040b0:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
}
 80040d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040d2:	f7fe fedd 	bl	8002e90 <xTaskIncrementTick>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <xPortSysTickHandler+0x40>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f383 8811 	msr	BASEPRI, r3
}
 80040ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <vPortSetupTimerInterrupt+0x34>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <vPortSetupTimerInterrupt+0x38>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <vPortSetupTimerInterrupt+0x3c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <vPortSetupTimerInterrupt+0x40>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <vPortSetupTimerInterrupt+0x44>)
 800411a:	3b01      	subs	r3, #1
 800411c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800411e:	4b04      	ldr	r3, [pc, #16]	; (8004130 <vPortSetupTimerInterrupt+0x34>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000e010 	.word	0xe000e010
 8004134:	e000e018 	.word	0xe000e018
 8004138:	20000000 	.word	0x20000000
 800413c:	10624dd3 	.word	0x10624dd3
 8004140:	e000e014 	.word	0xe000e014

08004144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004154 <vPortEnableVFP+0x10>
 8004148:	6801      	ldr	r1, [r0, #0]
 800414a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800414e:	6001      	str	r1, [r0, #0]
 8004150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004152:	bf00      	nop
 8004154:	e000ed88 	.word	0xe000ed88

08004158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800415e:	f3ef 8305 	mrs	r3, IPSR
 8004162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	d914      	bls.n	8004194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <vPortValidateInterruptPriority+0x70>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <vPortValidateInterruptPriority+0x74>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	7afa      	ldrb	r2, [r7, #11]
 800417a:	429a      	cmp	r2, r3
 800417c:	d20a      	bcs.n	8004194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	607b      	str	r3, [r7, #4]
}
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <vPortValidateInterruptPriority+0x78>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <vPortValidateInterruptPriority+0x7c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d90a      	bls.n	80041ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	603b      	str	r3, [r7, #0]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <vPortValidateInterruptPriority+0x60>
	}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e3f0 	.word	0xe000e3f0
 80041cc:	20000e10 	.word	0x20000e10
 80041d0:	e000ed0c 	.word	0xe000ed0c
 80041d4:	20000e14 	.word	0x20000e14

080041d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041e4:	f7fe fd98 	bl	8002d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041e8:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <pvPortMalloc+0x180>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041f0:	f000 f920 	bl	8004434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <pvPortMalloc+0x184>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 8093 	bne.w	8004328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01d      	beq.n	8004244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004208:	2208      	movs	r2, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d014      	beq.n	8004244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	3308      	adds	r3, #8
 8004222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <pvPortMalloc+0x6c>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	617b      	str	r3, [r7, #20]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d06e      	beq.n	8004328 <pvPortMalloc+0x150>
 800424a:	4b45      	ldr	r3, [pc, #276]	; (8004360 <pvPortMalloc+0x188>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d869      	bhi.n	8004328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004254:	4b43      	ldr	r3, [pc, #268]	; (8004364 <pvPortMalloc+0x18c>)
 8004256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004258:	4b42      	ldr	r3, [pc, #264]	; (8004364 <pvPortMalloc+0x18c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800425e:	e004      	b.n	800426a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d903      	bls.n	800427c <pvPortMalloc+0xa4>
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f1      	bne.n	8004260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <pvPortMalloc+0x180>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	429a      	cmp	r2, r3
 8004284:	d050      	beq.n	8004328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2208      	movs	r2, #8
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1ad2      	subs	r2, r2, r3
 80042a0:	2308      	movs	r3, #8
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d91f      	bls.n	80042e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <pvPortMalloc+0xf8>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	613b      	str	r3, [r7, #16]
}
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f000 f908 	bl	80044f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <pvPortMalloc+0x188>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <pvPortMalloc+0x188>)
 80042f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <pvPortMalloc+0x188>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <pvPortMalloc+0x190>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d203      	bcs.n	800430a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <pvPortMalloc+0x188>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <pvPortMalloc+0x190>)
 8004308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <pvPortMalloc+0x184>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	431a      	orrs	r2, r3
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <pvPortMalloc+0x194>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a11      	ldr	r2, [pc, #68]	; (800436c <pvPortMalloc+0x194>)
 8004326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004328:	f7fe fd04 	bl	8002d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <pvPortMalloc+0x174>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60fb      	str	r3, [r7, #12]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <pvPortMalloc+0x172>
	return pvReturn;
 800434c:	69fb      	ldr	r3, [r7, #28]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20004a20 	.word	0x20004a20
 800435c:	20004a34 	.word	0x20004a34
 8004360:	20004a24 	.word	0x20004a24
 8004364:	20004a18 	.word	0x20004a18
 8004368:	20004a28 	.word	0x20004a28
 800436c:	20004a2c 	.word	0x20004a2c

08004370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04d      	beq.n	800441e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004382:	2308      	movs	r3, #8
 8004384:	425b      	negs	r3, r3
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <vPortFree+0xb8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <vPortFree+0x44>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	60fb      	str	r3, [r7, #12]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <vPortFree+0x62>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60bb      	str	r3, [r7, #8]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <vPortFree+0xb8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01e      	beq.n	800441e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11a      	bne.n	800441e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <vPortFree+0xb8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043f8:	f7fe fc8e 	bl	8002d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <vPortFree+0xbc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4413      	add	r3, r2
 8004406:	4a09      	ldr	r2, [pc, #36]	; (800442c <vPortFree+0xbc>)
 8004408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f000 f874 	bl	80044f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <vPortFree+0xc0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a06      	ldr	r2, [pc, #24]	; (8004430 <vPortFree+0xc0>)
 8004418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800441a:	f7fe fc8b 	bl	8002d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20004a34 	.word	0x20004a34
 800442c:	20004a24 	.word	0x20004a24
 8004430:	20004a30 	.word	0x20004a30

08004434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800443a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800443e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004440:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <prvHeapInit+0xac>)
 8004442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3307      	adds	r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <prvHeapInit+0xac>)
 8004464:	4413      	add	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800446c:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <prvHeapInit+0xb0>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <prvHeapInit+0xb0>)
 8004474:	2200      	movs	r2, #0
 8004476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4413      	add	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004480:	2208      	movs	r2, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0307 	bic.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <prvHeapInit+0xb4>)
 8004494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <prvHeapInit+0xb4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <prvHeapInit+0xb4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvHeapInit+0xb4>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <prvHeapInit+0xb8>)
 80044c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <prvHeapInit+0xbc>)
 80044ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <prvHeapInit+0xc0>)
 80044ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20000e18 	.word	0x20000e18
 80044e4:	20004a18 	.word	0x20004a18
 80044e8:	20004a20 	.word	0x20004a20
 80044ec:	20004a28 	.word	0x20004a28
 80044f0:	20004a24 	.word	0x20004a24
 80044f4:	20004a34 	.word	0x20004a34

080044f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004500:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <prvInsertBlockIntoFreeList+0xac>)
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e002      	b.n	800450c <prvInsertBlockIntoFreeList+0x14>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d8f7      	bhi.n	8004506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d108      	bne.n	800453a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d118      	bne.n	8004580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d00d      	beq.n	8004576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e008      	b.n	8004588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e003      	b.n	8004588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d002      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20004a18 	.word	0x20004a18
 80045a8:	20004a20 	.word	0x20004a20

080045ac <__errno>:
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <__errno+0x8>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000010 	.word	0x20000010

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	4d0d      	ldr	r5, [pc, #52]	; (80045f0 <__libc_init_array+0x38>)
 80045bc:	4c0d      	ldr	r4, [pc, #52]	; (80045f4 <__libc_init_array+0x3c>)
 80045be:	1b64      	subs	r4, r4, r5
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	2600      	movs	r6, #0
 80045c4:	42a6      	cmp	r6, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	4d0b      	ldr	r5, [pc, #44]	; (80045f8 <__libc_init_array+0x40>)
 80045ca:	4c0c      	ldr	r4, [pc, #48]	; (80045fc <__libc_init_array+0x44>)
 80045cc:	f000 fd2c 	bl	8005028 <_init>
 80045d0:	1b64      	subs	r4, r4, r5
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	2600      	movs	r6, #0
 80045d6:	42a6      	cmp	r6, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e0:	4798      	blx	r3
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ea:	4798      	blx	r3
 80045ec:	3601      	adds	r6, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08005144 	.word	0x08005144
 80045f4:	08005144 	.word	0x08005144
 80045f8:	08005144 	.word	0x08005144
 80045fc:	08005148 	.word	0x08005148

08004600 <memcpy>:
 8004600:	440a      	add	r2, r1
 8004602:	4291      	cmp	r1, r2
 8004604:	f100 33ff 	add.w	r3, r0, #4294967295
 8004608:	d100      	bne.n	800460c <memcpy+0xc>
 800460a:	4770      	bx	lr
 800460c:	b510      	push	{r4, lr}
 800460e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004616:	4291      	cmp	r1, r2
 8004618:	d1f9      	bne.n	800460e <memcpy+0xe>
 800461a:	bd10      	pop	{r4, pc}

0800461c <memset>:
 800461c:	4402      	add	r2, r0
 800461e:	4603      	mov	r3, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <_puts_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	4605      	mov	r5, r0
 8004632:	b118      	cbz	r0, 800463c <_puts_r+0x10>
 8004634:	6983      	ldr	r3, [r0, #24]
 8004636:	b90b      	cbnz	r3, 800463c <_puts_r+0x10>
 8004638:	f000 fa48 	bl	8004acc <__sinit>
 800463c:	69ab      	ldr	r3, [r5, #24]
 800463e:	68ac      	ldr	r4, [r5, #8]
 8004640:	b913      	cbnz	r3, 8004648 <_puts_r+0x1c>
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fa42 	bl	8004acc <__sinit>
 8004648:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <_puts_r+0xd0>)
 800464a:	429c      	cmp	r4, r3
 800464c:	d120      	bne.n	8004690 <_puts_r+0x64>
 800464e:	686c      	ldr	r4, [r5, #4]
 8004650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004652:	07db      	lsls	r3, r3, #31
 8004654:	d405      	bmi.n	8004662 <_puts_r+0x36>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	0598      	lsls	r0, r3, #22
 800465a:	d402      	bmi.n	8004662 <_puts_r+0x36>
 800465c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800465e:	f000 fad3 	bl	8004c08 <__retarget_lock_acquire_recursive>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	0719      	lsls	r1, r3, #28
 8004666:	d51d      	bpl.n	80046a4 <_puts_r+0x78>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	b1db      	cbz	r3, 80046a4 <_puts_r+0x78>
 800466c:	3e01      	subs	r6, #1
 800466e:	68a3      	ldr	r3, [r4, #8]
 8004670:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004674:	3b01      	subs	r3, #1
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	bb39      	cbnz	r1, 80046ca <_puts_r+0x9e>
 800467a:	2b00      	cmp	r3, #0
 800467c:	da38      	bge.n	80046f0 <_puts_r+0xc4>
 800467e:	4622      	mov	r2, r4
 8004680:	210a      	movs	r1, #10
 8004682:	4628      	mov	r0, r5
 8004684:	f000 f848 	bl	8004718 <__swbuf_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d011      	beq.n	80046b0 <_puts_r+0x84>
 800468c:	250a      	movs	r5, #10
 800468e:	e011      	b.n	80046b4 <_puts_r+0x88>
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <_puts_r+0xd4>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <_puts_r+0x6e>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7da      	b.n	8004650 <_puts_r+0x24>
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <_puts_r+0xd8>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7d5      	b.n	8004650 <_puts_r+0x24>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f888 	bl	80047bc <__swsetup_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0dd      	beq.n	800466c <_puts_r+0x40>
 80046b0:	f04f 35ff 	mov.w	r5, #4294967295
 80046b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b6:	07da      	lsls	r2, r3, #31
 80046b8:	d405      	bmi.n	80046c6 <_puts_r+0x9a>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	059b      	lsls	r3, r3, #22
 80046be:	d402      	bmi.n	80046c6 <_puts_r+0x9a>
 80046c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c2:	f000 faa2 	bl	8004c0a <__retarget_lock_release_recursive>
 80046c6:	4628      	mov	r0, r5
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da04      	bge.n	80046d8 <_puts_r+0xac>
 80046ce:	69a2      	ldr	r2, [r4, #24]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dc06      	bgt.n	80046e2 <_puts_r+0xb6>
 80046d4:	290a      	cmp	r1, #10
 80046d6:	d004      	beq.n	80046e2 <_puts_r+0xb6>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	7019      	strb	r1, [r3, #0]
 80046e0:	e7c5      	b.n	800466e <_puts_r+0x42>
 80046e2:	4622      	mov	r2, r4
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 f817 	bl	8004718 <__swbuf_r>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d1bf      	bne.n	800466e <_puts_r+0x42>
 80046ee:	e7df      	b.n	80046b0 <_puts_r+0x84>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	250a      	movs	r5, #10
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	701d      	strb	r5, [r3, #0]
 80046fa:	e7db      	b.n	80046b4 <_puts_r+0x88>
 80046fc:	080050fc 	.word	0x080050fc
 8004700:	0800511c 	.word	0x0800511c
 8004704:	080050dc 	.word	0x080050dc

08004708 <puts>:
 8004708:	4b02      	ldr	r3, [pc, #8]	; (8004714 <puts+0xc>)
 800470a:	4601      	mov	r1, r0
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f7ff bf8d 	b.w	800462c <_puts_r>
 8004712:	bf00      	nop
 8004714:	20000010 	.word	0x20000010

08004718 <__swbuf_r>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	460e      	mov	r6, r1
 800471c:	4614      	mov	r4, r2
 800471e:	4605      	mov	r5, r0
 8004720:	b118      	cbz	r0, 800472a <__swbuf_r+0x12>
 8004722:	6983      	ldr	r3, [r0, #24]
 8004724:	b90b      	cbnz	r3, 800472a <__swbuf_r+0x12>
 8004726:	f000 f9d1 	bl	8004acc <__sinit>
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <__swbuf_r+0x98>)
 800472c:	429c      	cmp	r4, r3
 800472e:	d12b      	bne.n	8004788 <__swbuf_r+0x70>
 8004730:	686c      	ldr	r4, [r5, #4]
 8004732:	69a3      	ldr	r3, [r4, #24]
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	071a      	lsls	r2, r3, #28
 800473a:	d52f      	bpl.n	800479c <__swbuf_r+0x84>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	b36b      	cbz	r3, 800479c <__swbuf_r+0x84>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	1ac0      	subs	r0, r0, r3
 8004746:	6963      	ldr	r3, [r4, #20]
 8004748:	b2f6      	uxtb	r6, r6
 800474a:	4283      	cmp	r3, r0
 800474c:	4637      	mov	r7, r6
 800474e:	dc04      	bgt.n	800475a <__swbuf_r+0x42>
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 f926 	bl	80049a4 <_fflush_r>
 8004758:	bb30      	cbnz	r0, 80047a8 <__swbuf_r+0x90>
 800475a:	68a3      	ldr	r3, [r4, #8]
 800475c:	3b01      	subs	r3, #1
 800475e:	60a3      	str	r3, [r4, #8]
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	701e      	strb	r6, [r3, #0]
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	3001      	adds	r0, #1
 800476c:	4283      	cmp	r3, r0
 800476e:	d004      	beq.n	800477a <__swbuf_r+0x62>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	d506      	bpl.n	8004784 <__swbuf_r+0x6c>
 8004776:	2e0a      	cmp	r6, #10
 8004778:	d104      	bne.n	8004784 <__swbuf_r+0x6c>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 f911 	bl	80049a4 <_fflush_r>
 8004782:	b988      	cbnz	r0, 80047a8 <__swbuf_r+0x90>
 8004784:	4638      	mov	r0, r7
 8004786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <__swbuf_r+0x9c>)
 800478a:	429c      	cmp	r4, r3
 800478c:	d101      	bne.n	8004792 <__swbuf_r+0x7a>
 800478e:	68ac      	ldr	r4, [r5, #8]
 8004790:	e7cf      	b.n	8004732 <__swbuf_r+0x1a>
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <__swbuf_r+0xa0>)
 8004794:	429c      	cmp	r4, r3
 8004796:	bf08      	it	eq
 8004798:	68ec      	ldreq	r4, [r5, #12]
 800479a:	e7ca      	b.n	8004732 <__swbuf_r+0x1a>
 800479c:	4621      	mov	r1, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 f80c 	bl	80047bc <__swsetup_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0cb      	beq.n	8004740 <__swbuf_r+0x28>
 80047a8:	f04f 37ff 	mov.w	r7, #4294967295
 80047ac:	e7ea      	b.n	8004784 <__swbuf_r+0x6c>
 80047ae:	bf00      	nop
 80047b0:	080050fc 	.word	0x080050fc
 80047b4:	0800511c 	.word	0x0800511c
 80047b8:	080050dc 	.word	0x080050dc

080047bc <__swsetup_r>:
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <__swsetup_r+0xcc>)
 80047be:	b570      	push	{r4, r5, r6, lr}
 80047c0:	681d      	ldr	r5, [r3, #0]
 80047c2:	4606      	mov	r6, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	b125      	cbz	r5, 80047d2 <__swsetup_r+0x16>
 80047c8:	69ab      	ldr	r3, [r5, #24]
 80047ca:	b913      	cbnz	r3, 80047d2 <__swsetup_r+0x16>
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f97d 	bl	8004acc <__sinit>
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <__swsetup_r+0xd0>)
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d10f      	bne.n	80047f8 <__swsetup_r+0x3c>
 80047d8:	686c      	ldr	r4, [r5, #4]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047e0:	0719      	lsls	r1, r3, #28
 80047e2:	d42c      	bmi.n	800483e <__swsetup_r+0x82>
 80047e4:	06dd      	lsls	r5, r3, #27
 80047e6:	d411      	bmi.n	800480c <__swsetup_r+0x50>
 80047e8:	2309      	movs	r3, #9
 80047ea:	6033      	str	r3, [r6, #0]
 80047ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	e03e      	b.n	8004876 <__swsetup_r+0xba>
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <__swsetup_r+0xd4>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d101      	bne.n	8004802 <__swsetup_r+0x46>
 80047fe:	68ac      	ldr	r4, [r5, #8]
 8004800:	e7eb      	b.n	80047da <__swsetup_r+0x1e>
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <__swsetup_r+0xd8>)
 8004804:	429c      	cmp	r4, r3
 8004806:	bf08      	it	eq
 8004808:	68ec      	ldreq	r4, [r5, #12]
 800480a:	e7e6      	b.n	80047da <__swsetup_r+0x1e>
 800480c:	0758      	lsls	r0, r3, #29
 800480e:	d512      	bpl.n	8004836 <__swsetup_r+0x7a>
 8004810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004812:	b141      	cbz	r1, 8004826 <__swsetup_r+0x6a>
 8004814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004818:	4299      	cmp	r1, r3
 800481a:	d002      	beq.n	8004822 <__swsetup_r+0x66>
 800481c:	4630      	mov	r0, r6
 800481e:	f000 fa5b 	bl	8004cd8 <_free_r>
 8004822:	2300      	movs	r3, #0
 8004824:	6363      	str	r3, [r4, #52]	; 0x34
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	2300      	movs	r3, #0
 8004830:	6063      	str	r3, [r4, #4]
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	b94b      	cbnz	r3, 8004856 <__swsetup_r+0x9a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484c:	d003      	beq.n	8004856 <__swsetup_r+0x9a>
 800484e:	4621      	mov	r1, r4
 8004850:	4630      	mov	r0, r6
 8004852:	f000 fa01 	bl	8004c58 <__smakebuf_r>
 8004856:	89a0      	ldrh	r0, [r4, #12]
 8004858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800485c:	f010 0301 	ands.w	r3, r0, #1
 8004860:	d00a      	beq.n	8004878 <__swsetup_r+0xbc>
 8004862:	2300      	movs	r3, #0
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	6963      	ldr	r3, [r4, #20]
 8004868:	425b      	negs	r3, r3
 800486a:	61a3      	str	r3, [r4, #24]
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	b943      	cbnz	r3, 8004882 <__swsetup_r+0xc6>
 8004870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004874:	d1ba      	bne.n	80047ec <__swsetup_r+0x30>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	0781      	lsls	r1, r0, #30
 800487a:	bf58      	it	pl
 800487c:	6963      	ldrpl	r3, [r4, #20]
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	e7f4      	b.n	800486c <__swsetup_r+0xb0>
 8004882:	2000      	movs	r0, #0
 8004884:	e7f7      	b.n	8004876 <__swsetup_r+0xba>
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010
 800488c:	080050fc 	.word	0x080050fc
 8004890:	0800511c 	.word	0x0800511c
 8004894:	080050dc 	.word	0x080050dc

08004898 <__sflush_r>:
 8004898:	898a      	ldrh	r2, [r1, #12]
 800489a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	0710      	lsls	r0, r2, #28
 80048a2:	460c      	mov	r4, r1
 80048a4:	d458      	bmi.n	8004958 <__sflush_r+0xc0>
 80048a6:	684b      	ldr	r3, [r1, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc05      	bgt.n	80048b8 <__sflush_r+0x20>
 80048ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x20>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d0f9      	beq.n	80048b2 <__sflush_r+0x1a>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	d032      	beq.n	8004930 <__sflush_r+0x98>
 80048ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d505      	bpl.n	80048de <__sflush_r+0x46>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	b10b      	cbz	r3, 80048de <__sflush_r+0x46>
 80048da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	4602      	mov	r2, r0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x66>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82c      	bhi.n	8004950 <__sflush_r+0xb8>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <__sflush_r+0x108>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d528      	bpl.n	8004950 <__sflush_r+0xb8>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x7c>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x7a>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x7c>
 8004912:	6560      	str	r0, [r4, #84]	; 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	2900      	cmp	r1, #0
 800491a:	d0ca      	beq.n	80048b2 <__sflush_r+0x1a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__sflush_r+0x92>
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f9d7 	bl	8004cd8 <_free_r>
 800492a:	2000      	movs	r0, #0
 800492c:	6360      	str	r0, [r4, #52]	; 0x34
 800492e:	e7c1      	b.n	80048b4 <__sflush_r+0x1c>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	2301      	movs	r3, #1
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c41      	adds	r1, r0, #1
 800493a:	d1c7      	bne.n	80048cc <__sflush_r+0x34>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c4      	beq.n	80048cc <__sflush_r+0x34>
 8004942:	2b1d      	cmp	r3, #29
 8004944:	d001      	beq.n	800494a <__sflush_r+0xb2>
 8004946:	2b16      	cmp	r3, #22
 8004948:	d101      	bne.n	800494e <__sflush_r+0xb6>
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	e7b1      	b.n	80048b2 <__sflush_r+0x1a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	e7ad      	b.n	80048b4 <__sflush_r+0x1c>
 8004958:	690f      	ldr	r7, [r1, #16]
 800495a:	2f00      	cmp	r7, #0
 800495c:	d0a9      	beq.n	80048b2 <__sflush_r+0x1a>
 800495e:	0793      	lsls	r3, r2, #30
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	bf08      	it	eq
 8004964:	694b      	ldreq	r3, [r1, #20]
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	eba6 0807 	sub.w	r8, r6, r7
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	f1b8 0f00 	cmp.w	r8, #0
 8004976:	dd9c      	ble.n	80048b2 <__sflush_r+0x1a>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497c:	4643      	mov	r3, r8
 800497e:	463a      	mov	r2, r7
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	2800      	cmp	r0, #0
 8004986:	dc06      	bgt.n	8004996 <__sflush_r+0xfe>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e78e      	b.n	80048b4 <__sflush_r+0x1c>
 8004996:	4407      	add	r7, r0
 8004998:	eba8 0800 	sub.w	r8, r8, r0
 800499c:	e7e9      	b.n	8004972 <__sflush_r+0xda>
 800499e:	bf00      	nop
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6983      	ldr	r3, [r0, #24]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f000 f887 	bl	8004acc <__sinit>
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <_fflush_r+0x6c>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11b      	bne.n	80049fc <_fflush_r+0x58>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <_fflush_r+0xa>
 80049ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d404      	bmi.n	80049de <_fflush_r+0x3a>
 80049d4:	0599      	lsls	r1, r3, #22
 80049d6:	d402      	bmi.n	80049de <_fflush_r+0x3a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f000 f915 	bl	8004c08 <__retarget_lock_acquire_recursive>
 80049de:	4628      	mov	r0, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7ff ff59 	bl	8004898 <__sflush_r>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	4605      	mov	r5, r0
 80049ec:	d4e0      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d4dd      	bmi.n	80049b0 <_fflush_r+0xc>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f000 f908 	bl	8004c0a <__retarget_lock_release_recursive>
 80049fa:	e7d9      	b.n	80049b0 <_fflush_r+0xc>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x70>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <_fflush_r+0x62>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7df      	b.n	80049c6 <_fflush_r+0x22>
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_fflush_r+0x74>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7da      	b.n	80049c6 <_fflush_r+0x22>
 8004a10:	080050fc 	.word	0x080050fc
 8004a14:	0800511c 	.word	0x0800511c
 8004a18:	080050dc 	.word	0x080050dc

08004a1c <std>:
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4604      	mov	r4, r0
 8004a22:	e9c0 3300 	strd	r3, r3, [r0]
 8004a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2a:	6083      	str	r3, [r0, #8]
 8004a2c:	8181      	strh	r1, [r0, #12]
 8004a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a30:	81c2      	strh	r2, [r0, #14]
 8004a32:	6183      	str	r3, [r0, #24]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2208      	movs	r2, #8
 8004a38:	305c      	adds	r0, #92	; 0x5c
 8004a3a:	f7ff fdef 	bl	800461c <memset>
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x38>)
 8004a40:	6263      	str	r3, [r4, #36]	; 0x24
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x3c>)
 8004a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x40>)
 8004a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x44>)
 8004a4c:	6224      	str	r4, [r4, #32]
 8004a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08004eb9 	.word	0x08004eb9
 8004a58:	08004edb 	.word	0x08004edb
 8004a5c:	08004f13 	.word	0x08004f13
 8004a60:	08004f37 	.word	0x08004f37

08004a64 <_cleanup_r>:
 8004a64:	4901      	ldr	r1, [pc, #4]	; (8004a6c <_cleanup_r+0x8>)
 8004a66:	f000 b8af 	b.w	8004bc8 <_fwalk_reent>
 8004a6a:	bf00      	nop
 8004a6c:	080049a5 	.word	0x080049a5

08004a70 <__sfmoreglue>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	2268      	movs	r2, #104	; 0x68
 8004a74:	1e4d      	subs	r5, r1, #1
 8004a76:	4355      	muls	r5, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7e:	f000 f997 	bl	8004db0 <_malloc_r>
 8004a82:	4604      	mov	r4, r0
 8004a84:	b140      	cbz	r0, 8004a98 <__sfmoreglue+0x28>
 8004a86:	2100      	movs	r1, #0
 8004a88:	e9c0 1600 	strd	r1, r6, [r0]
 8004a8c:	300c      	adds	r0, #12
 8004a8e:	60a0      	str	r0, [r4, #8]
 8004a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a94:	f7ff fdc2 	bl	800461c <memset>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}

08004a9c <__sfp_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sfp_lock_acquire+0x8>)
 8004a9e:	f000 b8b3 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20004a39 	.word	0x20004a39

08004aa8 <__sfp_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sfp_lock_release+0x8>)
 8004aaa:	f000 b8ae 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	20004a39 	.word	0x20004a39

08004ab4 <__sinit_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sinit_lock_acquire+0x8>)
 8004ab6:	f000 b8a7 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20004a3a 	.word	0x20004a3a

08004ac0 <__sinit_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sinit_lock_release+0x8>)
 8004ac2:	f000 b8a2 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20004a3a 	.word	0x20004a3a

08004acc <__sinit>:
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	f7ff fff0 	bl	8004ab4 <__sinit_lock_acquire>
 8004ad4:	69a3      	ldr	r3, [r4, #24]
 8004ad6:	b11b      	cbz	r3, 8004ae0 <__sinit+0x14>
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f7ff bff0 	b.w	8004ac0 <__sinit_lock_release>
 8004ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <__sinit+0x68>)
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <__sinit+0x6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	bf04      	itt	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	61a3      	streq	r3, [r4, #24]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f820 	bl	8004b3c <__sfp>
 8004afc:	6060      	str	r0, [r4, #4]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f81c 	bl	8004b3c <__sfp>
 8004b04:	60a0      	str	r0, [r4, #8]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f818 	bl	8004b3c <__sfp>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60e0      	str	r0, [r4, #12]
 8004b10:	2104      	movs	r1, #4
 8004b12:	6860      	ldr	r0, [r4, #4]
 8004b14:	f7ff ff82 	bl	8004a1c <std>
 8004b18:	68a0      	ldr	r0, [r4, #8]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2109      	movs	r1, #9
 8004b1e:	f7ff ff7d 	bl	8004a1c <std>
 8004b22:	68e0      	ldr	r0, [r4, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	2112      	movs	r1, #18
 8004b28:	f7ff ff78 	bl	8004a1c <std>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	e7d2      	b.n	8004ad8 <__sinit+0xc>
 8004b32:	bf00      	nop
 8004b34:	080050d8 	.word	0x080050d8
 8004b38:	08004a65 	.word	0x08004a65

08004b3c <__sfp>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	4607      	mov	r7, r0
 8004b40:	f7ff ffac 	bl	8004a9c <__sfp_lock_acquire>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <__sfp+0x84>)
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	69b3      	ldr	r3, [r6, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__sfp+0x16>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ffbd 	bl	8004acc <__sinit>
 8004b52:	3648      	adds	r6, #72	; 0x48
 8004b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	d503      	bpl.n	8004b64 <__sfp+0x28>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	b30b      	cbz	r3, 8004ba4 <__sfp+0x68>
 8004b60:	6836      	ldr	r6, [r6, #0]
 8004b62:	e7f7      	b.n	8004b54 <__sfp+0x18>
 8004b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b68:	b9d5      	cbnz	r5, 8004ba0 <__sfp+0x64>
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <__sfp+0x88>)
 8004b6c:	60e3      	str	r3, [r4, #12]
 8004b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b72:	6665      	str	r5, [r4, #100]	; 0x64
 8004b74:	f000 f847 	bl	8004c06 <__retarget_lock_init_recursive>
 8004b78:	f7ff ff96 	bl	8004aa8 <__sfp_lock_release>
 8004b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	61a5      	str	r5, [r4, #24]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b90:	f7ff fd44 	bl	800461c <memset>
 8004b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	3468      	adds	r4, #104	; 0x68
 8004ba2:	e7d9      	b.n	8004b58 <__sfp+0x1c>
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff ff62 	bl	8004a70 <__sfmoreglue>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d1d5      	bne.n	8004b60 <__sfp+0x24>
 8004bb4:	f7ff ff78 	bl	8004aa8 <__sfp_lock_release>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	e7ee      	b.n	8004b9c <__sfp+0x60>
 8004bbe:	bf00      	nop
 8004bc0:	080050d8 	.word	0x080050d8
 8004bc4:	ffff0001 	.word	0xffff0001

08004bc8 <_fwalk_reent>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bda:	f1b9 0901 	subs.w	r9, r9, #1
 8004bde:	d505      	bpl.n	8004bec <_fwalk_reent+0x24>
 8004be0:	6824      	ldr	r4, [r4, #0]
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d1f7      	bne.n	8004bd6 <_fwalk_reent+0xe>
 8004be6:	4638      	mov	r0, r7
 8004be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bec:	89ab      	ldrh	r3, [r5, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d907      	bls.n	8004c02 <_fwalk_reent+0x3a>
 8004bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <_fwalk_reent+0x3a>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	4307      	orrs	r7, r0
 8004c02:	3568      	adds	r5, #104	; 0x68
 8004c04:	e7e9      	b.n	8004bda <_fwalk_reent+0x12>

08004c06 <__retarget_lock_init_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_acquire_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_release_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460e      	mov	r6, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	da08      	bge.n	8004c30 <__swhatbuf_r+0x24>
 8004c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	061a      	lsls	r2, r3, #24
 8004c28:	d410      	bmi.n	8004c4c <__swhatbuf_r+0x40>
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	e00e      	b.n	8004c4e <__swhatbuf_r+0x42>
 8004c30:	466a      	mov	r2, sp
 8004c32:	f000 f9a7 	bl	8004f84 <_fstat_r>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dbf1      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c3a:	9a01      	ldr	r2, [sp, #4]
 8004c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c44:	425a      	negs	r2, r3
 8004c46:	415a      	adcs	r2, r3
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	e7ee      	b.n	8004c2a <__swhatbuf_r+0x1e>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	2000      	movs	r0, #0
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	b016      	add	sp, #88	; 0x58
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f895 	bl	8004db0 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <__smakebuf_r+0x7c>)
 8004c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	6163      	str	r3, [r4, #20]
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	6120      	str	r0, [r4, #16]
 8004cb2:	b15b      	cbz	r3, 8004ccc <__smakebuf_r+0x74>
 8004cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f975 	bl	8004fa8 <_isatty_r>
 8004cbe:	b128      	cbz	r0, 8004ccc <__smakebuf_r+0x74>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	89a0      	ldrh	r0, [r4, #12]
 8004cce:	4305      	orrs	r5, r0
 8004cd0:	81a5      	strh	r5, [r4, #12]
 8004cd2:	e7cd      	b.n	8004c70 <__smakebuf_r+0x18>
 8004cd4:	08004a65 	.word	0x08004a65

08004cd8 <_free_r>:
 8004cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d044      	beq.n	8004d68 <_free_r+0x90>
 8004cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce2:	9001      	str	r0, [sp, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cea:	bfb8      	it	lt
 8004cec:	18e4      	addlt	r4, r4, r3
 8004cee:	f000 f97d 	bl	8004fec <__malloc_lock>
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <_free_r+0x94>)
 8004cf4:	9801      	ldr	r0, [sp, #4]
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	b933      	cbnz	r3, 8004d08 <_free_r+0x30>
 8004cfa:	6063      	str	r3, [r4, #4]
 8004cfc:	6014      	str	r4, [r2, #0]
 8004cfe:	b003      	add	sp, #12
 8004d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d04:	f000 b978 	b.w	8004ff8 <__malloc_unlock>
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	d908      	bls.n	8004d1e <_free_r+0x46>
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	428b      	cmp	r3, r1
 8004d12:	bf01      	itttt	eq
 8004d14:	6819      	ldreq	r1, [r3, #0]
 8004d16:	685b      	ldreq	r3, [r3, #4]
 8004d18:	1949      	addeq	r1, r1, r5
 8004d1a:	6021      	streq	r1, [r4, #0]
 8004d1c:	e7ed      	b.n	8004cfa <_free_r+0x22>
 8004d1e:	461a      	mov	r2, r3
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	b10b      	cbz	r3, 8004d28 <_free_r+0x50>
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	d9fa      	bls.n	8004d1e <_free_r+0x46>
 8004d28:	6811      	ldr	r1, [r2, #0]
 8004d2a:	1855      	adds	r5, r2, r1
 8004d2c:	42a5      	cmp	r5, r4
 8004d2e:	d10b      	bne.n	8004d48 <_free_r+0x70>
 8004d30:	6824      	ldr	r4, [r4, #0]
 8004d32:	4421      	add	r1, r4
 8004d34:	1854      	adds	r4, r2, r1
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	d1e0      	bne.n	8004cfe <_free_r+0x26>
 8004d3c:	681c      	ldr	r4, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	6053      	str	r3, [r2, #4]
 8004d42:	4421      	add	r1, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	e7da      	b.n	8004cfe <_free_r+0x26>
 8004d48:	d902      	bls.n	8004d50 <_free_r+0x78>
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	6003      	str	r3, [r0, #0]
 8004d4e:	e7d6      	b.n	8004cfe <_free_r+0x26>
 8004d50:	6825      	ldr	r5, [r4, #0]
 8004d52:	1961      	adds	r1, r4, r5
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf04      	itt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	bf04      	itt	eq
 8004d60:	1949      	addeq	r1, r1, r5
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	6054      	str	r4, [r2, #4]
 8004d66:	e7ca      	b.n	8004cfe <_free_r+0x26>
 8004d68:	b003      	add	sp, #12
 8004d6a:	bd30      	pop	{r4, r5, pc}
 8004d6c:	20004a3c 	.word	0x20004a3c

08004d70 <sbrk_aligned>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4e0e      	ldr	r6, [pc, #56]	; (8004dac <sbrk_aligned+0x3c>)
 8004d74:	460c      	mov	r4, r1
 8004d76:	6831      	ldr	r1, [r6, #0]
 8004d78:	4605      	mov	r5, r0
 8004d7a:	b911      	cbnz	r1, 8004d82 <sbrk_aligned+0x12>
 8004d7c:	f000 f88c 	bl	8004e98 <_sbrk_r>
 8004d80:	6030      	str	r0, [r6, #0]
 8004d82:	4621      	mov	r1, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f887 	bl	8004e98 <_sbrk_r>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d00a      	beq.n	8004da4 <sbrk_aligned+0x34>
 8004d8e:	1cc4      	adds	r4, r0, #3
 8004d90:	f024 0403 	bic.w	r4, r4, #3
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d007      	beq.n	8004da8 <sbrk_aligned+0x38>
 8004d98:	1a21      	subs	r1, r4, r0
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f87c 	bl	8004e98 <_sbrk_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d101      	bne.n	8004da8 <sbrk_aligned+0x38>
 8004da4:	f04f 34ff 	mov.w	r4, #4294967295
 8004da8:	4620      	mov	r0, r4
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	20004a40 	.word	0x20004a40

08004db0 <_malloc_r>:
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	1ccd      	adds	r5, r1, #3
 8004db6:	f025 0503 	bic.w	r5, r5, #3
 8004dba:	3508      	adds	r5, #8
 8004dbc:	2d0c      	cmp	r5, #12
 8004dbe:	bf38      	it	cc
 8004dc0:	250c      	movcc	r5, #12
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	db01      	blt.n	8004dcc <_malloc_r+0x1c>
 8004dc8:	42a9      	cmp	r1, r5
 8004dca:	d905      	bls.n	8004dd8 <_malloc_r+0x28>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd8:	4e2e      	ldr	r6, [pc, #184]	; (8004e94 <_malloc_r+0xe4>)
 8004dda:	f000 f907 	bl	8004fec <__malloc_lock>
 8004dde:	6833      	ldr	r3, [r6, #0]
 8004de0:	461c      	mov	r4, r3
 8004de2:	bb34      	cbnz	r4, 8004e32 <_malloc_r+0x82>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4638      	mov	r0, r7
 8004de8:	f7ff ffc2 	bl	8004d70 <sbrk_aligned>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	4604      	mov	r4, r0
 8004df0:	d14d      	bne.n	8004e8e <_malloc_r+0xde>
 8004df2:	6834      	ldr	r4, [r6, #0]
 8004df4:	4626      	mov	r6, r4
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d140      	bne.n	8004e7c <_malloc_r+0xcc>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4638      	mov	r0, r7
 8004e00:	eb04 0803 	add.w	r8, r4, r3
 8004e04:	f000 f848 	bl	8004e98 <_sbrk_r>
 8004e08:	4580      	cmp	r8, r0
 8004e0a:	d13a      	bne.n	8004e82 <_malloc_r+0xd2>
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	3503      	adds	r5, #3
 8004e10:	1a6d      	subs	r5, r5, r1
 8004e12:	f025 0503 	bic.w	r5, r5, #3
 8004e16:	3508      	adds	r5, #8
 8004e18:	2d0c      	cmp	r5, #12
 8004e1a:	bf38      	it	cc
 8004e1c:	250c      	movcc	r5, #12
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffa5 	bl	8004d70 <sbrk_aligned>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d02b      	beq.n	8004e82 <_malloc_r+0xd2>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	442b      	add	r3, r5
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	e00e      	b.n	8004e50 <_malloc_r+0xa0>
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	1b52      	subs	r2, r2, r5
 8004e36:	d41e      	bmi.n	8004e76 <_malloc_r+0xc6>
 8004e38:	2a0b      	cmp	r2, #11
 8004e3a:	d916      	bls.n	8004e6a <_malloc_r+0xba>
 8004e3c:	1961      	adds	r1, r4, r5
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6025      	str	r5, [r4, #0]
 8004e42:	bf18      	it	ne
 8004e44:	6059      	strne	r1, [r3, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	bf08      	it	eq
 8004e4a:	6031      	streq	r1, [r6, #0]
 8004e4c:	5162      	str	r2, [r4, r5]
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	4638      	mov	r0, r7
 8004e52:	f104 060b 	add.w	r6, r4, #11
 8004e56:	f000 f8cf 	bl	8004ff8 <__malloc_unlock>
 8004e5a:	f026 0607 	bic.w	r6, r6, #7
 8004e5e:	1d23      	adds	r3, r4, #4
 8004e60:	1af2      	subs	r2, r6, r3
 8004e62:	d0b6      	beq.n	8004dd2 <_malloc_r+0x22>
 8004e64:	1b9b      	subs	r3, r3, r6
 8004e66:	50a3      	str	r3, [r4, r2]
 8004e68:	e7b3      	b.n	8004dd2 <_malloc_r+0x22>
 8004e6a:	6862      	ldr	r2, [r4, #4]
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	bf0c      	ite	eq
 8004e70:	6032      	streq	r2, [r6, #0]
 8004e72:	605a      	strne	r2, [r3, #4]
 8004e74:	e7ec      	b.n	8004e50 <_malloc_r+0xa0>
 8004e76:	4623      	mov	r3, r4
 8004e78:	6864      	ldr	r4, [r4, #4]
 8004e7a:	e7b2      	b.n	8004de2 <_malloc_r+0x32>
 8004e7c:	4634      	mov	r4, r6
 8004e7e:	6876      	ldr	r6, [r6, #4]
 8004e80:	e7b9      	b.n	8004df6 <_malloc_r+0x46>
 8004e82:	230c      	movs	r3, #12
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4638      	mov	r0, r7
 8004e88:	f000 f8b6 	bl	8004ff8 <__malloc_unlock>
 8004e8c:	e7a1      	b.n	8004dd2 <_malloc_r+0x22>
 8004e8e:	6025      	str	r5, [r4, #0]
 8004e90:	e7de      	b.n	8004e50 <_malloc_r+0xa0>
 8004e92:	bf00      	nop
 8004e94:	20004a3c 	.word	0x20004a3c

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fb fd60 	bl	8000968 <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20004a44 	.word	0x20004a44

08004eb8 <__sread>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	f000 f8a0 	bl	8005004 <_read_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	bfab      	itete	ge
 8004ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ecc:	181b      	addge	r3, r3, r0
 8004ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed2:	bfac      	ite	ge
 8004ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ed6:	81a3      	strhlt	r3, [r4, #12]
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <__swrite>:
 8004eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ede:	461f      	mov	r7, r3
 8004ee0:	898b      	ldrh	r3, [r1, #12]
 8004ee2:	05db      	lsls	r3, r3, #23
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	4616      	mov	r6, r2
 8004eea:	d505      	bpl.n	8004ef8 <__swrite+0x1e>
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f000 f868 	bl	8004fc8 <_lseek_r>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	f000 b817 	b.w	8004f40 <_write_r>

08004f12 <__sseek>:
 8004f12:	b510      	push	{r4, lr}
 8004f14:	460c      	mov	r4, r1
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	f000 f855 	bl	8004fc8 <_lseek_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	bf15      	itete	ne
 8004f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f2e:	81a3      	strheq	r3, [r4, #12]
 8004f30:	bf18      	it	ne
 8004f32:	81a3      	strhne	r3, [r4, #12]
 8004f34:	bd10      	pop	{r4, pc}

08004f36 <__sclose>:
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 b813 	b.w	8004f64 <_close_r>
	...

08004f40 <_write_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	; (8004f60 <_write_r+0x20>)
 8004f44:	4604      	mov	r4, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fb fcb9 	bl	80008c6 <_write>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_write_r+0x1e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_write_r+0x1e>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	20004a44 	.word	0x20004a44

08004f64 <_close_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_close_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb fcc5 	bl	80008fe <_close>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_close_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_close_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20004a44 	.word	0x20004a44

08004f84 <_fstat_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_fstat_r+0x20>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	f7fb fcc0 	bl	8000916 <_fstat>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d102      	bne.n	8004fa0 <_fstat_r+0x1c>
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	b103      	cbz	r3, 8004fa0 <_fstat_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20004a44 	.word	0x20004a44

08004fa8 <_isatty_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d06      	ldr	r5, [pc, #24]	; (8004fc4 <_isatty_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fb fcbf 	bl	8000936 <_isatty>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_isatty_r+0x1a>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_isatty_r+0x1a>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20004a44 	.word	0x20004a44

08004fc8 <_lseek_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d07      	ldr	r5, [pc, #28]	; (8004fe8 <_lseek_r+0x20>)
 8004fcc:	4604      	mov	r4, r0
 8004fce:	4608      	mov	r0, r1
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	602a      	str	r2, [r5, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f7fb fcb8 	bl	800094c <_lseek>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_lseek_r+0x1e>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_lseek_r+0x1e>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20004a44 	.word	0x20004a44

08004fec <__malloc_lock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__malloc_lock+0x8>)
 8004fee:	f7ff be0b 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20004a38 	.word	0x20004a38

08004ff8 <__malloc_unlock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_unlock+0x8>)
 8004ffa:	f7ff be06 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ffe:	bf00      	nop
 8005000:	20004a38 	.word	0x20004a38

08005004 <_read_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_read_r+0x20>)
 8005008:	4604      	mov	r4, r0
 800500a:	4608      	mov	r0, r1
 800500c:	4611      	mov	r1, r2
 800500e:	2200      	movs	r2, #0
 8005010:	602a      	str	r2, [r5, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f7fb fc3a 	bl	800088c <_read>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_read_r+0x1e>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_read_r+0x1e>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20004a44 	.word	0x20004a44

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
