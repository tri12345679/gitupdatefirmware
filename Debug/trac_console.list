
trac_console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049dc  20000074  08006c7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a50  08006c7c  00024a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001407f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecf  00000000  00000000  00034123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00038268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044fe  00000000  00000000  00039390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ee4  00000000  00000000  0003d88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000974f6  00000000  00000000  00051772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b0  00000000  00000000  000e8cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a90 	.word	0x08006a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006a90 	.word	0x08006a90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <ADC_Init>:
};
/* USER CODE BEGIN PV */
float temp = 0;

void ADC_Init()
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <ADC_Init+0xb0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <ADC_Init+0xb0>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <ADC_Init+0xb0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
	uint32_t* MODER = (uint32_t*)0x40020000;
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <ADC_Init+0xb4>)
 8000df4:	61fb      	str	r3, [r7, #28]
	*MODER |= (0b11<<0);
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f043 0203 	orr.w	r2, r3, #3
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	601a      	str	r2, [r3, #0]

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <ADC_Init+0xb0>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <ADC_Init+0xb0>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <ADC_Init+0xb0>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
	uint32_t* SMPR1 = (uint32_t*)0x4001200c;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <ADC_Init+0xb8>)
 8000e20:	61bb      	str	r3, [r7, #24]
	*SMPR1 |= (0b111<<18);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	601a      	str	r2, [r3, #0]
	uint32_t* SMPR2 = (uint32_t*)0x40012010;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <ADC_Init+0xbc>)
 8000e30:	617b      	str	r3, [r7, #20]
	*SMPR2 |= (0b111<<0);
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0207 	orr.w	r2, r3, #7
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]

	uint32_t* JSQR = (uint32_t*)0x40012038;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <ADC_Init+0xc0>)
 8000e40:	613b      	str	r3, [r7, #16]
	*JSQR |= (16<<15); //set channel 16 (temp sensor)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	601a      	str	r2, [r3, #0]

//	uint32_t* CR1 = (uint32_t*)0x40012004;
	uint32_t* CR2 = (uint32_t*)0x40012008;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <ADC_Init+0xc4>)
 8000e50:	60fb      	str	r3, [r7, #12]
	*CR2 |= (0b01 << 20) |(1<<0);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	6013      	str	r3, [r2, #0]

	uint32_t* CCR = (uint32_t*)0x40012304;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <ADC_Init+0xc8>)
 8000e64:	60bb      	str	r3, [r7, #8]
	*CCR |= (1<<23);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	601a      	str	r2, [r3, #0]
}
 8000e72:	bf00      	nop
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	4001200c 	.word	0x4001200c
 8000e8c:	40012010 	.word	0x40012010
 8000e90:	40012038 	.word	0x40012038
 8000e94:	40012008 	.word	0x40012008
 8000e98:	40012304 	.word	0x40012304

08000e9c <Read_ADC>:
uint16_t Read_ADC ()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
	uint32_t* CR2 = (uint32_t*)0x40012008;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <Read_ADC+0x50>)
 8000ea4:	60fb      	str	r3, [r7, #12]
	*CR2 |= (1<<22);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
	uint32_t* SR = (uint32_t*)0x40012000;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <Read_ADC+0x54>)
 8000eb4:	60bb      	str	r3, [r7, #8]
	while (((*SR >> 2)&1) == 0){osDelay(1);};
 8000eb6:	e002      	b.n	8000ebe <Read_ADC+0x22>
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f001 ff63 	bl	8002d84 <osDelay>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f5      	beq.n	8000eb8 <Read_ADC+0x1c>
	*SR &=~(1<<2);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f023 0204 	bic.w	r2, r3, #4
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	601a      	str	r2, [r3, #0]

	uint32_t* JDR1 = (uint32_t*)0x4001203c;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <Read_ADC+0x58>)
 8000eda:	607b      	str	r3, [r7, #4]
	return *JDR1;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012008 	.word	0x40012008
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	4001203c 	.word	0x4001203c

08000ef8 <UART_Init>:

void UART_Init()
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <UART_Init+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <UART_Init+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <UART_Init+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <UART_Init+0x98>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <UART_Init+0x98>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <UART_Init+0x98>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

	uint32_t* GPIOA_MODER = (uint32_t*)0x40020000;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <UART_Init+0x9c>)
 8000f38:	617b      	str	r3, [r7, #20]
	*GPIOA_MODER &= ~(0b1111 << 4); // set PIN2,3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 4) | (0b10 << 6);// Pin2,3 Analog
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOA_AFRL = (uint32_t*)0x40020020;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <UART_Init+0xa0>)
 8000f54:	613b      	str	r3, [r7, #16]
	*GPIOA_AFRL |= (7 << 8) | (7 << 12);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

	// set baud rate 9600
	uint32_t* UART2_BRR = (uint32_t*)0x40004408;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <UART_Init+0xa4>)
 8000f64:	60fb      	str	r3, [r7, #12]
	*UART2_BRR = (104 << 4) | 3;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f240 6283 	movw	r2, #1667	; 0x683
 8000f6c:	601a      	str	r2, [r3, #0]

	//set 13 enable UART, set 2 r/w enable TX, set 3 r/w enable RX
	// set 5 enable Interrupt of UART
	//size 8 byte and check chan le
	uint32_t* UART2_CR1 = (uint32_t*)0x4000440c;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <UART_Init+0xa8>)
 8000f70:	60bb      	str	r3, [r7, #8]
	*UART2_CR1 |= (0b1 << 13) | (0b1 << 2) | (0b1 << 3);// | (0b1 << 5);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f7a:	f043 030c 	orr.w	r3, r3, #12
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	6013      	str	r3, [r2, #0]

	//set enable DMA of UART
//	uint32_t* UART2_CR3 = (uint32_t*)0x40004414;
//	*UART2_CR3 |= (0b1 << 6);
}
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020020 	.word	0x40020020
 8000f9c:	40004408 	.word	0x40004408
 8000fa0:	4000440c 	.word	0x4000440c

08000fa4 <UART_Send_1Byte>:




void UART_Send_1Byte(char data)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint32_t* DR = (uint32_t*)0x40004404;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <UART_Send_1Byte+0x48>)
 8000fb0:	60fb      	str	r3, [r7, #12]
	uint32_t* SR = (uint32_t*)0x40004400;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <UART_Send_1Byte+0x4c>)
 8000fb4:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7)&1) !=1){osDelay(1);};
 8000fb6:	e002      	b.n	8000fbe <UART_Send_1Byte+0x1a>
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 fee3 	bl	8002d84 <osDelay>
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	09db      	lsrs	r3, r3, #7
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f5      	beq.n	8000fb8 <UART_Send_1Byte+0x14>
	*DR = data;
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6)&1) !=1);
 8000fd2:	bf00      	nop
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	099b      	lsrs	r3, r3, #6
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f8      	beq.n	8000fd4 <UART_Send_1Byte+0x30>
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40004404 	.word	0x40004404
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <UART_Send_Str>:

void UART_Send_Str(char* data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	int str_len = strlen(data);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff f8ef 	bl	80001e0 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	60bb      	str	r3, [r7, #8]
	for(int i =0; i < str_len; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e009      	b.n	8001020 <UART_Send_Str+0x2c>
	{
		UART_Send_1Byte( data [i]);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffc5 	bl	8000fa4 <UART_Send_1Byte>
	for(int i =0; i < str_len; i++)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3301      	adds	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <UART_Send_Str+0x18>
	}

}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fbb2 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f824 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f880 	bl	8001144 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001044:	f001 fdc2 	bl	8002bcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001048:	4a09      	ldr	r2, [pc, #36]	; (8001070 <main+0x3c>)
 800104a:	2100      	movs	r1, #0
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <main+0x40>)
 800104e:	f001 fe07 	bl	8002c60 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <main+0x44>)
 8001056:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <main+0x48>)
 800105a:	2100      	movs	r1, #0
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0x4c>)
 800105e:	f001 fdff 	bl	8002c60 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <main+0x50>)
 8001066:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001068:	f001 fdd4 	bl	8002c14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106c:	e7fe      	b.n	800106c <main+0x38>
 800106e:	bf00      	nop
 8001070:	08006b00 	.word	0x08006b00
 8001074:	080011e9 	.word	0x080011e9
 8001078:	20000094 	.word	0x20000094
 800107c:	08006b24 	.word	0x08006b24
 8001080:	080012d9 	.word	0x080012d9
 8001084:	20000098 	.word	0x20000098

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f004 fb20 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xb4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xb4>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xb4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <SystemClock_Config+0xb8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <SystemClock_Config+0xb8>)
 80010d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <SystemClock_Config+0xb8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	2310      	movs	r3, #16
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fe2d 	bl	8001d58 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001104:	f000 f976 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f890 	bl	8002248 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800112e:	f000 f961 	bl	80013f4 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_GPIO_Init+0x9c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <MX_GPIO_Init+0x9c>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_GPIO_Init+0x9c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_GPIO_Init+0x9c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_GPIO_Init+0x9c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_GPIO_Init+0x9c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_GPIO_Init+0x9c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <MX_GPIO_Init+0x9c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_GPIO_Init+0x9c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <MX_GPIO_Init+0xa0>)
 80011b6:	f000 fd9b 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_GPIO_Init+0xa0>)
 80011d4:	f000 fc08 	bl	80019e8 <HAL_GPIO_Init>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	UART_Init();
 80011f0:	f7ff fe82 	bl	8000ef8 <UART_Init>
	float temp = 0;
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_Init();
 80011fa:	f7ff fde9 	bl	8000dd0 <ADC_Init>
  /* Infinite loop */

  for(;;)
  {

    temp = temp_global;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <StartTask1+0xd4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
	char msg[32] = {0};
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
	char frac = (int)((temp - (int)temp)*100);
 800121c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001228:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80012c0 <StartTask1+0xd8>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	edc7 7a00 	vstr	s15, [r7]
 8001240:	783b      	ldrb	r3, [r7, #0]
 8001242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sprintf(msg, "temp: %d.%d *C\r\n", (int)temp, frac);
 8001246:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001252:	f107 000c 	add.w	r0, r7, #12
 8001256:	ee17 2a90 	vmov	r2, s15
 800125a:	491a      	ldr	r1, [pc, #104]	; (80012c4 <StartTask1+0xdc>)
 800125c:	f004 fad4 	bl	8005808 <siprintf>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001260:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <StartTask1+0xe0>)
 8001266:	f000 fd5c 	bl	8001d22 <HAL_GPIO_TogglePin>
	for(int i =0; i < 10; i++)
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
 800126e:	e007      	b.n	8001280 <StartTask1+0x98>
	{
		cnt++;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <StartTask1+0xe4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <StartTask1+0xe4>)
 8001278:	6013      	str	r3, [r2, #0]
	for(int i =0; i < 10; i++)
 800127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127c:	3301      	adds	r3, #1
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	2b09      	cmp	r3, #9
 8001284:	ddf4      	ble.n	8001270 <StartTask1+0x88>
	}

	printf("a\n");
 8001286:	4812      	ldr	r0, [pc, #72]	; (80012d0 <StartTask1+0xe8>)
 8001288:	f004 fab6 	bl	80057f8 <puts>
	printf(msg, "temp: %d.%d *C\r\n", (int)temp, frac);
 800128c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001298:	f107 000c 	add.w	r0, r7, #12
 800129c:	ee17 2a90 	vmov	r2, s15
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <StartTask1+0xdc>)
 80012a2:	f004 fa23 	bl	80056ec <iprintf>
	UART_Send_Str(msg);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fea2 	bl	8000ff4 <UART_Send_Str>
    osDelay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f001 fd66 	bl	8002d84 <osDelay>
  {
 80012b8:	e7a1      	b.n	80011fe <StartTask1+0x16>
 80012ba:	bf00      	nop
 80012bc:	20000090 	.word	0x20000090
 80012c0:	42c80000 	.word	0x42c80000
 80012c4:	08006ab8 	.word	0x08006ab8
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	2000009c 	.word	0x2000009c
 80012d0:	08006acc 	.word	0x08006acc
 80012d4:	00000000 	.word	0x00000000

080012d8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	ADC_Init();
 80012e0:	f7ff fd76 	bl	8000dd0 <ADC_Init>

	uint16_t data_raw =0; Read_ADC();
 80012e4:	2300      	movs	r3, #0
 80012e6:	82fb      	strh	r3, [r7, #22]
 80012e8:	f7ff fdd8 	bl	8000e9c <Read_ADC>
	float vin = 0;
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */

  for(;;)
  {

	data_raw = Read_ADC();
 80012f8:	f7ff fdd0 	bl	8000e9c <Read_ADC>
 80012fc:	4603      	mov	r3, r0
 80012fe:	82fb      	strh	r3, [r7, #22]
	vin = (data_raw*3.0)/4095.0;
 8001300:	8afb      	ldrh	r3, [r7, #22]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f916 	bl	8000534 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <StartTask2+0xe0>)
 800130e:	f7ff f97b 	bl	8000608 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	a321      	add	r3, pc, #132	; (adr r3, 80013a0 <StartTask2+0xc8>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff fa9c 	bl	800085c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fb7e 	bl	8000a2c <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	613b      	str	r3, [r7, #16]
	temp = ((vin - 0.76) / 0.0025) + 25;
 8001334:	6938      	ldr	r0, [r7, #16]
 8001336:	f7ff f90f 	bl	8000558 <__aeabi_f2d>
 800133a:	a31b      	add	r3, pc, #108	; (adr r3, 80013a8 <StartTask2+0xd0>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7fe ffaa 	bl	8000298 <__aeabi_dsub>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	a318      	add	r3, pc, #96	; (adr r3, 80013b0 <StartTask2+0xd8>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa83 	bl	800085c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <StartTask2+0xe4>)
 8001364:	f7fe ff9a 	bl	800029c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fb5c 	bl	8000a2c <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]
    temp_global = temp ;
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <StartTask2+0xe8>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6013      	str	r3, [r2, #0]



//	printf("temp, ", (int)temp);
	printf("b \n");
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <StartTask2+0xec>)
 8001380:	f004 fa3a 	bl	80057f8 <puts>
	printf("hello \r\n");
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <StartTask2+0xf0>)
 8001386:	f004 fa37 	bl	80057f8 <puts>
	UART_Send_Str("hello \r\n");
 800138a:	4810      	ldr	r0, [pc, #64]	; (80013cc <StartTask2+0xf4>)
 800138c:	f7ff fe32 	bl	8000ff4 <UART_Send_Str>
    osDelay(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f001 fcf6 	bl	8002d84 <osDelay>
	data_raw = Read_ADC();
 8001398:	e7ae      	b.n	80012f8 <StartTask2+0x20>
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40affe00 	.word	0x40affe00
 80013a8:	851eb852 	.word	0x851eb852
 80013ac:	3fe851eb 	.word	0x3fe851eb
 80013b0:	47ae147b 	.word	0x47ae147b
 80013b4:	3f647ae1 	.word	0x3f647ae1
 80013b8:	40080000 	.word	0x40080000
 80013bc:	40390000 	.word	0x40390000
 80013c0:	20000090 	.word	0x20000090
 80013c4:	08006ad0 	.word	0x08006ad0
 80013c8:	08006ad4 	.word	0x08006ad4
 80013cc:	08006adc 	.word	0x08006adc

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e2:	f000 f9ff 	bl	80017e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_MspInit+0x54>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_MspInit+0x54>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_MspInit+0x54>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_MspInit+0x54>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_MspInit+0x54>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_MspInit+0x54>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f000 faa5 	bl	8001994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_InitTick+0xe4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a32      	ldr	r2, [pc, #200]	; (800153c <HAL_InitTick+0xe4>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_InitTick+0xe4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001484:	f107 0210 	add.w	r2, r7, #16
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f001 f8a6 	bl	80025e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800149e:	f001 f88b 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80014a2:	6378      	str	r0, [r7, #52]	; 0x34
 80014a4:	e004      	b.n	80014b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014a6:	f001 f887 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_InitTick+0xe8>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9b      	lsrs	r3, r3, #18
 80014ba:	3b01      	subs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_InitTick+0xec>)
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_InitTick+0xf0>)
 80014c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_InitTick+0xec>)
 80014c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ca:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_InitTick+0xec>)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_InitTick+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_InitTick+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_InitTick+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <HAL_InitTick+0xec>)
 80014e6:	f001 f8ad 	bl	8002644 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11b      	bne.n	8001530 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_InitTick+0xec>)
 80014fa:	f001 f8fd 	bl	80026f8 <HAL_TIM_Base_Start_IT>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800150c:	201e      	movs	r0, #30
 800150e:	f000 fa5d 	bl	80019cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d808      	bhi.n	800152a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	201e      	movs	r0, #30
 800151e:	f000 fa39 	bl	8001994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_InitTick+0xf4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001534:	4618      	mov	r0, r3
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	431bde83 	.word	0x431bde83
 8001544:	200000a0 	.word	0x200000a0
 8001548:	40000800 	.word	0x40000800
 800154c:	20000004 	.word	0x20000004

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM4_IRQHandler+0x10>)
 8001582:	f001 f91b 	bl	80027bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000a0 	.word	0x200000a0

08001590 <ITM_SendChar>:
#define DEMCR				*((volatile uint32_t*) 0xE000EDFCU)
//ITM Register Address
#define ITM_STIMULUS_PORT0	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN 		*((volatile uint32_t*) 0xE0000E00)
void ITM_SendChar(uint8_t ch)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
// Enable TRCENA
	DEMCR |= (1<<24);
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <ITM_SendChar+0x48>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <ITM_SendChar+0x48>)
 80015a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a4:	6013      	str	r3, [r2, #0]
// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <ITM_SendChar+0x4c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <ITM_SendChar+0x4c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6013      	str	r3, [r2, #0]
// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80015b2:	bf00      	nop
 80015b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f8      	beq.n	80015b4 <ITM_SendChar+0x24>
// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 80015c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000edfc 	.word	0xe000edfc
 80015dc:	e0000e00 	.word	0xe0000e00

080015e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
  }

  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffab 	bl	8001590 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
  }
  return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
  return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f003 ffbe 	bl	800566c <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20020000 	.word	0x20020000
 800171c:	00000400 	.word	0x00000400
 8001720:	200000e8 	.word	0x200000e8
 8001724:	20004a50 	.word	0x20004a50

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001768:	4c0b      	ldr	r4, [pc, #44]	; (8001798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001776:	f7ff ffd7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f003 ff7d 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fc59 	bl	8001034 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001790:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 8001794:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001798:	20004a50 	.word	0x20004a50

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 f8d8 	bl	800197e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f7ff fe42 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fe14 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	200000ec 	.word	0x200000ec

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200000ec 	.word	0x200000ec

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff4c 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a6:	f7ff ff61 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f7ff ffb1 	bl	8001918 <NVIC_EncodePriority>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff80 	bl	80018c4 <__NVIC_SetPriority>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff54 	bl	8001888 <__NVIC_EnableIRQ>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e159      	b.n	8001cb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8148 	bne.w	8001cb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d005      	beq.n	8001a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d130      	bne.n	8001a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d017      	beq.n	8001ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a2 	beq.w	8001cb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x202>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a48      	ldr	r2, [pc, #288]	; (8001cdc <HAL_GPIO_Init+0x2f4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x1fe>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a47      	ldr	r2, [pc, #284]	; (8001ce0 <HAL_GPIO_Init+0x2f8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a46      	ldr	r2, [pc, #280]	; (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x1f6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <HAL_GPIO_Init+0x300>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x1f2>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x204>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	; (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a24      	ldr	r2, [pc, #144]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f aea2 	bls.w	8001a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	400b      	ands	r3, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fcfc 	bl	800180c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fcf8 	bl	800180c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fce8 	bl	800180c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fce4 	bl	800180c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fc9d 	bl	800180c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fc99 	bl	800180c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc7c 	bl	800180c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc78 	bl	800180c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fc5c 	bl	800180c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc58 	bl	800180c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fc45 	bl	800180c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc41 	bl	800180c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fc01 	bl	800180c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fbfd 	bl	800180c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fbc2 	bl	800180c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fbbe 	bl	800180c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fbac 	bl	800180c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fba8 	bl	800180c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fb7c 	bl	800180c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fb78 	bl	800180c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb51 	bl	800180c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb4d 	bl	800180c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fb3a 	bl	800180c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fb36 	bl	800180c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fa68 	bl	800180c <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff fa64 	bl	800180c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f832 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	08006b48 	.word	0x08006b48
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b090      	sub	sp, #64	; 0x40
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80a1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e09b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800244c:	e09b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002452:	e098      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	627a      	str	r2, [r7, #36]	; 0x24
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800247c:	2100      	movs	r1, #0
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 800248e:	fba0 1202 	umull	r1, r2, r0, r2
 8002492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002494:	460a      	mov	r2, r1
 8002496:	62ba      	str	r2, [r7, #40]	; 0x28
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	4413      	add	r3, r2
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	2200      	movs	r2, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ae:	f7fe fb0d 	bl	8000acc <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4613      	mov	r3, r2
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	e053      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	617a      	str	r2, [r7, #20]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ce:	f04f 0b00 	mov.w	fp, #0
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ebb2 080a 	subs.w	r8, r2, sl
 80024ee:	eb63 090b 	sbc.w	r9, r3, fp
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002506:	ebb2 0408 	subs.w	r4, r2, r8
 800250a:	eb63 0509 	sbc.w	r5, r3, r9
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	00eb      	lsls	r3, r5, #3
 8002518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	eb14 030a 	adds.w	r3, r4, sl
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	eb45 030b 	adc.w	r3, r5, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	f7fe fab8 	bl	8000acc <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002588:	4618      	mov	r0, r3
 800258a:	3740      	adds	r7, #64	; 0x40
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	017d7840 	.word	0x017d7840

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08006b58 	.word	0x08006b58

080025e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	220f      	movs	r2, #15
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_GetClockConfig+0x5c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCC_GetClockConfig+0x5c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_RCC_GetClockConfig+0x5c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_RCC_GetClockConfig+0x60>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0207 	and.w	r2, r3, #7
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e041      	b.n	80026da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f839 	bl	80026e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f000 f9ca 	bl	8002a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e044      	b.n	800279a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d018      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x6c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d013      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x6c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIM_Base_Start_IT+0xb4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00e      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x6c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x6c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x6c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d010      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	e007      	b.n	8002798 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40014000 	.word	0x40014000

080027bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8ee 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8e0 	bl	80029cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f8f1 	bl	80029f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0204 	mvn.w	r2, #4
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8c4 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8b6 	bl	80029cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8c7 	bl	80029f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0208 	mvn.w	r2, #8
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f89a 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f88c 	bl	80029cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f89d 	bl	80029f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0210 	mvn.w	r2, #16
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2208      	movs	r2, #8
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f870 	bl	80029e0 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f862 	bl	80029cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f873 	bl	80029f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0201 	mvn.w	r2, #1
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fd48 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8e2 	bl	8002b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d107      	bne.n	8002998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f838 	bl	8002a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d107      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0220 	mvn.w	r2, #32
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8ac 	bl	8002b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <TIM_Base_SetConfig+0xe4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00f      	beq.n	8002a54 <TIM_Base_SetConfig+0x38>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d00b      	beq.n	8002a54 <TIM_Base_SetConfig+0x38>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a31      	ldr	r2, [pc, #196]	; (8002b04 <TIM_Base_SetConfig+0xe8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <TIM_Base_SetConfig+0x38>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a30      	ldr	r2, [pc, #192]	; (8002b08 <TIM_Base_SetConfig+0xec>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0x38>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	; (8002b0c <TIM_Base_SetConfig+0xf0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d108      	bne.n	8002a66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <TIM_Base_SetConfig+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d017      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <TIM_Base_SetConfig+0xe8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <TIM_Base_SetConfig+0xec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00f      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <TIM_Base_SetConfig+0xf0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00b      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <TIM_Base_SetConfig+0xf4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <TIM_Base_SetConfig+0xf8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d003      	beq.n	8002aa6 <TIM_Base_SetConfig+0x8a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <TIM_Base_SetConfig+0xfc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <TIM_Base_SetConfig+0xe4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	615a      	str	r2, [r3, #20]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40014000 	.word	0x40014000
 8002b14:	40014400 	.word	0x40014400
 8002b18:	40014800 	.word	0x40014800

08002b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <__NVIC_SetPriority>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Handler+0x1c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ba0:	f001 fcfe 	bl	80045a0 <xTaskGetSchedulerState>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002baa:	f002 fae5 	bl	8005178 <xPortSysTickHandler>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f06f 0004 	mvn.w	r0, #4
 8002bc2:	f7ff ffbf 	bl	8002b44 <__NVIC_SetPriority>
#endif
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd2:	f3ef 8305 	mrs	r3, IPSR
 8002bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8002bd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bde:	f06f 0305 	mvn.w	r3, #5
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	e00c      	b.n	8002c00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <osKernelInitialize+0x44>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <osKernelInitialize+0x44>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	e002      	b.n	8002c00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	200000f0 	.word	0x200000f0

08002c14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c1a:	f3ef 8305 	mrs	r3, IPSR
 8002c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c26:	f06f 0305 	mvn.w	r3, #5
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e010      	b.n	8002c50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <osKernelStart+0x48>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d109      	bne.n	8002c4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c36:	f7ff ffbf 	bl	8002bb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <osKernelStart+0x48>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c40:	f001 f866 	bl	8003d10 <vTaskStartScheduler>
      stat = osOK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	e002      	b.n	8002c50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000f0 	.word	0x200000f0

08002c60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af04      	add	r7, sp, #16
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c70:	f3ef 8305 	mrs	r3, IPSR
 8002c74:	617b      	str	r3, [r7, #20]
  return(result);
 8002c76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d17e      	bne.n	8002d7a <osThreadNew+0x11a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07b      	beq.n	8002d7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c86:	2318      	movs	r3, #24
 8002c88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d045      	beq.n	8002d26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <osThreadNew+0x48>
        name = attr->name;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <osThreadNew+0x6e>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b38      	cmp	r3, #56	; 0x38
 8002cc0:	d805      	bhi.n	8002cce <osThreadNew+0x6e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <osThreadNew+0x72>
        return (NULL);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e054      	b.n	8002d7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <osThreadNew+0xa8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b5b      	cmp	r3, #91	; 0x5b
 8002cf0:	d90a      	bls.n	8002d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <osThreadNew+0xa8>
        mem = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e010      	b.n	8002d2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <osThreadNew+0xca>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <osThreadNew+0xca>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <osThreadNew+0xca>
          mem = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e001      	b.n	8002d2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d38:	9202      	str	r2, [sp, #8]
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fe0c 	bl	8003964 <xTaskCreateStatic>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e013      	b.n	8002d7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d110      	bne.n	8002d7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fe57 	bl	8003a1e <xTaskCreate>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <osThreadNew+0x11a>
            hTask = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d7a:	693b      	ldr	r3, [r7, #16]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8c:	f3ef 8305 	mrs	r3, IPSR
 8002d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <osDelay+0x1c>
    stat = osErrorISR;
 8002d98:	f06f 0305 	mvn.w	r3, #5
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e007      	b.n	8002db0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 ff7c 	bl	8003ca8 <vTaskDelay>
    }
  }

  return (stat);
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <vApplicationGetIdleTaskMemory+0x30>)
 8002dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200000f4 	.word	0x200000f4
 8002dec:	20000150 	.word	0x20000150

08002df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8002e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <vApplicationGetTimerTaskMemory+0x30>)
 8002e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	20000350 	.word	0x20000350
 8002e20:	200003ac 	.word	0x200003ac

08002e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 0208 	add.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 0208 	add.w	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 0208 	add.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d103      	bne.n	8002ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e00c      	b.n	8002f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e002      	b.n	8002ef4 <vListInsert+0x2e>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d2f6      	bcs.n	8002eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6892      	ldr	r2, [r2, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6852      	ldr	r2, [r2, #4]
 8002f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d103      	bne.n	8002f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fb6:	f002 f84d 	bl	8005054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	68f9      	ldr	r1, [r7, #12]
 8002fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	441a      	add	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d114      	bne.n	8003036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01a      	beq.n	800304a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3310      	adds	r3, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f903 	bl	8004224 <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <xQueueGenericReset+0xcc>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e009      	b.n	800304a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3310      	adds	r3, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fef2 	bl	8002e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff feed 	bl	8002e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800304a:	f002 f833 	bl	80050b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <xQueueGenericCreateStatic+0x52>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <xQueueGenericCreateStatic+0x56>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericCreateStatic+0x58>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	623b      	str	r3, [r7, #32]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <xQueueGenericCreateStatic+0x7e>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <xQueueGenericCreateStatic+0x82>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xQueueGenericCreateStatic+0x84>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61fb      	str	r3, [r7, #28]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030fa:	2350      	movs	r3, #80	; 0x50
 80030fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b50      	cmp	r3, #80	; 0x50
 8003102:	d00a      	beq.n	800311a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61bb      	str	r3, [r7, #24]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800311a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800312e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f805 	bl	800314c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003144:	4618      	mov	r0, r3
 8003146:	3730      	adds	r7, #48	; 0x30
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e002      	b.n	800316e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800317a:	2101      	movs	r1, #1
 800317c:	69b8      	ldr	r0, [r7, #24]
 800317e:	f7ff ff05 	bl	8002f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <xQueueGenericSend+0x32>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <xQueueGenericSend+0x40>
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <xQueueGenericSend+0x44>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <xQueueGenericSend+0x46>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <xQueueGenericSend+0x60>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d103      	bne.n	8003202 <xQueueGenericSend+0x6e>
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <xQueueGenericSend+0x72>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericSend+0x74>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericSend+0x8e>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	623b      	str	r3, [r7, #32]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003222:	f001 f9bd 	bl	80045a0 <xTaskGetSchedulerState>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <xQueueGenericSend+0x9e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <xQueueGenericSend+0xa2>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueGenericSend+0xa4>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueGenericSend+0xbe>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	61fb      	str	r3, [r7, #28]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003252:	f001 feff 	bl	8005054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <xQueueGenericSend+0xd4>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d129      	bne.n	80032bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326e:	f000 fa0b 	bl	8003688 <prvCopyDataToQueue>
 8003272:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ffcf 	bl	8004224 <xTaskRemoveFromEventList>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <xQueueGenericSend+0x1f8>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	e00a      	b.n	80032b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032a4:	4b39      	ldr	r3, [pc, #228]	; (800338c <xQueueGenericSend+0x1f8>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032b4:	f001 fefe 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e063      	b.n	8003384 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032c2:	f001 fef7 	bl	80050b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e05c      	b.n	8003384 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 f809 	bl	80042ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032de:	f001 fee9 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e2:	f000 fd7b 	bl	8003ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e6:	f001 feb5 	bl	8005054 <vPortEnterCritical>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d103      	bne.n	8003300 <xQueueGenericSend+0x16c>
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d103      	bne.n	8003316 <xQueueGenericSend+0x182>
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003316:	f001 fecd 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fff8 	bl	8004318 <xTaskCheckForTimeOut>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d124      	bne.n	8003378 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800332e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003330:	f000 faa2 	bl	8003878 <prvIsQueueFull>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	3310      	adds	r3, #16
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 ff1e 	bl	8004184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 fa2d 	bl	80037a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800334e:	f000 fd53 	bl	8003df8 <xTaskResumeAll>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f af7c 	bne.w	8003252 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <xQueueGenericSend+0x1f8>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e772      	b.n	8003252 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800336c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336e:	f000 fa1b 	bl	80037a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003372:	f000 fd41 	bl	8003df8 <xTaskResumeAll>
 8003376:	e76c      	b.n	8003252 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337a:	f000 fa15 	bl	80037a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337e:	f000 fd3b 	bl	8003df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003384:	4618      	mov	r0, r3
 8003386:	3738      	adds	r7, #56	; 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b090      	sub	sp, #64	; 0x40
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <xQueueGenericSendFromISR+0x3c>
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <xQueueGenericSendFromISR+0x40>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <xQueueGenericSendFromISR+0x42>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSendFromISR+0x6a>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSendFromISR+0x6e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSendFromISR+0x70>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	623b      	str	r3, [r7, #32]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800341a:	f001 fefd 	bl	8005218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800341e:	f3ef 8211 	mrs	r2, BASEPRI
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	61fa      	str	r2, [r7, #28]
 8003434:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003436:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <xQueueGenericSendFromISR+0xbc>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d12f      	bne.n	80034ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003462:	f000 f911 	bl	8003688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003466:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d112      	bne.n	8003496 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fed1 	bl	8004224 <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b25a      	sxtb	r2, r3
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034a6:	2301      	movs	r3, #1
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034aa:	e001      	b.n	80034b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3740      	adds	r7, #64	; 0x40
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xQueueReceive+0x30>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	623b      	str	r3, [r7, #32]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <xQueueReceive+0x3e>
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <xQueueReceive+0x42>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <xQueueReceive+0x44>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xQueueReceive+0x5e>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61fb      	str	r3, [r7, #28]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003526:	f001 f83b 	bl	80045a0 <xTaskGetSchedulerState>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <xQueueReceive+0x6e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <xQueueReceive+0x72>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <xQueueReceive+0x74>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueReceive+0x8e>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003556:	f001 fd7d 	bl	8005054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01f      	beq.n	80035a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356a:	f000 f8f7 	bl	800375c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00f      	beq.n	800359e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	3310      	adds	r3, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fe4e 	bl	8004224 <xTaskRemoveFromEventList>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <xQueueReceive+0x1bc>)
 8003590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800359e:	f001 fd89 	bl	80050b4 <vPortExitCritical>
				return pdPASS;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e069      	b.n	800367a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ac:	f001 fd82 	bl	80050b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e062      	b.n	800367a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ba:	f107 0310 	add.w	r3, r7, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fe94 	bl	80042ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c8:	f001 fd74 	bl	80050b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035cc:	f000 fc06 	bl	8003ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035d0:	f001 fd40 	bl	8005054 <vPortEnterCritical>
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d103      	bne.n	80035ea <xQueueReceive+0x122>
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d103      	bne.n	8003600 <xQueueReceive+0x138>
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003600:	f001 fd58 	bl	80050b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003604:	1d3a      	adds	r2, r7, #4
 8003606:	f107 0310 	add.w	r3, r7, #16
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fe83 	bl	8004318 <xTaskCheckForTimeOut>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d123      	bne.n	8003660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 f917 	bl	800384c <prvIsQueueEmpty>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fda9 	bl	8004184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003634:	f000 f8b8 	bl	80037a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003638:	f000 fbde 	bl	8003df8 <xTaskResumeAll>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d189      	bne.n	8003556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xQueueReceive+0x1bc>)
 8003644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	e780      	b.n	8003556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003656:	f000 f8a7 	bl	80037a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800365a:	f000 fbcd 	bl	8003df8 <xTaskResumeAll>
 800365e:	e77a      	b.n	8003556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003662:	f000 f8a1 	bl	80037a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003666:	f000 fbc7 	bl	8003df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800366a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366c:	f000 f8ee 	bl	800384c <prvIsQueueEmpty>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f43f af6f 	beq.w	8003556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800367a:	4618      	mov	r0, r3
 800367c:	3730      	adds	r7, #48	; 0x30
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d14d      	bne.n	800374a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 ff92 	bl	80045dc <xTaskPriorityDisinherit>
 80036b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e043      	b.n	800374a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d119      	bne.n	80036fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6858      	ldr	r0, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	f001 fff4 	bl	80056c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d32b      	bcc.n	800374a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	e026      	b.n	800374a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68d8      	ldr	r0, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	461a      	mov	r2, r3
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	f001 ffda 	bl	80056c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	425b      	negs	r3, r3
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d207      	bcs.n	8003738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	425b      	negs	r3, r3
 8003732:	441a      	add	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d105      	bne.n	800374a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3b01      	subs	r3, #1
 8003748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003752:	697b      	ldr	r3, [r7, #20]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d303      	bcc.n	8003790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68d9      	ldr	r1, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	461a      	mov	r2, r3
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f001 ff90 	bl	80056c0 <memcpy>
	}
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037b0:	f001 fc50 	bl	8005054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037bc:	e011      	b.n	80037e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fd2a 	bl	8004224 <xTaskRemoveFromEventList>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037d6:	f000 fe01 	bl	80043dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3b01      	subs	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dce9      	bgt.n	80037be <prvUnlockQueue+0x16>
 80037ea:	e000      	b.n	80037ee <prvUnlockQueue+0x46>
					break;
 80037ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037f6:	f001 fc5d 	bl	80050b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037fa:	f001 fc2b 	bl	8005054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003806:	e011      	b.n	800382c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3310      	adds	r3, #16
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fd05 	bl	8004224 <xTaskRemoveFromEventList>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003820:	f000 fddc 	bl	80043dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003824:	7bbb      	ldrb	r3, [r7, #14]
 8003826:	3b01      	subs	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800382c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dce9      	bgt.n	8003808 <prvUnlockQueue+0x60>
 8003834:	e000      	b.n	8003838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003840:	f001 fc38 	bl	80050b4 <vPortExitCritical>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003854:	f001 fbfe 	bl	8005054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e001      	b.n	800386a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800386a:	f001 fc23 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003880:	f001 fbe8 	bl	8005054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	429a      	cmp	r2, r3
 800388e:	d102      	bne.n	8003896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800389a:	f001 fc0b 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e014      	b.n	80038e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038b8:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <vQueueAddToRegistry+0x50>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038c4:	490c      	ldr	r1, [pc, #48]	; (80038f8 <vQueueAddToRegistry+0x50>)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <vQueueAddToRegistry+0x50>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038da:	e006      	b.n	80038ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	d9e7      	bls.n	80038b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	200007ac 	.word	0x200007ac

080038fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800390c:	f001 fba2 	bl	8005054 <vPortEnterCritical>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003916:	b25b      	sxtb	r3, r3
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d103      	bne.n	8003926 <vQueueWaitForMessageRestricted+0x2a>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d103      	bne.n	800393c <vQueueWaitForMessageRestricted+0x40>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393c:	f001 fbba 	bl	80050b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3324      	adds	r3, #36	; 0x24
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fc3b 	bl	80041cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff ff26 	bl	80037a8 <prvUnlockQueue>
	}
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08e      	sub	sp, #56	; 0x38
 8003968:	af04      	add	r7, sp, #16
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	623b      	str	r3, [r7, #32]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xTaskCreateStatic+0x46>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61fb      	str	r3, [r7, #28]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039aa:	235c      	movs	r3, #92	; 0x5c
 80039ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b5c      	cmp	r3, #92	; 0x5c
 80039b2:	d00a      	beq.n	80039ca <xTaskCreateStatic+0x66>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	61bb      	str	r3, [r7, #24]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01e      	beq.n	8003a10 <xTaskCreateStatic+0xac>
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ea:	2300      	movs	r3, #0
 80039ec:	9303      	str	r3, [sp, #12]
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f850 	bl	8003aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a0a:	f000 f8dd 	bl	8003bc8 <prvAddNewTaskToReadyList>
 8003a0e:	e001      	b.n	8003a14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a14:	697b      	ldr	r3, [r7, #20]
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08c      	sub	sp, #48	; 0x30
 8003a22:	af04      	add	r7, sp, #16
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fc30 	bl	8005298 <pvPortMalloc>
 8003a38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00e      	beq.n	8003a5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a40:	205c      	movs	r0, #92	; 0x5c
 8003a42:	f001 fc29 	bl	8005298 <pvPortMalloc>
 8003a46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
 8003a54:	e005      	b.n	8003a62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f001 fcea 	bl	8005430 <vPortFree>
 8003a5c:	e001      	b.n	8003a62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9303      	str	r3, [sp, #12]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	9302      	str	r3, [sp, #8]
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f80e 	bl	8003aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a8c:	69f8      	ldr	r0, [r7, #28]
 8003a8e:	f000 f89b 	bl	8003bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e002      	b.n	8003a9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	21a5      	movs	r1, #165	; 0xa5
 8003ac2:	f001 fe0b 	bl	80056dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	617b      	str	r3, [r7, #20]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01f      	beq.n	8003b46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e012      	b.n	8003b32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	7819      	ldrb	r1, [r3, #0]
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3334      	adds	r3, #52	; 0x34
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	d9e9      	bls.n	8003b0c <prvInitialiseNewTask+0x64>
 8003b38:	e000      	b.n	8003b3c <prvInitialiseNewTask+0x94>
			{
				break;
 8003b3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b44:	e003      	b.n	8003b4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b37      	cmp	r3, #55	; 0x37
 8003b52:	d901      	bls.n	8003b58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b54:	2337      	movs	r3, #55	; 0x37
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f978 	bl	8002e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	3318      	adds	r3, #24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f973 	bl	8002e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	69b8      	ldr	r0, [r7, #24]
 8003ba8:	f001 f928 	bl	8004dfc <pxPortInitialiseStack>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bd0:	f001 fa40 	bl	8005054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003be6:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bec:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d110      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bf4:	f000 fc16 	bl	8004424 <prvInitialiseTaskLists>
 8003bf8:	e00d      	b.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bfa:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <prvAddNewTaskToReadyList+0xcc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d802      	bhi.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <prvAddNewTaskToReadyList+0xd4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d903      	bls.n	8003c3c <prvAddNewTaskToReadyList+0x74>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <prvAddNewTaskToReadyList+0xd4>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <prvAddNewTaskToReadyList+0xd8>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7ff f913 	bl	8002e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c58:	f001 fa2c 	bl	80050b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <prvAddNewTaskToReadyList+0xcc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d207      	bcs.n	8003c82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <prvAddNewTaskToReadyList+0xdc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000cc0 	.word	0x20000cc0
 8003c90:	200007ec 	.word	0x200007ec
 8003c94:	20000ccc 	.word	0x20000ccc
 8003c98:	20000cdc 	.word	0x20000cdc
 8003c9c:	20000cc8 	.word	0x20000cc8
 8003ca0:	200007f0 	.word	0x200007f0
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d017      	beq.n	8003cea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <vTaskDelay+0x60>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <vTaskDelay+0x30>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60bb      	str	r3, [r7, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cd8:	f000 f880 	bl	8003ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fcea 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ce4:	f000 f888 	bl	8003df8 <xTaskResumeAll>
 8003ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <vTaskDelay+0x64>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000ce8 	.word	0x20000ce8
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d1e:	463a      	mov	r2, r7
 8003d20:	1d39      	adds	r1, r7, #4
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f848 	bl	8002dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	9202      	str	r2, [sp, #8]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	2300      	movs	r3, #0
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <vTaskStartScheduler+0xb4>)
 8003d40:	4821      	ldr	r0, [pc, #132]	; (8003dc8 <vTaskStartScheduler+0xb8>)
 8003d42:	f7ff fe0f 	bl	8003964 <xTaskCreateStatic>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <vTaskStartScheduler+0xbc>)
 8003d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <vTaskStartScheduler+0xbc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e001      	b.n	8003d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d64:	f000 fcfc 	bl	8004760 <xTimerCreateTimerTask>
 8003d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d116      	bne.n	8003d9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	613b      	str	r3, [r7, #16]
}
 8003d82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <vTaskStartScheduler+0xc0>)
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <vTaskStartScheduler+0xc4>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <vTaskStartScheduler+0xc8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d98:	f001 f8ba 	bl	8004f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d9c:	e00e      	b.n	8003dbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d10a      	bne.n	8003dbc <vTaskStartScheduler+0xac>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60fb      	str	r3, [r7, #12]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vTaskStartScheduler+0xaa>
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	08006ae8 	.word	0x08006ae8
 8003dc8:	080043f5 	.word	0x080043f5
 8003dcc:	20000ce4 	.word	0x20000ce4
 8003dd0:	20000ce0 	.word	0x20000ce0
 8003dd4:	20000ccc 	.word	0x20000ccc
 8003dd8:	20000cc4 	.word	0x20000cc4

08003ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <vTaskSuspendAll+0x18>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <vTaskSuspendAll+0x18>)
 8003de8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	20000ce8 	.word	0x20000ce8

08003df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e06:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <xTaskResumeAll+0x118>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	603b      	str	r3, [r7, #0]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e24:	f001 f916 	bl	8005054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <xTaskResumeAll+0x118>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <xTaskResumeAll+0x118>)
 8003e30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <xTaskResumeAll+0x118>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d162      	bne.n	8003f00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <xTaskResumeAll+0x11c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d05e      	beq.n	8003f00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e42:	e02f      	b.n	8003ea4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <xTaskResumeAll+0x120>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff f871 	bl	8002f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f86c 	bl	8002f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <xTaskResumeAll+0x124>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d903      	bls.n	8003e74 <xTaskResumeAll+0x7c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <xTaskResumeAll+0x124>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <xTaskResumeAll+0x128>)
 8003e82:	441a      	add	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fff7 	bl	8002e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <xTaskResumeAll+0x12c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <xTaskResumeAll+0x130>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <xTaskResumeAll+0x120>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1cb      	bne.n	8003e44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eb2:	f000 fb55 	bl	8004560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <xTaskResumeAll+0x134>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ec2:	f000 f847 	bl	8003f54 <xTaskIncrementTick>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <xTaskResumeAll+0x130>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f1      	bne.n	8003ec2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <xTaskResumeAll+0x134>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ee4:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <xTaskResumeAll+0x130>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <xTaskResumeAll+0x138>)
 8003ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f00:	f001 f8d8 	bl	80050b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f04:	68bb      	ldr	r3, [r7, #8]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000ce8 	.word	0x20000ce8
 8003f14:	20000cc0 	.word	0x20000cc0
 8003f18:	20000c80 	.word	0x20000c80
 8003f1c:	20000cc8 	.word	0x20000cc8
 8003f20:	200007f0 	.word	0x200007f0
 8003f24:	200007ec 	.word	0x200007ec
 8003f28:	20000cd4 	.word	0x20000cd4
 8003f2c:	20000cd0 	.word	0x20000cd0
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <xTaskGetTickCount+0x1c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f40:	687b      	ldr	r3, [r7, #4]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000cc4 	.word	0x20000cc4

08003f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5e:	4b4f      	ldr	r3, [pc, #316]	; (800409c <xTaskIncrementTick+0x148>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 808f 	bne.w	8004086 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <xTaskIncrementTick+0x14c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f70:	4a4b      	ldr	r2, [pc, #300]	; (80040a0 <xTaskIncrementTick+0x14c>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d120      	bne.n	8003fbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f7c:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <xTaskIncrementTick+0x150>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	603b      	str	r3, [r7, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <xTaskIncrementTick+0x46>
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <xTaskIncrementTick+0x150>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <xTaskIncrementTick+0x154>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <xTaskIncrementTick+0x150>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <xTaskIncrementTick+0x154>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <xTaskIncrementTick+0x158>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a3d      	ldr	r2, [pc, #244]	; (80040ac <xTaskIncrementTick+0x158>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	f000 fad1 	bl	8004560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fbe:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <xTaskIncrementTick+0x15c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d349      	bcc.n	800405c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <xTaskIncrementTick+0x150>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd2:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <xTaskIncrementTick+0x15c>)
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	601a      	str	r2, [r3, #0]
					break;
 8003fda:	e03f      	b.n	800405c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <xTaskIncrementTick+0x150>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d203      	bcs.n	8003ffc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <xTaskIncrementTick+0x15c>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ffa:	e02f      	b.n	800405c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe ff99 	bl	8002f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3318      	adds	r3, #24
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe ff90 	bl	8002f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <xTaskIncrementTick+0x160>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d903      	bls.n	800402c <xTaskIncrementTick+0xd8>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <xTaskIncrementTick+0x160>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <xTaskIncrementTick+0x164>)
 800403a:	441a      	add	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fe ff1b 	bl	8002e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <xTaskIncrementTick+0x168>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	429a      	cmp	r2, r3
 8004054:	d3b8      	bcc.n	8003fc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004056:	2301      	movs	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800405a:	e7b5      	b.n	8003fc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <xTaskIncrementTick+0x168>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	4915      	ldr	r1, [pc, #84]	; (80040b8 <xTaskIncrementTick+0x164>)
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d901      	bls.n	8004078 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <xTaskIncrementTick+0x16c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e004      	b.n	8004090 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <xTaskIncrementTick+0x170>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <xTaskIncrementTick+0x170>)
 800408e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000ce8 	.word	0x20000ce8
 80040a0:	20000cc4 	.word	0x20000cc4
 80040a4:	20000c78 	.word	0x20000c78
 80040a8:	20000c7c 	.word	0x20000c7c
 80040ac:	20000cd8 	.word	0x20000cd8
 80040b0:	20000ce0 	.word	0x20000ce0
 80040b4:	20000cc8 	.word	0x20000cc8
 80040b8:	200007f0 	.word	0x200007f0
 80040bc:	200007ec 	.word	0x200007ec
 80040c0:	20000cd4 	.word	0x20000cd4
 80040c4:	20000cd0 	.word	0x20000cd0

080040c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <vTaskSwitchContext+0xa8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <vTaskSwitchContext+0xac>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040dc:	e041      	b.n	8004162 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040de:	4b25      	ldr	r3, [pc, #148]	; (8004174 <vTaskSwitchContext+0xac>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <vTaskSwitchContext+0xb0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e010      	b.n	800410e <vTaskSwitchContext+0x46>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <vTaskSwitchContext+0x40>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	607b      	str	r3, [r7, #4]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <vTaskSwitchContext+0x3e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	491b      	ldr	r1, [pc, #108]	; (800417c <vTaskSwitchContext+0xb4>)
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0e4      	beq.n	80040ec <vTaskSwitchContext+0x24>
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <vTaskSwitchContext+0xb4>)
 800412e:	4413      	add	r3, r2
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3308      	adds	r3, #8
 8004144:	429a      	cmp	r2, r3
 8004146:	d104      	bne.n	8004152 <vTaskSwitchContext+0x8a>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <vTaskSwitchContext+0xb8>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4a06      	ldr	r2, [pc, #24]	; (8004178 <vTaskSwitchContext+0xb0>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6013      	str	r3, [r2, #0]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000ce8 	.word	0x20000ce8
 8004174:	20000cd4 	.word	0x20000cd4
 8004178:	20000cc8 	.word	0x20000cc8
 800417c:	200007f0 	.word	0x200007f0
 8004180:	200007ec 	.word	0x200007ec

08004184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <vTaskPlaceOnEventList+0x44>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3318      	adds	r3, #24
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe fe87 	bl	8002ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b8:	2101      	movs	r1, #1
 80041ba:	6838      	ldr	r0, [r7, #0]
 80041bc:	f000 fa7c 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200007ec 	.word	0x200007ec

080041cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	617b      	str	r3, [r7, #20]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <vTaskPlaceOnEventListRestricted+0x54>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3318      	adds	r3, #24
 80041fa:	4619      	mov	r1, r3
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7fe fe3e 	bl	8002e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f000 fa51 	bl	80046b8 <prvAddCurrentTaskToDelayedList>
	}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200007ec 	.word	0x200007ec

08004224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60fb      	str	r3, [r7, #12]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	3318      	adds	r3, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fe6f 	bl	8002f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425a:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <xTaskRemoveFromEventList+0xb0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11d      	bne.n	800429e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fe66 	bl	8002f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <xTaskRemoveFromEventList+0xb4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d903      	bls.n	8004280 <xTaskRemoveFromEventList+0x5c>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <xTaskRemoveFromEventList+0xb4>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <xTaskRemoveFromEventList+0xb8>)
 800428e:	441a      	add	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7fe fdf1 	bl	8002e7e <vListInsertEnd>
 800429c:	e005      	b.n	80042aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3318      	adds	r3, #24
 80042a2:	4619      	mov	r1, r3
 80042a4:	480e      	ldr	r0, [pc, #56]	; (80042e0 <xTaskRemoveFromEventList+0xbc>)
 80042a6:	f7fe fdea 	bl	8002e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <xTaskRemoveFromEventList+0xc0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d905      	bls.n	80042c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <xTaskRemoveFromEventList+0xc4>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e001      	b.n	80042c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042c8:	697b      	ldr	r3, [r7, #20]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000ce8 	.word	0x20000ce8
 80042d8:	20000cc8 	.word	0x20000cc8
 80042dc:	200007f0 	.word	0x200007f0
 80042e0:	20000c80 	.word	0x20000c80
 80042e4:	200007ec 	.word	0x200007ec
 80042e8:	20000cd4 	.word	0x20000cd4

080042ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <vTaskInternalSetTimeOutState+0x24>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <vTaskInternalSetTimeOutState+0x28>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000cd8 	.word	0x20000cd8
 8004314:	20000cc4 	.word	0x20000cc4

08004318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	613b      	str	r3, [r7, #16]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	60fb      	str	r3, [r7, #12]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800435a:	f000 fe7b 	bl	8005054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <xTaskCheckForTimeOut+0xbc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d102      	bne.n	800437e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e023      	b.n	80043c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <xTaskCheckForTimeOut+0xc0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d007      	beq.n	800439a <xTaskCheckForTimeOut+0x82>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e015      	b.n	80043c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d20b      	bcs.n	80043bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff9b 	bl	80042ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e004      	b.n	80043c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043c6:	f000 fe75 	bl	80050b4 <vPortExitCritical>

	return xReturn;
 80043ca:	69fb      	ldr	r3, [r7, #28]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000cc4 	.word	0x20000cc4
 80043d8:	20000cd8 	.word	0x20000cd8

080043dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <vTaskMissedYield+0x14>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000cd4 	.word	0x20000cd4

080043f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043fc:	f000 f852 	bl	80044a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <prvIdleTask+0x28>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d9f9      	bls.n	80043fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <prvIdleTask+0x2c>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004418:	e7f0      	b.n	80043fc <prvIdleTask+0x8>
 800441a:	bf00      	nop
 800441c:	200007f0 	.word	0x200007f0
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	e00c      	b.n	800444a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <prvInitialiseTaskLists+0x60>)
 800443c:	4413      	add	r3, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fcf0 	bl	8002e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3301      	adds	r3, #1
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b37      	cmp	r3, #55	; 0x37
 800444e:	d9ef      	bls.n	8004430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004450:	480d      	ldr	r0, [pc, #52]	; (8004488 <prvInitialiseTaskLists+0x64>)
 8004452:	f7fe fce7 	bl	8002e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004456:	480d      	ldr	r0, [pc, #52]	; (800448c <prvInitialiseTaskLists+0x68>)
 8004458:	f7fe fce4 	bl	8002e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <prvInitialiseTaskLists+0x6c>)
 800445e:	f7fe fce1 	bl	8002e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004462:	480c      	ldr	r0, [pc, #48]	; (8004494 <prvInitialiseTaskLists+0x70>)
 8004464:	f7fe fcde 	bl	8002e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004468:	480b      	ldr	r0, [pc, #44]	; (8004498 <prvInitialiseTaskLists+0x74>)
 800446a:	f7fe fcdb 	bl	8002e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <prvInitialiseTaskLists+0x78>)
 8004470:	4a05      	ldr	r2, [pc, #20]	; (8004488 <prvInitialiseTaskLists+0x64>)
 8004472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvInitialiseTaskLists+0x7c>)
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <prvInitialiseTaskLists+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200007f0 	.word	0x200007f0
 8004488:	20000c50 	.word	0x20000c50
 800448c:	20000c64 	.word	0x20000c64
 8004490:	20000c80 	.word	0x20000c80
 8004494:	20000c94 	.word	0x20000c94
 8004498:	20000cac 	.word	0x20000cac
 800449c:	20000c78 	.word	0x20000c78
 80044a0:	20000c7c 	.word	0x20000c7c

080044a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044aa:	e019      	b.n	80044e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044ac:	f000 fdd2 	bl	8005054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b0:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <prvCheckTasksWaitingTermination+0x50>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fd3b 	bl	8002f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <prvCheckTasksWaitingTermination+0x54>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <prvCheckTasksWaitingTermination+0x54>)
 80044ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044d6:	f000 fded 	bl	80050b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f810 	bl	8004500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e1      	bne.n	80044ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000c94 	.word	0x20000c94
 80044f8:	20000cc0 	.word	0x20000cc0
 80044fc:	20000ca8 	.word	0x20000ca8

08004500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff8a 	bl	8005430 <vPortFree>
				vPortFree( pxTCB );
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 ff87 	bl	8005430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004522:	e018      	b.n	8004556 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800452a:	2b01      	cmp	r3, #1
 800452c:	d103      	bne.n	8004536 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 ff7e 	bl	8005430 <vPortFree>
	}
 8004534:	e00f      	b.n	8004556 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800453c:	2b02      	cmp	r3, #2
 800453e:	d00a      	beq.n	8004556 <prvDeleteTCB+0x56>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <prvDeleteTCB+0x54>
	}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvResetNextTaskUnblockTime+0x38>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <prvResetNextTaskUnblockTime+0x3c>)
 8004572:	f04f 32ff 	mov.w	r2, #4294967295
 8004576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004578:	e008      	b.n	800458c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <prvResetNextTaskUnblockTime+0x38>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <prvResetNextTaskUnblockTime+0x3c>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000c78 	.word	0x20000c78
 800459c:	20000ce0 	.word	0x20000ce0

080045a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <xTaskGetSchedulerState+0x34>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ae:	2301      	movs	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e008      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <xTaskGetSchedulerState+0x38>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045bc:	2302      	movs	r3, #2
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e001      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045c6:	687b      	ldr	r3, [r7, #4]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20000ccc 	.word	0x20000ccc
 80045d8:	20000ce8 	.word	0x20000ce8

080045dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d056      	beq.n	80046a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <xTaskPriorityDisinherit+0xd0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d00a      	beq.n	8004612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60fb      	str	r3, [r7, #12]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60bb      	str	r3, [r7, #8]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	429a      	cmp	r2, r3
 8004644:	d02c      	beq.n	80046a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d128      	bne.n	80046a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3304      	adds	r3, #4
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fc70 	bl	8002f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskPriorityDisinherit+0xd4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d903      	bls.n	8004680 <xTaskPriorityDisinherit+0xa4>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4a0c      	ldr	r2, [pc, #48]	; (80046b0 <xTaskPriorityDisinherit+0xd4>)
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <xTaskPriorityDisinherit+0xd8>)
 800468e:	441a      	add	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	3304      	adds	r3, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f7fe fbf1 	bl	8002e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046a0:	697b      	ldr	r3, [r7, #20]
	}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200007ec 	.word	0x200007ec
 80046b0:	20000cc8 	.word	0x20000cc8
 80046b4:	200007f0 	.word	0x200007f0

080046b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <prvAddCurrentTaskToDelayedList+0x90>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fc32 	bl	8002f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d10a      	bne.n	80046f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4819      	ldr	r0, [pc, #100]	; (8004750 <prvAddCurrentTaskToDelayedList+0x98>)
 80046ec:	f7fe fbc7 	bl	8002e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046f0:	e026      	b.n	8004740 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <prvAddCurrentTaskToDelayedList+0x94>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	429a      	cmp	r2, r3
 8004708:	d209      	bcs.n	800471e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <prvAddCurrentTaskToDelayedList+0x9c>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvAddCurrentTaskToDelayedList+0x94>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f7fe fbd5 	bl	8002ec6 <vListInsert>
}
 800471c:	e010      	b.n	8004740 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvAddCurrentTaskToDelayedList+0x94>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe fbcb 	bl	8002ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d202      	bcs.n	8004740 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <prvAddCurrentTaskToDelayedList+0xa4>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000cc4 	.word	0x20000cc4
 800474c:	200007ec 	.word	0x200007ec
 8004750:	20000cac 	.word	0x20000cac
 8004754:	20000c7c 	.word	0x20000c7c
 8004758:	20000c78 	.word	0x20000c78
 800475c:	20000ce0 	.word	0x20000ce0

08004760 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800476a:	f000 fb07 	bl	8004d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <xTimerCreateTimerTask+0x80>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d021      	beq.n	80047ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800477e:	1d3a      	adds	r2, r7, #4
 8004780:	f107 0108 	add.w	r1, r7, #8
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fb31 	bl	8002df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	9202      	str	r2, [sp, #8]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	2302      	movs	r3, #2
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	460a      	mov	r2, r1
 80047a0:	4910      	ldr	r1, [pc, #64]	; (80047e4 <xTimerCreateTimerTask+0x84>)
 80047a2:	4811      	ldr	r0, [pc, #68]	; (80047e8 <xTimerCreateTimerTask+0x88>)
 80047a4:	f7ff f8de 	bl	8003964 <xTaskCreateStatic>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <xTimerCreateTimerTask+0x8c>)
 80047ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <xTimerCreateTimerTask+0x8c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047b6:	2301      	movs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	613b      	str	r3, [r7, #16]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047d6:	697b      	ldr	r3, [r7, #20]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000d1c 	.word	0x20000d1c
 80047e4:	08006af0 	.word	0x08006af0
 80047e8:	08004925 	.word	0x08004925
 80047ec:	20000d20 	.word	0x20000d20

080047f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	623b      	str	r3, [r7, #32]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <xTimerGenericCommand+0x98>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02a      	beq.n	800487c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b05      	cmp	r3, #5
 8004836:	dc18      	bgt.n	800486a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004838:	f7ff feb2 	bl	80045a0 <xTaskGetSchedulerState>
 800483c:	4603      	mov	r3, r0
 800483e:	2b02      	cmp	r3, #2
 8004840:	d109      	bne.n	8004856 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <xTimerGenericCommand+0x98>)
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	f107 0110 	add.w	r1, r7, #16
 800484a:	2300      	movs	r3, #0
 800484c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484e:	f7fe fca1 	bl	8003194 <xQueueGenericSend>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
 8004854:	e012      	b.n	800487c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <xTimerGenericCommand+0x98>)
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	f107 0110 	add.w	r1, r7, #16
 800485e:	2300      	movs	r3, #0
 8004860:	2200      	movs	r2, #0
 8004862:	f7fe fc97 	bl	8003194 <xQueueGenericSend>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
 8004868:	e008      	b.n	800487c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <xTimerGenericCommand+0x98>)
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f107 0110 	add.w	r1, r7, #16
 8004872:	2300      	movs	r3, #0
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	f7fe fd8b 	bl	8003390 <xQueueGenericSendFromISR>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800487e:	4618      	mov	r0, r3
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000d1c 	.word	0x20000d1c

0800488c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004896:	4b22      	ldr	r3, [pc, #136]	; (8004920 <prvProcessExpiredTimer+0x94>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fb47 	bl	8002f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d022      	beq.n	80048fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	699a      	ldr	r2, [r3, #24]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	18d1      	adds	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	6978      	ldr	r0, [r7, #20]
 80048c6:	f000 f8d1 	bl	8004a6c <prvInsertTimerInActiveList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01f      	beq.n	8004910 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f7ff ff88 	bl	80047f0 <xTimerGenericCommand>
 80048e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	6978      	ldr	r0, [r7, #20]
 8004916:	4798      	blx	r3
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000d14 	.word	0x20000d14

08004924 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f857 	bl	80049e4 <prvGetNextExpireTime>
 8004936:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4619      	mov	r1, r3
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f803 	bl	8004948 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004942:	f000 f8d5 	bl	8004af0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004946:	e7f1      	b.n	800492c <prvTimerTask+0x8>

08004948 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004952:	f7ff fa43 	bl	8003ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f866 	bl	8004a2c <prvSampleTimeNow>
 8004960:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d130      	bne.n	80049ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	429a      	cmp	r2, r3
 8004974:	d806      	bhi.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004976:	f7ff fa3f 	bl	8003df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff85 	bl	800488c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004982:	e024      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <prvProcessTimerOrBlockTask+0x90>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <prvProcessTimerOrBlockTask+0x50>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <prvProcessTimerOrBlockTask+0x52>
 8004998:	2300      	movs	r3, #0
 800499a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <prvProcessTimerOrBlockTask+0x94>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fe ffa7 	bl	80038fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ae:	f7ff fa23 	bl	8003df8 <xTaskResumeAll>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <prvProcessTimerOrBlockTask+0x98>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
}
 80049c8:	e001      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049ca:	f7ff fa15 	bl	8003df8 <xTaskResumeAll>
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000d18 	.word	0x20000d18
 80049dc:	20000d1c 	.word	0x20000d1c
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <prvGetNextExpireTime+0x44>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <prvGetNextExpireTime+0x16>
 80049f6:	2201      	movs	r2, #1
 80049f8:	e000      	b.n	80049fc <prvGetNextExpireTime+0x18>
 80049fa:	2200      	movs	r2, #0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a08:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <prvGetNextExpireTime+0x44>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e001      	b.n	8004a18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000d14 	.word	0x20000d14

08004a2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a34:	f7ff fa7e 	bl	8003f34 <xTaskGetTickCount>
 8004a38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvSampleTimeNow+0x3c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d205      	bcs.n	8004a50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a44:	f000 f936 	bl	8004cb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <prvSampleTimeNow+0x3c>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000d24 	.word	0x20000d24

08004a6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d812      	bhi.n	8004ab8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e01b      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <prvInsertTimerInActiveList+0x7c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe fa08 	bl	8002ec6 <vListInsert>
 8004ab6:	e012      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d206      	bcs.n	8004ace <prvInsertTimerInActiveList+0x62>
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e007      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <prvInsertTimerInActiveList+0x80>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fe f9f4 	bl	8002ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ade:	697b      	ldr	r3, [r7, #20]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000d18 	.word	0x20000d18
 8004aec:	20000d14 	.word	0x20000d14

08004af0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08e      	sub	sp, #56	; 0x38
 8004af4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004af6:	e0ca      	b.n	8004c8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da18      	bge.n	8004b30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	3304      	adds	r3, #4
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	61fb      	str	r3, [r7, #28]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	6850      	ldr	r0, [r2, #4]
 8004b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2a:	6892      	ldr	r2, [r2, #8]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f2c0 80aa 	blt.w	8004c8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f9f5 	bl	8002f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b4e:	463b      	mov	r3, r7
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff6b 	bl	8004a2c <prvSampleTimeNow>
 8004b56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b09      	cmp	r3, #9
 8004b5c:	f200 8097 	bhi.w	8004c8e <prvProcessReceivedCommands+0x19e>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <prvProcessReceivedCommands+0x78>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b91 	.word	0x08004b91
 8004b74:	08004c05 	.word	0x08004c05
 8004b78:	08004c19 	.word	0x08004c19
 8004b7c:	08004c63 	.word	0x08004c63
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004b91 	.word	0x08004b91
 8004b88:	08004c05 	.word	0x08004c05
 8004b8c:	08004c19 	.word	0x08004c19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	18d1      	adds	r1, r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb0:	f7ff ff5c 	bl	8004a6c <prvInsertTimerInActiveList>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d069      	beq.n	8004c8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05e      	beq.n	8004c8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2100      	movs	r1, #0
 8004be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be2:	f7ff fe05 	bl	80047f0 <xTimerGenericCommand>
 8004be6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d14f      	bne.n	8004c8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	61bb      	str	r3, [r7, #24]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c16:	e03a      	b.n	8004c8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	617b      	str	r3, [r7, #20]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	18d1      	adds	r1, r2, r3
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5c:	f7ff ff06 	bl	8004a6c <prvInsertTimerInActiveList>
					break;
 8004c60:	e015      	b.n	8004c8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c72:	f000 fbdd 	bl	8005430 <vPortFree>
 8004c76:	e00a      	b.n	8004c8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c8a:	e000      	b.n	8004c8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <prvProcessReceivedCommands+0x1c0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1d39      	adds	r1, r7, #4
 8004c94:	2200      	movs	r2, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fc16 	bl	80034c8 <xQueueReceive>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f af2a 	bne.w	8004af8 <prvProcessReceivedCommands+0x8>
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3730      	adds	r7, #48	; 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000d1c 	.word	0x20000d1c

08004cb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cba:	e048      	b.n	8004d4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe f92f 	bl	8002f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02e      	beq.n	8004d4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d90e      	bls.n	8004d20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7fe f8d4 	bl	8002ec6 <vListInsert>
 8004d1e:	e016      	b.n	8004d4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d20:	2300      	movs	r3, #0
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff fd60 	bl	80047f0 <xTimerGenericCommand>
 8004d30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	603b      	str	r3, [r7, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1b1      	bne.n	8004cbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <prvSwitchTimerLists+0xc4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <prvSwitchTimerLists+0xc0>)
 8004d64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <prvSwitchTimerLists+0xc4>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000d14 	.word	0x20000d14
 8004d78:	20000d18 	.word	0x20000d18

08004d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d82:	f000 f967 	bl	8005054 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <prvCheckForValidListAndQueue+0x60>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d120      	bne.n	8004dd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d8e:	4814      	ldr	r0, [pc, #80]	; (8004de0 <prvCheckForValidListAndQueue+0x64>)
 8004d90:	f7fe f848 	bl	8002e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d94:	4813      	ldr	r0, [pc, #76]	; (8004de4 <prvCheckForValidListAndQueue+0x68>)
 8004d96:	f7fe f845 	bl	8002e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <prvCheckForValidListAndQueue+0x6c>)
 8004d9c:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <prvCheckForValidListAndQueue+0x64>)
 8004d9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <prvCheckForValidListAndQueue+0x70>)
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <prvCheckForValidListAndQueue+0x68>)
 8004da4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004da6:	2300      	movs	r3, #0
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <prvCheckForValidListAndQueue+0x74>)
 8004dac:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <prvCheckForValidListAndQueue+0x78>)
 8004dae:	2110      	movs	r1, #16
 8004db0:	200a      	movs	r0, #10
 8004db2:	f7fe f953 	bl	800305c <xQueueGenericCreateStatic>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <prvCheckForValidListAndQueue+0x60>)
 8004dba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <prvCheckForValidListAndQueue+0x60>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <prvCheckForValidListAndQueue+0x60>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	490b      	ldr	r1, [pc, #44]	; (8004df8 <prvCheckForValidListAndQueue+0x7c>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fd6c 	bl	80038a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dd0:	f000 f970 	bl	80050b4 <vPortExitCritical>
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000d1c 	.word	0x20000d1c
 8004de0:	20000cec 	.word	0x20000cec
 8004de4:	20000d00 	.word	0x20000d00
 8004de8:	20000d14 	.word	0x20000d14
 8004dec:	20000d18 	.word	0x20000d18
 8004df0:	20000dc8 	.word	0x20000dc8
 8004df4:	20000d28 	.word	0x20000d28
 8004df8:	08006af8 	.word	0x08006af8

08004dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3b04      	subs	r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3b04      	subs	r3, #4
 8004e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <pxPortInitialiseStack+0x64>)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3b14      	subs	r3, #20
 8004e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b04      	subs	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f06f 0202 	mvn.w	r2, #2
 8004e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3b20      	subs	r3, #32
 8004e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	08004e65 	.word	0x08004e65

08004e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <prvTaskExitError+0x54>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d00a      	beq.n	8004e8e <prvTaskExitError+0x2a>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60fb      	str	r3, [r7, #12]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <prvTaskExitError+0x28>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
}
 8004ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ea2:	bf00      	nop
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0fc      	beq.n	8004ea4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	00000000 	.word	0x00000000

08004ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <pxCurrentTCBConst2>)
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	6808      	ldr	r0, [r1, #0]
 8004ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	f380 8809 	msr	PSP, r0
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8811 	msr	BASEPRI, r0
 8004eda:	4770      	bx	lr
 8004edc:	f3af 8000 	nop.w

08004ee0 <pxCurrentTCBConst2>:
 8004ee0:	200007ec 	.word	0x200007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ee8:	4808      	ldr	r0, [pc, #32]	; (8004f0c <prvPortStartFirstTask+0x24>)
 8004eea:	6800      	ldr	r0, [r0, #0]
 8004eec:	6800      	ldr	r0, [r0, #0]
 8004eee:	f380 8808 	msr	MSP, r0
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8814 	msr	CONTROL, r0
 8004efa:	b662      	cpsie	i
 8004efc:	b661      	cpsie	f
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	df00      	svc	0
 8004f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f0a:	bf00      	nop
 8004f0c:	e000ed08 	.word	0xe000ed08

08004f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f16:	4b46      	ldr	r3, [pc, #280]	; (8005030 <xPortStartScheduler+0x120>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <xPortStartScheduler+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10a      	bne.n	8004f36 <xPortStartScheduler+0x26>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	613b      	str	r3, [r7, #16]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <xPortStartScheduler+0x120>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3f      	ldr	r2, [pc, #252]	; (8005038 <xPortStartScheduler+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10a      	bne.n	8004f56 <xPortStartScheduler+0x46>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f56:	4b39      	ldr	r3, [pc, #228]	; (800503c <xPortStartScheduler+0x12c>)
 8004f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <xPortStartScheduler+0x130>)
 8004f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <xPortStartScheduler+0x134>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f84:	e009      	b.n	8004f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <xPortStartScheduler+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <xPortStartScheduler+0x134>)
 8004f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d0ef      	beq.n	8004f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <xPortStartScheduler+0x134>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1c3 0307 	rsb	r3, r3, #7
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00a      	beq.n	8004fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60bb      	str	r3, [r7, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <xPortStartScheduler+0x134>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <xPortStartScheduler+0x134>)
 8004fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <xPortStartScheduler+0x134>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fda:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <xPortStartScheduler+0x134>)
 8004fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <xPortStartScheduler+0x138>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <xPortStartScheduler+0x138>)
 8004fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <xPortStartScheduler+0x138>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <xPortStartScheduler+0x138>)
 8004ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ffe:	f000 f8dd 	bl	80051bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <xPortStartScheduler+0x13c>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005008:	f000 f8fc 	bl	8005204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <xPortStartScheduler+0x140>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <xPortStartScheduler+0x140>)
 8005012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005018:	f7ff ff66 	bl	8004ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800501c:	f7ff f854 	bl	80040c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005020:	f7ff ff20 	bl	8004e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	e000ed00 	.word	0xe000ed00
 8005034:	410fc271 	.word	0x410fc271
 8005038:	410fc270 	.word	0x410fc270
 800503c:	e000e400 	.word	0xe000e400
 8005040:	20000e18 	.word	0x20000e18
 8005044:	20000e1c 	.word	0x20000e1c
 8005048:	e000ed20 	.word	0xe000ed20
 800504c:	2000000c 	.word	0x2000000c
 8005050:	e000ef34 	.word	0xe000ef34

08005054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	607b      	str	r3, [r7, #4]
}
 800506c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <vPortEnterCritical+0x58>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <vPortEnterCritical+0x58>)
 8005076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <vPortEnterCritical+0x58>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10f      	bne.n	80050a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vPortEnterCritical+0x5c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	603b      	str	r3, [r7, #0]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vPortEnterCritical+0x4a>
	}
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <vPortExitCritical+0x50>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <vPortExitCritical+0x24>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	607b      	str	r3, [r7, #4]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <vPortExitCritical+0x50>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3b01      	subs	r3, #1
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <vPortExitCritical+0x50>)
 80050e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <vPortExitCritical+0x50>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <vPortExitCritical+0x42>
 80050ea:	2300      	movs	r3, #0
 80050ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f383 8811 	msr	BASEPRI, r3
}
 80050f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	2000000c 	.word	0x2000000c
	...

08005110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005110:	f3ef 8009 	mrs	r0, PSP
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	4b15      	ldr	r3, [pc, #84]	; (8005170 <pxCurrentTCBConst>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f01e 0f10 	tst.w	lr, #16
 8005120:	bf08      	it	eq
 8005122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	6010      	str	r0, [r2, #0]
 800512c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005134:	f380 8811 	msr	BASEPRI, r0
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f7fe ffc2 	bl	80040c8 <vTaskSwitchContext>
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f380 8811 	msr	BASEPRI, r0
 800514c:	bc09      	pop	{r0, r3}
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	6808      	ldr	r0, [r1, #0]
 8005152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005156:	f01e 0f10 	tst.w	lr, #16
 800515a:	bf08      	it	eq
 800515c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005160:	f380 8809 	msr	PSP, r0
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst>:
 8005170:	200007ec 	.word	0x200007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005192:	f7fe fedf 	bl	8003f54 <xTaskIncrementTick>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <xPortSysTickHandler+0x40>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f383 8811 	msr	BASEPRI, r3
}
 80051ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <vPortSetupTimerInterrupt+0x34>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <vPortSetupTimerInterrupt+0x38>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <vPortSetupTimerInterrupt+0x3c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <vPortSetupTimerInterrupt+0x40>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	099b      	lsrs	r3, r3, #6
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <vPortSetupTimerInterrupt+0x44>)
 80051da:	3b01      	subs	r3, #1
 80051dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051de:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <vPortSetupTimerInterrupt+0x34>)
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	e000e010 	.word	0xe000e010
 80051f4:	e000e018 	.word	0xe000e018
 80051f8:	20000000 	.word	0x20000000
 80051fc:	10624dd3 	.word	0x10624dd3
 8005200:	e000e014 	.word	0xe000e014

08005204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005214 <vPortEnableVFP+0x10>
 8005208:	6801      	ldr	r1, [r0, #0]
 800520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800520e:	6001      	str	r1, [r0, #0]
 8005210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005212:	bf00      	nop
 8005214:	e000ed88 	.word	0xe000ed88

08005218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800521e:	f3ef 8305 	mrs	r3, IPSR
 8005222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	d914      	bls.n	8005254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800522a:	4a17      	ldr	r2, [pc, #92]	; (8005288 <vPortValidateInterruptPriority+0x70>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005234:	4b15      	ldr	r3, [pc, #84]	; (800528c <vPortValidateInterruptPriority+0x74>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	7afa      	ldrb	r2, [r7, #11]
 800523a:	429a      	cmp	r2, r3
 800523c:	d20a      	bcs.n	8005254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <vPortValidateInterruptPriority+0x78>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <vPortValidateInterruptPriority+0x7c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d90a      	bls.n	800527a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	603b      	str	r3, [r7, #0]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <vPortValidateInterruptPriority+0x60>
	}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000e3f0 	.word	0xe000e3f0
 800528c:	20000e18 	.word	0x20000e18
 8005290:	e000ed0c 	.word	0xe000ed0c
 8005294:	20000e1c 	.word	0x20000e1c

08005298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052a4:	f7fe fd9a 	bl	8003ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052a8:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <pvPortMalloc+0x180>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052b0:	f000 f920 	bl	80054f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <pvPortMalloc+0x184>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8093 	bne.w	80053e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01d      	beq.n	8005304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052c8:	2208      	movs	r2, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d014      	beq.n	8005304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	3308      	adds	r3, #8
 80052e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <pvPortMalloc+0x6c>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	617b      	str	r3, [r7, #20]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06e      	beq.n	80053e8 <pvPortMalloc+0x150>
 800530a:	4b45      	ldr	r3, [pc, #276]	; (8005420 <pvPortMalloc+0x188>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d869      	bhi.n	80053e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <pvPortMalloc+0x18c>)
 8005316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <pvPortMalloc+0x18c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800531e:	e004      	b.n	800532a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d903      	bls.n	800533c <pvPortMalloc+0xa4>
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f1      	bne.n	8005320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800533c:	4b36      	ldr	r3, [pc, #216]	; (8005418 <pvPortMalloc+0x180>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	429a      	cmp	r2, r3
 8005344:	d050      	beq.n	80053e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2208      	movs	r2, #8
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	2308      	movs	r3, #8
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	429a      	cmp	r2, r3
 8005366:	d91f      	bls.n	80053a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <pvPortMalloc+0xf8>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	613b      	str	r3, [r7, #16]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f000 f908 	bl	80055b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <pvPortMalloc+0x188>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <pvPortMalloc+0x188>)
 80053b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <pvPortMalloc+0x188>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <pvPortMalloc+0x190>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d203      	bcs.n	80053ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <pvPortMalloc+0x188>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <pvPortMalloc+0x190>)
 80053c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <pvPortMalloc+0x184>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <pvPortMalloc+0x194>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <pvPortMalloc+0x194>)
 80053e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053e8:	f7fe fd06 	bl	8003df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <pvPortMalloc+0x174>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <pvPortMalloc+0x172>
	return pvReturn;
 800540c:	69fb      	ldr	r3, [r7, #28]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20004a28 	.word	0x20004a28
 800541c:	20004a3c 	.word	0x20004a3c
 8005420:	20004a2c 	.word	0x20004a2c
 8005424:	20004a20 	.word	0x20004a20
 8005428:	20004a30 	.word	0x20004a30
 800542c:	20004a34 	.word	0x20004a34

08005430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04d      	beq.n	80054de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005442:	2308      	movs	r3, #8
 8005444:	425b      	negs	r3, r3
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4413      	add	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <vPortFree+0xb8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <vPortFree+0x44>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <vPortFree+0x62>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <vPortFree+0xb8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01e      	beq.n	80054de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11a      	bne.n	80054de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <vPortFree+0xb8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054b8:	f7fe fc90 	bl	8003ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <vPortFree+0xbc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <vPortFree+0xbc>)
 80054c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f000 f874 	bl	80055b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <vPortFree+0xc0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <vPortFree+0xc0>)
 80054d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054da:	f7fe fc8d 	bl	8003df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20004a3c 	.word	0x20004a3c
 80054ec:	20004a2c 	.word	0x20004a2c
 80054f0:	20004a38 	.word	0x20004a38

080054f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005500:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <prvHeapInit+0xac>)
 8005502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3307      	adds	r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0307 	bic.w	r3, r3, #7
 800551a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <prvHeapInit+0xac>)
 8005524:	4413      	add	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800552c:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <prvHeapInit+0xb0>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <prvHeapInit+0xb0>)
 8005534:	2200      	movs	r2, #0
 8005536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005540:	2208      	movs	r2, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <prvHeapInit+0xb4>)
 8005554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <prvHeapInit+0xb4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <prvHeapInit+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvHeapInit+0xb4>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <prvHeapInit+0xb8>)
 8005582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <prvHeapInit+0xbc>)
 800558a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <prvHeapInit+0xc0>)
 800558e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000e20 	.word	0x20000e20
 80055a4:	20004a20 	.word	0x20004a20
 80055a8:	20004a28 	.word	0x20004a28
 80055ac:	20004a30 	.word	0x20004a30
 80055b0:	20004a2c 	.word	0x20004a2c
 80055b4:	20004a3c 	.word	0x20004a3c

080055b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <prvInsertBlockIntoFreeList+0xac>)
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e002      	b.n	80055cc <prvInsertBlockIntoFreeList+0x14>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d8f7      	bhi.n	80055c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4413      	add	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d108      	bne.n	80055fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	441a      	add	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d118      	bne.n	8005640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b15      	ldr	r3, [pc, #84]	; (8005668 <prvInsertBlockIntoFreeList+0xb0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d00d      	beq.n	8005636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e008      	b.n	8005648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvInsertBlockIntoFreeList+0xb0>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e003      	b.n	8005648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d002      	beq.n	8005656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20004a20 	.word	0x20004a20
 8005668:	20004a28 	.word	0x20004a28

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000010 	.word	0x20000010

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f001 fa00 	bl	8006a90 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	08006c00 	.word	0x08006c00
 80056b4:	08006c00 	.word	0x08006c00
 80056b8:	08006c00 	.word	0x08006c00
 80056bc:	08006c04 	.word	0x08006c04

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <memset>:
 80056dc:	4402      	add	r2, r0
 80056de:	4603      	mov	r3, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <iprintf>:
 80056ec:	b40f      	push	{r0, r1, r2, r3}
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <iprintf+0x2c>)
 80056f0:	b513      	push	{r0, r1, r4, lr}
 80056f2:	681c      	ldr	r4, [r3, #0]
 80056f4:	b124      	cbz	r4, 8005700 <iprintf+0x14>
 80056f6:	69a3      	ldr	r3, [r4, #24]
 80056f8:	b913      	cbnz	r3, 8005700 <iprintf+0x14>
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fa7e 	bl	8005bfc <__sinit>
 8005700:	ab05      	add	r3, sp, #20
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	68a1      	ldr	r1, [r4, #8]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fde3 	bl	80062d4 <_vfiprintf_r>
 800570e:	b002      	add	sp, #8
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	b004      	add	sp, #16
 8005716:	4770      	bx	lr
 8005718:	20000010 	.word	0x20000010

0800571c <_puts_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	460e      	mov	r6, r1
 8005720:	4605      	mov	r5, r0
 8005722:	b118      	cbz	r0, 800572c <_puts_r+0x10>
 8005724:	6983      	ldr	r3, [r0, #24]
 8005726:	b90b      	cbnz	r3, 800572c <_puts_r+0x10>
 8005728:	f000 fa68 	bl	8005bfc <__sinit>
 800572c:	69ab      	ldr	r3, [r5, #24]
 800572e:	68ac      	ldr	r4, [r5, #8]
 8005730:	b913      	cbnz	r3, 8005738 <_puts_r+0x1c>
 8005732:	4628      	mov	r0, r5
 8005734:	f000 fa62 	bl	8005bfc <__sinit>
 8005738:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <_puts_r+0xd0>)
 800573a:	429c      	cmp	r4, r3
 800573c:	d120      	bne.n	8005780 <_puts_r+0x64>
 800573e:	686c      	ldr	r4, [r5, #4]
 8005740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d405      	bmi.n	8005752 <_puts_r+0x36>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	0598      	lsls	r0, r3, #22
 800574a:	d402      	bmi.n	8005752 <_puts_r+0x36>
 800574c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574e:	f000 faf3 	bl	8005d38 <__retarget_lock_acquire_recursive>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	0719      	lsls	r1, r3, #28
 8005756:	d51d      	bpl.n	8005794 <_puts_r+0x78>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b1db      	cbz	r3, 8005794 <_puts_r+0x78>
 800575c:	3e01      	subs	r6, #1
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005764:	3b01      	subs	r3, #1
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	bb39      	cbnz	r1, 80057ba <_puts_r+0x9e>
 800576a:	2b00      	cmp	r3, #0
 800576c:	da38      	bge.n	80057e0 <_puts_r+0xc4>
 800576e:	4622      	mov	r2, r4
 8005770:	210a      	movs	r1, #10
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f868 	bl	8005848 <__swbuf_r>
 8005778:	3001      	adds	r0, #1
 800577a:	d011      	beq.n	80057a0 <_puts_r+0x84>
 800577c:	250a      	movs	r5, #10
 800577e:	e011      	b.n	80057a4 <_puts_r+0x88>
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <_puts_r+0xd4>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d101      	bne.n	800578a <_puts_r+0x6e>
 8005786:	68ac      	ldr	r4, [r5, #8]
 8005788:	e7da      	b.n	8005740 <_puts_r+0x24>
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <_puts_r+0xd8>)
 800578c:	429c      	cmp	r4, r3
 800578e:	bf08      	it	eq
 8005790:	68ec      	ldreq	r4, [r5, #12]
 8005792:	e7d5      	b.n	8005740 <_puts_r+0x24>
 8005794:	4621      	mov	r1, r4
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f8a8 	bl	80058ec <__swsetup_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0dd      	beq.n	800575c <_puts_r+0x40>
 80057a0:	f04f 35ff 	mov.w	r5, #4294967295
 80057a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a6:	07da      	lsls	r2, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_puts_r+0x9a>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	059b      	lsls	r3, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_puts_r+0x9a>
 80057b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b2:	f000 fac2 	bl	8005d3a <__retarget_lock_release_recursive>
 80057b6:	4628      	mov	r0, r5
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da04      	bge.n	80057c8 <_puts_r+0xac>
 80057be:	69a2      	ldr	r2, [r4, #24]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	dc06      	bgt.n	80057d2 <_puts_r+0xb6>
 80057c4:	290a      	cmp	r1, #10
 80057c6:	d004      	beq.n	80057d2 <_puts_r+0xb6>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	7019      	strb	r1, [r3, #0]
 80057d0:	e7c5      	b.n	800575e <_puts_r+0x42>
 80057d2:	4622      	mov	r2, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f837 	bl	8005848 <__swbuf_r>
 80057da:	3001      	adds	r0, #1
 80057dc:	d1bf      	bne.n	800575e <_puts_r+0x42>
 80057de:	e7df      	b.n	80057a0 <_puts_r+0x84>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	250a      	movs	r5, #10
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	701d      	strb	r5, [r3, #0]
 80057ea:	e7db      	b.n	80057a4 <_puts_r+0x88>
 80057ec:	08006b84 	.word	0x08006b84
 80057f0:	08006ba4 	.word	0x08006ba4
 80057f4:	08006b64 	.word	0x08006b64

080057f8 <puts>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <puts+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f7ff bf8d 	b.w	800571c <_puts_r>
 8005802:	bf00      	nop
 8005804:	20000010 	.word	0x20000010

08005808 <siprintf>:
 8005808:	b40e      	push	{r1, r2, r3}
 800580a:	b500      	push	{lr}
 800580c:	b09c      	sub	sp, #112	; 0x70
 800580e:	ab1d      	add	r3, sp, #116	; 0x74
 8005810:	9002      	str	r0, [sp, #8]
 8005812:	9006      	str	r0, [sp, #24]
 8005814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005818:	4809      	ldr	r0, [pc, #36]	; (8005840 <siprintf+0x38>)
 800581a:	9107      	str	r1, [sp, #28]
 800581c:	9104      	str	r1, [sp, #16]
 800581e:	4909      	ldr	r1, [pc, #36]	; (8005844 <siprintf+0x3c>)
 8005820:	f853 2b04 	ldr.w	r2, [r3], #4
 8005824:	9105      	str	r1, [sp, #20]
 8005826:	6800      	ldr	r0, [r0, #0]
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	a902      	add	r1, sp, #8
 800582c:	f000 fc28 	bl	8006080 <_svfiprintf_r>
 8005830:	9b02      	ldr	r3, [sp, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	b01c      	add	sp, #112	; 0x70
 8005838:	f85d eb04 	ldr.w	lr, [sp], #4
 800583c:	b003      	add	sp, #12
 800583e:	4770      	bx	lr
 8005840:	20000010 	.word	0x20000010
 8005844:	ffff0208 	.word	0xffff0208

08005848 <__swbuf_r>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	460e      	mov	r6, r1
 800584c:	4614      	mov	r4, r2
 800584e:	4605      	mov	r5, r0
 8005850:	b118      	cbz	r0, 800585a <__swbuf_r+0x12>
 8005852:	6983      	ldr	r3, [r0, #24]
 8005854:	b90b      	cbnz	r3, 800585a <__swbuf_r+0x12>
 8005856:	f000 f9d1 	bl	8005bfc <__sinit>
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <__swbuf_r+0x98>)
 800585c:	429c      	cmp	r4, r3
 800585e:	d12b      	bne.n	80058b8 <__swbuf_r+0x70>
 8005860:	686c      	ldr	r4, [r5, #4]
 8005862:	69a3      	ldr	r3, [r4, #24]
 8005864:	60a3      	str	r3, [r4, #8]
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	071a      	lsls	r2, r3, #28
 800586a:	d52f      	bpl.n	80058cc <__swbuf_r+0x84>
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	b36b      	cbz	r3, 80058cc <__swbuf_r+0x84>
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	6820      	ldr	r0, [r4, #0]
 8005874:	1ac0      	subs	r0, r0, r3
 8005876:	6963      	ldr	r3, [r4, #20]
 8005878:	b2f6      	uxtb	r6, r6
 800587a:	4283      	cmp	r3, r0
 800587c:	4637      	mov	r7, r6
 800587e:	dc04      	bgt.n	800588a <__swbuf_r+0x42>
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f926 	bl	8005ad4 <_fflush_r>
 8005888:	bb30      	cbnz	r0, 80058d8 <__swbuf_r+0x90>
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	3b01      	subs	r3, #1
 800588e:	60a3      	str	r3, [r4, #8]
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	6022      	str	r2, [r4, #0]
 8005896:	701e      	strb	r6, [r3, #0]
 8005898:	6963      	ldr	r3, [r4, #20]
 800589a:	3001      	adds	r0, #1
 800589c:	4283      	cmp	r3, r0
 800589e:	d004      	beq.n	80058aa <__swbuf_r+0x62>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	07db      	lsls	r3, r3, #31
 80058a4:	d506      	bpl.n	80058b4 <__swbuf_r+0x6c>
 80058a6:	2e0a      	cmp	r6, #10
 80058a8:	d104      	bne.n	80058b4 <__swbuf_r+0x6c>
 80058aa:	4621      	mov	r1, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 f911 	bl	8005ad4 <_fflush_r>
 80058b2:	b988      	cbnz	r0, 80058d8 <__swbuf_r+0x90>
 80058b4:	4638      	mov	r0, r7
 80058b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <__swbuf_r+0x9c>)
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d101      	bne.n	80058c2 <__swbuf_r+0x7a>
 80058be:	68ac      	ldr	r4, [r5, #8]
 80058c0:	e7cf      	b.n	8005862 <__swbuf_r+0x1a>
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <__swbuf_r+0xa0>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	bf08      	it	eq
 80058c8:	68ec      	ldreq	r4, [r5, #12]
 80058ca:	e7ca      	b.n	8005862 <__swbuf_r+0x1a>
 80058cc:	4621      	mov	r1, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 f80c 	bl	80058ec <__swsetup_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0cb      	beq.n	8005870 <__swbuf_r+0x28>
 80058d8:	f04f 37ff 	mov.w	r7, #4294967295
 80058dc:	e7ea      	b.n	80058b4 <__swbuf_r+0x6c>
 80058de:	bf00      	nop
 80058e0:	08006b84 	.word	0x08006b84
 80058e4:	08006ba4 	.word	0x08006ba4
 80058e8:	08006b64 	.word	0x08006b64

080058ec <__swsetup_r>:
 80058ec:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <__swsetup_r+0xcc>)
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	681d      	ldr	r5, [r3, #0]
 80058f2:	4606      	mov	r6, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	b125      	cbz	r5, 8005902 <__swsetup_r+0x16>
 80058f8:	69ab      	ldr	r3, [r5, #24]
 80058fa:	b913      	cbnz	r3, 8005902 <__swsetup_r+0x16>
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 f97d 	bl	8005bfc <__sinit>
 8005902:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <__swsetup_r+0xd0>)
 8005904:	429c      	cmp	r4, r3
 8005906:	d10f      	bne.n	8005928 <__swsetup_r+0x3c>
 8005908:	686c      	ldr	r4, [r5, #4]
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005910:	0719      	lsls	r1, r3, #28
 8005912:	d42c      	bmi.n	800596e <__swsetup_r+0x82>
 8005914:	06dd      	lsls	r5, r3, #27
 8005916:	d411      	bmi.n	800593c <__swsetup_r+0x50>
 8005918:	2309      	movs	r3, #9
 800591a:	6033      	str	r3, [r6, #0]
 800591c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	e03e      	b.n	80059a6 <__swsetup_r+0xba>
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <__swsetup_r+0xd4>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d101      	bne.n	8005932 <__swsetup_r+0x46>
 800592e:	68ac      	ldr	r4, [r5, #8]
 8005930:	e7eb      	b.n	800590a <__swsetup_r+0x1e>
 8005932:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <__swsetup_r+0xd8>)
 8005934:	429c      	cmp	r4, r3
 8005936:	bf08      	it	eq
 8005938:	68ec      	ldreq	r4, [r5, #12]
 800593a:	e7e6      	b.n	800590a <__swsetup_r+0x1e>
 800593c:	0758      	lsls	r0, r3, #29
 800593e:	d512      	bpl.n	8005966 <__swsetup_r+0x7a>
 8005940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005942:	b141      	cbz	r1, 8005956 <__swsetup_r+0x6a>
 8005944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <__swsetup_r+0x66>
 800594c:	4630      	mov	r0, r6
 800594e:	f000 fa5b 	bl	8005e08 <_free_r>
 8005952:	2300      	movs	r3, #0
 8005954:	6363      	str	r3, [r4, #52]	; 0x34
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	2300      	movs	r3, #0
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	b94b      	cbnz	r3, 8005986 <__swsetup_r+0x9a>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597c:	d003      	beq.n	8005986 <__swsetup_r+0x9a>
 800597e:	4621      	mov	r1, r4
 8005980:	4630      	mov	r0, r6
 8005982:	f000 fa01 	bl	8005d88 <__smakebuf_r>
 8005986:	89a0      	ldrh	r0, [r4, #12]
 8005988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800598c:	f010 0301 	ands.w	r3, r0, #1
 8005990:	d00a      	beq.n	80059a8 <__swsetup_r+0xbc>
 8005992:	2300      	movs	r3, #0
 8005994:	60a3      	str	r3, [r4, #8]
 8005996:	6963      	ldr	r3, [r4, #20]
 8005998:	425b      	negs	r3, r3
 800599a:	61a3      	str	r3, [r4, #24]
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	b943      	cbnz	r3, 80059b2 <__swsetup_r+0xc6>
 80059a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059a4:	d1ba      	bne.n	800591c <__swsetup_r+0x30>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	0781      	lsls	r1, r0, #30
 80059aa:	bf58      	it	pl
 80059ac:	6963      	ldrpl	r3, [r4, #20]
 80059ae:	60a3      	str	r3, [r4, #8]
 80059b0:	e7f4      	b.n	800599c <__swsetup_r+0xb0>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e7f7      	b.n	80059a6 <__swsetup_r+0xba>
 80059b6:	bf00      	nop
 80059b8:	20000010 	.word	0x20000010
 80059bc:	08006b84 	.word	0x08006b84
 80059c0:	08006ba4 	.word	0x08006ba4
 80059c4:	08006b64 	.word	0x08006b64

080059c8 <__sflush_r>:
 80059c8:	898a      	ldrh	r2, [r1, #12]
 80059ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	4605      	mov	r5, r0
 80059d0:	0710      	lsls	r0, r2, #28
 80059d2:	460c      	mov	r4, r1
 80059d4:	d458      	bmi.n	8005a88 <__sflush_r+0xc0>
 80059d6:	684b      	ldr	r3, [r1, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dc05      	bgt.n	80059e8 <__sflush_r+0x20>
 80059dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	dc02      	bgt.n	80059e8 <__sflush_r+0x20>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d0f9      	beq.n	80059e2 <__sflush_r+0x1a>
 80059ee:	2300      	movs	r3, #0
 80059f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059f4:	682f      	ldr	r7, [r5, #0]
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	d032      	beq.n	8005a60 <__sflush_r+0x98>
 80059fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	075a      	lsls	r2, r3, #29
 8005a00:	d505      	bpl.n	8005a0e <__sflush_r+0x46>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	1ac0      	subs	r0, r0, r3
 8005a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a08:	b10b      	cbz	r3, 8005a0e <__sflush_r+0x46>
 8005a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a0c:	1ac0      	subs	r0, r0, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4602      	mov	r2, r0
 8005a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a14:	6a21      	ldr	r1, [r4, #32]
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b0      	blx	r6
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	d106      	bne.n	8005a2e <__sflush_r+0x66>
 8005a20:	6829      	ldr	r1, [r5, #0]
 8005a22:	291d      	cmp	r1, #29
 8005a24:	d82c      	bhi.n	8005a80 <__sflush_r+0xb8>
 8005a26:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <__sflush_r+0x108>)
 8005a28:	40ca      	lsrs	r2, r1
 8005a2a:	07d6      	lsls	r6, r2, #31
 8005a2c:	d528      	bpl.n	8005a80 <__sflush_r+0xb8>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	6062      	str	r2, [r4, #4]
 8005a32:	04d9      	lsls	r1, r3, #19
 8005a34:	6922      	ldr	r2, [r4, #16]
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	d504      	bpl.n	8005a44 <__sflush_r+0x7c>
 8005a3a:	1c42      	adds	r2, r0, #1
 8005a3c:	d101      	bne.n	8005a42 <__sflush_r+0x7a>
 8005a3e:	682b      	ldr	r3, [r5, #0]
 8005a40:	b903      	cbnz	r3, 8005a44 <__sflush_r+0x7c>
 8005a42:	6560      	str	r0, [r4, #84]	; 0x54
 8005a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a46:	602f      	str	r7, [r5, #0]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	d0ca      	beq.n	80059e2 <__sflush_r+0x1a>
 8005a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a50:	4299      	cmp	r1, r3
 8005a52:	d002      	beq.n	8005a5a <__sflush_r+0x92>
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 f9d7 	bl	8005e08 <_free_r>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a5e:	e7c1      	b.n	80059e4 <__sflush_r+0x1c>
 8005a60:	6a21      	ldr	r1, [r4, #32]
 8005a62:	2301      	movs	r3, #1
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b0      	blx	r6
 8005a68:	1c41      	adds	r1, r0, #1
 8005a6a:	d1c7      	bne.n	80059fc <__sflush_r+0x34>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0c4      	beq.n	80059fc <__sflush_r+0x34>
 8005a72:	2b1d      	cmp	r3, #29
 8005a74:	d001      	beq.n	8005a7a <__sflush_r+0xb2>
 8005a76:	2b16      	cmp	r3, #22
 8005a78:	d101      	bne.n	8005a7e <__sflush_r+0xb6>
 8005a7a:	602f      	str	r7, [r5, #0]
 8005a7c:	e7b1      	b.n	80059e2 <__sflush_r+0x1a>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	e7ad      	b.n	80059e4 <__sflush_r+0x1c>
 8005a88:	690f      	ldr	r7, [r1, #16]
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	d0a9      	beq.n	80059e2 <__sflush_r+0x1a>
 8005a8e:	0793      	lsls	r3, r2, #30
 8005a90:	680e      	ldr	r6, [r1, #0]
 8005a92:	bf08      	it	eq
 8005a94:	694b      	ldreq	r3, [r1, #20]
 8005a96:	600f      	str	r7, [r1, #0]
 8005a98:	bf18      	it	ne
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	eba6 0807 	sub.w	r8, r6, r7
 8005aa0:	608b      	str	r3, [r1, #8]
 8005aa2:	f1b8 0f00 	cmp.w	r8, #0
 8005aa6:	dd9c      	ble.n	80059e2 <__sflush_r+0x1a>
 8005aa8:	6a21      	ldr	r1, [r4, #32]
 8005aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aac:	4643      	mov	r3, r8
 8005aae:	463a      	mov	r2, r7
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b0      	blx	r6
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	dc06      	bgt.n	8005ac6 <__sflush_r+0xfe>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e78e      	b.n	80059e4 <__sflush_r+0x1c>
 8005ac6:	4407      	add	r7, r0
 8005ac8:	eba8 0800 	sub.w	r8, r8, r0
 8005acc:	e7e9      	b.n	8005aa2 <__sflush_r+0xda>
 8005ace:	bf00      	nop
 8005ad0:	20400001 	.word	0x20400001

08005ad4 <_fflush_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	690b      	ldr	r3, [r1, #16]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b913      	cbnz	r3, 8005ae4 <_fflush_r+0x10>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	b118      	cbz	r0, 8005aee <_fflush_r+0x1a>
 8005ae6:	6983      	ldr	r3, [r0, #24]
 8005ae8:	b90b      	cbnz	r3, 8005aee <_fflush_r+0x1a>
 8005aea:	f000 f887 	bl	8005bfc <__sinit>
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <_fflush_r+0x6c>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d11b      	bne.n	8005b2c <_fflush_r+0x58>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ef      	beq.n	8005ade <_fflush_r+0xa>
 8005afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b00:	07d0      	lsls	r0, r2, #31
 8005b02:	d404      	bmi.n	8005b0e <_fflush_r+0x3a>
 8005b04:	0599      	lsls	r1, r3, #22
 8005b06:	d402      	bmi.n	8005b0e <_fflush_r+0x3a>
 8005b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b0a:	f000 f915 	bl	8005d38 <__retarget_lock_acquire_recursive>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	4621      	mov	r1, r4
 8005b12:	f7ff ff59 	bl	80059c8 <__sflush_r>
 8005b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b18:	07da      	lsls	r2, r3, #31
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	d4e0      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	059b      	lsls	r3, r3, #22
 8005b22:	d4dd      	bmi.n	8005ae0 <_fflush_r+0xc>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f908 	bl	8005d3a <__retarget_lock_release_recursive>
 8005b2a:	e7d9      	b.n	8005ae0 <_fflush_r+0xc>
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <_fflush_r+0x70>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	d101      	bne.n	8005b36 <_fflush_r+0x62>
 8005b32:	68ac      	ldr	r4, [r5, #8]
 8005b34:	e7df      	b.n	8005af6 <_fflush_r+0x22>
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <_fflush_r+0x74>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	bf08      	it	eq
 8005b3c:	68ec      	ldreq	r4, [r5, #12]
 8005b3e:	e7da      	b.n	8005af6 <_fflush_r+0x22>
 8005b40:	08006b84 	.word	0x08006b84
 8005b44:	08006ba4 	.word	0x08006ba4
 8005b48:	08006b64 	.word	0x08006b64

08005b4c <std>:
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	4604      	mov	r4, r0
 8005b52:	e9c0 3300 	strd	r3, r3, [r0]
 8005b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b5a:	6083      	str	r3, [r0, #8]
 8005b5c:	8181      	strh	r1, [r0, #12]
 8005b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b60:	81c2      	strh	r2, [r0, #14]
 8005b62:	6183      	str	r3, [r0, #24]
 8005b64:	4619      	mov	r1, r3
 8005b66:	2208      	movs	r2, #8
 8005b68:	305c      	adds	r0, #92	; 0x5c
 8005b6a:	f7ff fdb7 	bl	80056dc <memset>
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <std+0x38>)
 8005b70:	6263      	str	r3, [r4, #36]	; 0x24
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <std+0x3c>)
 8005b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <std+0x40>)
 8005b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x44>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	bf00      	nop
 8005b84:	0800687d 	.word	0x0800687d
 8005b88:	0800689f 	.word	0x0800689f
 8005b8c:	080068d7 	.word	0x080068d7
 8005b90:	080068fb 	.word	0x080068fb

08005b94 <_cleanup_r>:
 8005b94:	4901      	ldr	r1, [pc, #4]	; (8005b9c <_cleanup_r+0x8>)
 8005b96:	f000 b8af 	b.w	8005cf8 <_fwalk_reent>
 8005b9a:	bf00      	nop
 8005b9c:	08005ad5 	.word	0x08005ad5

08005ba0 <__sfmoreglue>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	2268      	movs	r2, #104	; 0x68
 8005ba4:	1e4d      	subs	r5, r1, #1
 8005ba6:	4355      	muls	r5, r2
 8005ba8:	460e      	mov	r6, r1
 8005baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bae:	f000 f997 	bl	8005ee0 <_malloc_r>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	b140      	cbz	r0, 8005bc8 <__sfmoreglue+0x28>
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	60a0      	str	r0, [r4, #8]
 8005bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bc4:	f7ff fd8a 	bl	80056dc <memset>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	bd70      	pop	{r4, r5, r6, pc}

08005bcc <__sfp_lock_acquire>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <__sfp_lock_acquire+0x8>)
 8005bce:	f000 b8b3 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	20004a41 	.word	0x20004a41

08005bd8 <__sfp_lock_release>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_release+0x8>)
 8005bda:	f000 b8ae 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005bde:	bf00      	nop
 8005be0:	20004a41 	.word	0x20004a41

08005be4 <__sinit_lock_acquire>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sinit_lock_acquire+0x8>)
 8005be6:	f000 b8a7 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20004a42 	.word	0x20004a42

08005bf0 <__sinit_lock_release>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_release+0x8>)
 8005bf2:	f000 b8a2 	b.w	8005d3a <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20004a42 	.word	0x20004a42

08005bfc <__sinit>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4604      	mov	r4, r0
 8005c00:	f7ff fff0 	bl	8005be4 <__sinit_lock_acquire>
 8005c04:	69a3      	ldr	r3, [r4, #24]
 8005c06:	b11b      	cbz	r3, 8005c10 <__sinit+0x14>
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f7ff bff0 	b.w	8005bf0 <__sinit_lock_release>
 8005c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c14:	6523      	str	r3, [r4, #80]	; 0x50
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <__sinit+0x68>)
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <__sinit+0x6c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	bf04      	itt	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	61a3      	streq	r3, [r4, #24]
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 f820 	bl	8005c6c <__sfp>
 8005c2c:	6060      	str	r0, [r4, #4]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 f81c 	bl	8005c6c <__sfp>
 8005c34:	60a0      	str	r0, [r4, #8]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 f818 	bl	8005c6c <__sfp>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	60e0      	str	r0, [r4, #12]
 8005c40:	2104      	movs	r1, #4
 8005c42:	6860      	ldr	r0, [r4, #4]
 8005c44:	f7ff ff82 	bl	8005b4c <std>
 8005c48:	68a0      	ldr	r0, [r4, #8]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2109      	movs	r1, #9
 8005c4e:	f7ff ff7d 	bl	8005b4c <std>
 8005c52:	68e0      	ldr	r0, [r4, #12]
 8005c54:	2202      	movs	r2, #2
 8005c56:	2112      	movs	r1, #18
 8005c58:	f7ff ff78 	bl	8005b4c <std>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61a3      	str	r3, [r4, #24]
 8005c60:	e7d2      	b.n	8005c08 <__sinit+0xc>
 8005c62:	bf00      	nop
 8005c64:	08006b60 	.word	0x08006b60
 8005c68:	08005b95 	.word	0x08005b95

08005c6c <__sfp>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	4607      	mov	r7, r0
 8005c70:	f7ff ffac 	bl	8005bcc <__sfp_lock_acquire>
 8005c74:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <__sfp+0x84>)
 8005c76:	681e      	ldr	r6, [r3, #0]
 8005c78:	69b3      	ldr	r3, [r6, #24]
 8005c7a:	b913      	cbnz	r3, 8005c82 <__sfp+0x16>
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ffbd 	bl	8005bfc <__sinit>
 8005c82:	3648      	adds	r6, #72	; 0x48
 8005c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	d503      	bpl.n	8005c94 <__sfp+0x28>
 8005c8c:	6833      	ldr	r3, [r6, #0]
 8005c8e:	b30b      	cbz	r3, 8005cd4 <__sfp+0x68>
 8005c90:	6836      	ldr	r6, [r6, #0]
 8005c92:	e7f7      	b.n	8005c84 <__sfp+0x18>
 8005c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c98:	b9d5      	cbnz	r5, 8005cd0 <__sfp+0x64>
 8005c9a:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <__sfp+0x88>)
 8005c9c:	60e3      	str	r3, [r4, #12]
 8005c9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ca4:	f000 f847 	bl	8005d36 <__retarget_lock_init_recursive>
 8005ca8:	f7ff ff96 	bl	8005bd8 <__sfp_lock_release>
 8005cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cb4:	6025      	str	r5, [r4, #0]
 8005cb6:	61a5      	str	r5, [r4, #24]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cc0:	f7ff fd0c 	bl	80056dc <memset>
 8005cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ccc:	4620      	mov	r0, r4
 8005cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd0:	3468      	adds	r4, #104	; 0x68
 8005cd2:	e7d9      	b.n	8005c88 <__sfp+0x1c>
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f7ff ff62 	bl	8005ba0 <__sfmoreglue>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	6030      	str	r0, [r6, #0]
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1d5      	bne.n	8005c90 <__sfp+0x24>
 8005ce4:	f7ff ff78 	bl	8005bd8 <__sfp_lock_release>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	e7ee      	b.n	8005ccc <__sfp+0x60>
 8005cee:	bf00      	nop
 8005cf0:	08006b60 	.word	0x08006b60
 8005cf4:	ffff0001 	.word	0xffff0001

08005cf8 <_fwalk_reent>:
 8005cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	4688      	mov	r8, r1
 8005d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d04:	2700      	movs	r7, #0
 8005d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d0e:	d505      	bpl.n	8005d1c <_fwalk_reent+0x24>
 8005d10:	6824      	ldr	r4, [r4, #0]
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	d1f7      	bne.n	8005d06 <_fwalk_reent+0xe>
 8005d16:	4638      	mov	r0, r7
 8005d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1c:	89ab      	ldrh	r3, [r5, #12]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d907      	bls.n	8005d32 <_fwalk_reent+0x3a>
 8005d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d26:	3301      	adds	r3, #1
 8005d28:	d003      	beq.n	8005d32 <_fwalk_reent+0x3a>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	47c0      	blx	r8
 8005d30:	4307      	orrs	r7, r0
 8005d32:	3568      	adds	r5, #104	; 0x68
 8005d34:	e7e9      	b.n	8005d0a <_fwalk_reent+0x12>

08005d36 <__retarget_lock_init_recursive>:
 8005d36:	4770      	bx	lr

08005d38 <__retarget_lock_acquire_recursive>:
 8005d38:	4770      	bx	lr

08005d3a <__retarget_lock_release_recursive>:
 8005d3a:	4770      	bx	lr

08005d3c <__swhatbuf_r>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2900      	cmp	r1, #0
 8005d46:	b096      	sub	sp, #88	; 0x58
 8005d48:	4614      	mov	r4, r2
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	da08      	bge.n	8005d60 <__swhatbuf_r+0x24>
 8005d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	061a      	lsls	r2, r3, #24
 8005d58:	d410      	bmi.n	8005d7c <__swhatbuf_r+0x40>
 8005d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5e:	e00e      	b.n	8005d7e <__swhatbuf_r+0x42>
 8005d60:	466a      	mov	r2, sp
 8005d62:	f000 fdf1 	bl	8006948 <_fstat_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	dbf1      	blt.n	8005d4e <__swhatbuf_r+0x12>
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d74:	425a      	negs	r2, r3
 8005d76:	415a      	adcs	r2, r3
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	e7ee      	b.n	8005d5a <__swhatbuf_r+0x1e>
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	2000      	movs	r0, #0
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	b016      	add	sp, #88	; 0x58
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d88 <__smakebuf_r>:
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d8c:	079d      	lsls	r5, r3, #30
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	d507      	bpl.n	8005da4 <__smakebuf_r+0x1c>
 8005d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6163      	str	r3, [r4, #20]
 8005da0:	b002      	add	sp, #8
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	ab01      	add	r3, sp, #4
 8005da6:	466a      	mov	r2, sp
 8005da8:	f7ff ffc8 	bl	8005d3c <__swhatbuf_r>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	f000 f895 	bl	8005ee0 <_malloc_r>
 8005db6:	b948      	cbnz	r0, 8005dcc <__smakebuf_r+0x44>
 8005db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d4ef      	bmi.n	8005da0 <__smakebuf_r+0x18>
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	e7e3      	b.n	8005d94 <__smakebuf_r+0xc>
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <__smakebuf_r+0x7c>)
 8005dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	6163      	str	r3, [r4, #20]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	6120      	str	r0, [r4, #16]
 8005de2:	b15b      	cbz	r3, 8005dfc <__smakebuf_r+0x74>
 8005de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 fdbf 	bl	800696c <_isatty_r>
 8005dee:	b128      	cbz	r0, 8005dfc <__smakebuf_r+0x74>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	89a0      	ldrh	r0, [r4, #12]
 8005dfe:	4305      	orrs	r5, r0
 8005e00:	81a5      	strh	r5, [r4, #12]
 8005e02:	e7cd      	b.n	8005da0 <__smakebuf_r+0x18>
 8005e04:	08005b95 	.word	0x08005b95

08005e08 <_free_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d044      	beq.n	8005e98 <_free_r+0x90>
 8005e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e12:	9001      	str	r0, [sp, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1a:	bfb8      	it	lt
 8005e1c:	18e4      	addlt	r4, r4, r3
 8005e1e:	f000 fde1 	bl	80069e4 <__malloc_lock>
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <_free_r+0x94>)
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	b933      	cbnz	r3, 8005e38 <_free_r+0x30>
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	6014      	str	r4, [r2, #0]
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e34:	f000 bddc 	b.w	80069f0 <__malloc_unlock>
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d908      	bls.n	8005e4e <_free_r+0x46>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf01      	itttt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	1949      	addeq	r1, r1, r5
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	e7ed      	b.n	8005e2a <_free_r+0x22>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x50>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x46>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x70>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1e0      	bne.n	8005e2e <_free_r+0x26>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7da      	b.n	8005e2e <_free_r+0x26>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x78>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d6      	b.n	8005e2e <_free_r+0x26>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7ca      	b.n	8005e2e <_free_r+0x26>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	20004a44 	.word	0x20004a44

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fcd6 	bl	800685c <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fcd1 	bl	800685c <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fcc6 	bl	800685c <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	20004a48 	.word	0x20004a48

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	2600      	movs	r6, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f000 fd6b 	bl	80069e4 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fc92 	bl	800685c <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 fd33 	bl	80069f0 <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f000 fd1a 	bl	80069f0 <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	20004a44 	.word	0x20004a44

08005fc8 <__ssputs_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	688e      	ldr	r6, [r1, #8]
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	d838      	bhi.n	800604c <__ssputs_r+0x84>
 8005fda:	898a      	ldrh	r2, [r1, #12]
 8005fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fe0:	d032      	beq.n	8006048 <__ssputs_r+0x80>
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	6909      	ldr	r1, [r1, #16]
 8005fe6:	eba5 0901 	sub.w	r9, r5, r1
 8005fea:	6965      	ldr	r5, [r4, #20]
 8005fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	444b      	add	r3, r9
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	bf38      	it	cc
 8005ffe:	461d      	movcc	r5, r3
 8006000:	0553      	lsls	r3, r2, #21
 8006002:	d531      	bpl.n	8006068 <__ssputs_r+0xa0>
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ff6b 	bl	8005ee0 <_malloc_r>
 800600a:	4606      	mov	r6, r0
 800600c:	b950      	cbnz	r0, 8006024 <__ssputs_r+0x5c>
 800600e:	230c      	movs	r3, #12
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	464a      	mov	r2, r9
 8006028:	f7ff fb4a 	bl	80056c0 <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	6165      	str	r5, [r4, #20]
 800603c:	444e      	add	r6, r9
 800603e:	eba5 0509 	sub.w	r5, r5, r9
 8006042:	6026      	str	r6, [r4, #0]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	463e      	mov	r6, r7
 8006048:	42be      	cmp	r6, r7
 800604a:	d900      	bls.n	800604e <__ssputs_r+0x86>
 800604c:	463e      	mov	r6, r7
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	4632      	mov	r2, r6
 8006052:	4641      	mov	r1, r8
 8006054:	f000 fcac 	bl	80069b0 <memmove>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	1b9b      	subs	r3, r3, r6
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4433      	add	r3, r6
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2000      	movs	r0, #0
 8006066:	e7db      	b.n	8006020 <__ssputs_r+0x58>
 8006068:	462a      	mov	r2, r5
 800606a:	f000 fcc7 	bl	80069fc <_realloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1e1      	bne.n	8006038 <__ssputs_r+0x70>
 8006074:	6921      	ldr	r1, [r4, #16]
 8006076:	4650      	mov	r0, sl
 8006078:	f7ff fec6 	bl	8005e08 <_free_r>
 800607c:	e7c7      	b.n	800600e <__ssputs_r+0x46>
	...

08006080 <_svfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4698      	mov	r8, r3
 8006086:	898b      	ldrh	r3, [r1, #12]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	b09d      	sub	sp, #116	; 0x74
 800608c:	4607      	mov	r7, r0
 800608e:	460d      	mov	r5, r1
 8006090:	4614      	mov	r4, r2
 8006092:	d50e      	bpl.n	80060b2 <_svfiprintf_r+0x32>
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	b963      	cbnz	r3, 80060b2 <_svfiprintf_r+0x32>
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	f7ff ff21 	bl	8005ee0 <_malloc_r>
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	6128      	str	r0, [r5, #16]
 80060a2:	b920      	cbnz	r0, 80060ae <_svfiprintf_r+0x2e>
 80060a4:	230c      	movs	r3, #12
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e0d1      	b.n	8006252 <_svfiprintf_r+0x1d2>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	616b      	str	r3, [r5, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	2320      	movs	r3, #32
 80060b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800626c <_svfiprintf_r+0x1ec>
 80060c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ca:	f04f 0901 	mov.w	r9, #1
 80060ce:	4623      	mov	r3, r4
 80060d0:	469a      	mov	sl, r3
 80060d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d6:	b10a      	cbz	r2, 80060dc <_svfiprintf_r+0x5c>
 80060d8:	2a25      	cmp	r2, #37	; 0x25
 80060da:	d1f9      	bne.n	80060d0 <_svfiprintf_r+0x50>
 80060dc:	ebba 0b04 	subs.w	fp, sl, r4
 80060e0:	d00b      	beq.n	80060fa <_svfiprintf_r+0x7a>
 80060e2:	465b      	mov	r3, fp
 80060e4:	4622      	mov	r2, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff ff6d 	bl	8005fc8 <__ssputs_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	f000 80aa 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 80060f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f6:	445a      	add	r2, fp
 80060f8:	9209      	str	r2, [sp, #36]	; 0x24
 80060fa:	f89a 3000 	ldrb.w	r3, [sl]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a2 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 8006104:	2300      	movs	r3, #0
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610e:	f10a 0a01 	add.w	sl, sl, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611a:	931a      	str	r3, [sp, #104]	; 0x68
 800611c:	4654      	mov	r4, sl
 800611e:	2205      	movs	r2, #5
 8006120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006124:	4851      	ldr	r0, [pc, #324]	; (800626c <_svfiprintf_r+0x1ec>)
 8006126:	f7fa f863 	bl	80001f0 <memchr>
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	b9d8      	cbnz	r0, 8006166 <_svfiprintf_r+0xe6>
 800612e:	06d0      	lsls	r0, r2, #27
 8006130:	bf44      	itt	mi
 8006132:	2320      	movmi	r3, #32
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	0711      	lsls	r1, r2, #28
 800613a:	bf44      	itt	mi
 800613c:	232b      	movmi	r3, #43	; 0x2b
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	f89a 3000 	ldrb.w	r3, [sl]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d015      	beq.n	8006176 <_svfiprintf_r+0xf6>
 800614a:	9a07      	ldr	r2, [sp, #28]
 800614c:	4654      	mov	r4, sl
 800614e:	2000      	movs	r0, #0
 8006150:	f04f 0c0a 	mov.w	ip, #10
 8006154:	4621      	mov	r1, r4
 8006156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615a:	3b30      	subs	r3, #48	; 0x30
 800615c:	2b09      	cmp	r3, #9
 800615e:	d94e      	bls.n	80061fe <_svfiprintf_r+0x17e>
 8006160:	b1b0      	cbz	r0, 8006190 <_svfiprintf_r+0x110>
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	e014      	b.n	8006190 <_svfiprintf_r+0x110>
 8006166:	eba0 0308 	sub.w	r3, r0, r8
 800616a:	fa09 f303 	lsl.w	r3, r9, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	46a2      	mov	sl, r4
 8006174:	e7d2      	b.n	800611c <_svfiprintf_r+0x9c>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	9103      	str	r1, [sp, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	bfbb      	ittet	lt
 8006182:	425b      	neglt	r3, r3
 8006184:	f042 0202 	orrlt.w	r2, r2, #2
 8006188:	9307      	strge	r3, [sp, #28]
 800618a:	9307      	strlt	r3, [sp, #28]
 800618c:	bfb8      	it	lt
 800618e:	9204      	strlt	r2, [sp, #16]
 8006190:	7823      	ldrb	r3, [r4, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d10c      	bne.n	80061b0 <_svfiprintf_r+0x130>
 8006196:	7863      	ldrb	r3, [r4, #1]
 8006198:	2b2a      	cmp	r3, #42	; 0x2a
 800619a:	d135      	bne.n	8006208 <_svfiprintf_r+0x188>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9203      	str	r2, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ac:	3402      	adds	r4, #2
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800627c <_svfiprintf_r+0x1fc>
 80061b4:	7821      	ldrb	r1, [r4, #0]
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	f7fa f819 	bl	80001f0 <memchr>
 80061be:	b140      	cbz	r0, 80061d2 <_svfiprintf_r+0x152>
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	4303      	orrs	r3, r0
 80061ce:	3401      	adds	r4, #1
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d6:	4826      	ldr	r0, [pc, #152]	; (8006270 <_svfiprintf_r+0x1f0>)
 80061d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061dc:	2206      	movs	r2, #6
 80061de:	f7fa f807 	bl	80001f0 <memchr>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d038      	beq.n	8006258 <_svfiprintf_r+0x1d8>
 80061e6:	4b23      	ldr	r3, [pc, #140]	; (8006274 <_svfiprintf_r+0x1f4>)
 80061e8:	bb1b      	cbnz	r3, 8006232 <_svfiprintf_r+0x1b2>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	3308      	adds	r3, #8
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	4433      	add	r3, r6
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	e767      	b.n	80060ce <_svfiprintf_r+0x4e>
 80061fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006202:	460c      	mov	r4, r1
 8006204:	2001      	movs	r0, #1
 8006206:	e7a5      	b.n	8006154 <_svfiprintf_r+0xd4>
 8006208:	2300      	movs	r3, #0
 800620a:	3401      	adds	r4, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0c0a 	mov.w	ip, #10
 8006214:	4620      	mov	r0, r4
 8006216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621a:	3a30      	subs	r2, #48	; 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d903      	bls.n	8006228 <_svfiprintf_r+0x1a8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c5      	beq.n	80061b0 <_svfiprintf_r+0x130>
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	e7c3      	b.n	80061b0 <_svfiprintf_r+0x130>
 8006228:	fb0c 2101 	mla	r1, ip, r1, r2
 800622c:	4604      	mov	r4, r0
 800622e:	2301      	movs	r3, #1
 8006230:	e7f0      	b.n	8006214 <_svfiprintf_r+0x194>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <_svfiprintf_r+0x1f8>)
 800623a:	a904      	add	r1, sp, #16
 800623c:	4638      	mov	r0, r7
 800623e:	f3af 8000 	nop.w
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	4606      	mov	r6, r0
 8006246:	d1d6      	bne.n	80061f6 <_svfiprintf_r+0x176>
 8006248:	89ab      	ldrh	r3, [r5, #12]
 800624a:	065b      	lsls	r3, r3, #25
 800624c:	f53f af2c 	bmi.w	80060a8 <_svfiprintf_r+0x28>
 8006250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006252:	b01d      	add	sp, #116	; 0x74
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	ab03      	add	r3, sp, #12
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	462a      	mov	r2, r5
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <_svfiprintf_r+0x1f8>)
 8006260:	a904      	add	r1, sp, #16
 8006262:	4638      	mov	r0, r7
 8006264:	f000 f9d4 	bl	8006610 <_printf_i>
 8006268:	e7eb      	b.n	8006242 <_svfiprintf_r+0x1c2>
 800626a:	bf00      	nop
 800626c:	08006bc4 	.word	0x08006bc4
 8006270:	08006bce 	.word	0x08006bce
 8006274:	00000000 	.word	0x00000000
 8006278:	08005fc9 	.word	0x08005fc9
 800627c:	08006bca 	.word	0x08006bca

08006280 <__sfputc_r>:
 8006280:	6893      	ldr	r3, [r2, #8]
 8006282:	3b01      	subs	r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	b410      	push	{r4}
 8006288:	6093      	str	r3, [r2, #8]
 800628a:	da08      	bge.n	800629e <__sfputc_r+0x1e>
 800628c:	6994      	ldr	r4, [r2, #24]
 800628e:	42a3      	cmp	r3, r4
 8006290:	db01      	blt.n	8006296 <__sfputc_r+0x16>
 8006292:	290a      	cmp	r1, #10
 8006294:	d103      	bne.n	800629e <__sfputc_r+0x1e>
 8006296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629a:	f7ff bad5 	b.w	8005848 <__swbuf_r>
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	1c58      	adds	r0, r3, #1
 80062a2:	6010      	str	r0, [r2, #0]
 80062a4:	7019      	strb	r1, [r3, #0]
 80062a6:	4608      	mov	r0, r1
 80062a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <__sfputs_r>:
 80062ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	18d5      	adds	r5, r2, r3
 80062b8:	42ac      	cmp	r4, r5
 80062ba:	d101      	bne.n	80062c0 <__sfputs_r+0x12>
 80062bc:	2000      	movs	r0, #0
 80062be:	e007      	b.n	80062d0 <__sfputs_r+0x22>
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	463a      	mov	r2, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ffda 	bl	8006280 <__sfputc_r>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d1f3      	bne.n	80062b8 <__sfputs_r+0xa>
 80062d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d4 <_vfiprintf_r>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	460d      	mov	r5, r1
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	4614      	mov	r4, r2
 80062de:	4698      	mov	r8, r3
 80062e0:	4606      	mov	r6, r0
 80062e2:	b118      	cbz	r0, 80062ec <_vfiprintf_r+0x18>
 80062e4:	6983      	ldr	r3, [r0, #24]
 80062e6:	b90b      	cbnz	r3, 80062ec <_vfiprintf_r+0x18>
 80062e8:	f7ff fc88 	bl	8005bfc <__sinit>
 80062ec:	4b89      	ldr	r3, [pc, #548]	; (8006514 <_vfiprintf_r+0x240>)
 80062ee:	429d      	cmp	r5, r3
 80062f0:	d11b      	bne.n	800632a <_vfiprintf_r+0x56>
 80062f2:	6875      	ldr	r5, [r6, #4]
 80062f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_vfiprintf_r+0x32>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	059a      	lsls	r2, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_vfiprintf_r+0x32>
 8006300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006302:	f7ff fd19 	bl	8005d38 <__retarget_lock_acquire_recursive>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	d501      	bpl.n	8006310 <_vfiprintf_r+0x3c>
 800630c:	692b      	ldr	r3, [r5, #16]
 800630e:	b9eb      	cbnz	r3, 800634c <_vfiprintf_r+0x78>
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff faea 	bl	80058ec <__swsetup_r>
 8006318:	b1c0      	cbz	r0, 800634c <_vfiprintf_r+0x78>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07dc      	lsls	r4, r3, #31
 800631e:	d50e      	bpl.n	800633e <_vfiprintf_r+0x6a>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b01d      	add	sp, #116	; 0x74
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	4b7b      	ldr	r3, [pc, #492]	; (8006518 <_vfiprintf_r+0x244>)
 800632c:	429d      	cmp	r5, r3
 800632e:	d101      	bne.n	8006334 <_vfiprintf_r+0x60>
 8006330:	68b5      	ldr	r5, [r6, #8]
 8006332:	e7df      	b.n	80062f4 <_vfiprintf_r+0x20>
 8006334:	4b79      	ldr	r3, [pc, #484]	; (800651c <_vfiprintf_r+0x248>)
 8006336:	429d      	cmp	r5, r3
 8006338:	bf08      	it	eq
 800633a:	68f5      	ldreq	r5, [r6, #12]
 800633c:	e7da      	b.n	80062f4 <_vfiprintf_r+0x20>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	0598      	lsls	r0, r3, #22
 8006342:	d4ed      	bmi.n	8006320 <_vfiprintf_r+0x4c>
 8006344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006346:	f7ff fcf8 	bl	8005d3a <__retarget_lock_release_recursive>
 800634a:	e7e9      	b.n	8006320 <_vfiprintf_r+0x4c>
 800634c:	2300      	movs	r3, #0
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	2320      	movs	r3, #32
 8006352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006356:	f8cd 800c 	str.w	r8, [sp, #12]
 800635a:	2330      	movs	r3, #48	; 0x30
 800635c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006520 <_vfiprintf_r+0x24c>
 8006360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006364:	f04f 0901 	mov.w	r9, #1
 8006368:	4623      	mov	r3, r4
 800636a:	469a      	mov	sl, r3
 800636c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006370:	b10a      	cbz	r2, 8006376 <_vfiprintf_r+0xa2>
 8006372:	2a25      	cmp	r2, #37	; 0x25
 8006374:	d1f9      	bne.n	800636a <_vfiprintf_r+0x96>
 8006376:	ebba 0b04 	subs.w	fp, sl, r4
 800637a:	d00b      	beq.n	8006394 <_vfiprintf_r+0xc0>
 800637c:	465b      	mov	r3, fp
 800637e:	4622      	mov	r2, r4
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ff93 	bl	80062ae <__sfputs_r>
 8006388:	3001      	adds	r0, #1
 800638a:	f000 80aa 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006390:	445a      	add	r2, fp
 8006392:	9209      	str	r2, [sp, #36]	; 0x24
 8006394:	f89a 3000 	ldrb.w	r3, [sl]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80a2 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800639e:	2300      	movs	r3, #0
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a8:	f10a 0a01 	add.w	sl, sl, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063b4:	931a      	str	r3, [sp, #104]	; 0x68
 80063b6:	4654      	mov	r4, sl
 80063b8:	2205      	movs	r2, #5
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	4858      	ldr	r0, [pc, #352]	; (8006520 <_vfiprintf_r+0x24c>)
 80063c0:	f7f9 ff16 	bl	80001f0 <memchr>
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	b9d8      	cbnz	r0, 8006400 <_vfiprintf_r+0x12c>
 80063c8:	06d1      	lsls	r1, r2, #27
 80063ca:	bf44      	itt	mi
 80063cc:	2320      	movmi	r3, #32
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d2:	0713      	lsls	r3, r2, #28
 80063d4:	bf44      	itt	mi
 80063d6:	232b      	movmi	r3, #43	; 0x2b
 80063d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b2a      	cmp	r3, #42	; 0x2a
 80063e2:	d015      	beq.n	8006410 <_vfiprintf_r+0x13c>
 80063e4:	9a07      	ldr	r2, [sp, #28]
 80063e6:	4654      	mov	r4, sl
 80063e8:	2000      	movs	r0, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4621      	mov	r1, r4
 80063f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f4:	3b30      	subs	r3, #48	; 0x30
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d94e      	bls.n	8006498 <_vfiprintf_r+0x1c4>
 80063fa:	b1b0      	cbz	r0, 800642a <_vfiprintf_r+0x156>
 80063fc:	9207      	str	r2, [sp, #28]
 80063fe:	e014      	b.n	800642a <_vfiprintf_r+0x156>
 8006400:	eba0 0308 	sub.w	r3, r0, r8
 8006404:	fa09 f303 	lsl.w	r3, r9, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	46a2      	mov	sl, r4
 800640e:	e7d2      	b.n	80063b6 <_vfiprintf_r+0xe2>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	1d19      	adds	r1, r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	9103      	str	r1, [sp, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbb      	ittet	lt
 800641c:	425b      	neglt	r3, r3
 800641e:	f042 0202 	orrlt.w	r2, r2, #2
 8006422:	9307      	strge	r3, [sp, #28]
 8006424:	9307      	strlt	r3, [sp, #28]
 8006426:	bfb8      	it	lt
 8006428:	9204      	strlt	r2, [sp, #16]
 800642a:	7823      	ldrb	r3, [r4, #0]
 800642c:	2b2e      	cmp	r3, #46	; 0x2e
 800642e:	d10c      	bne.n	800644a <_vfiprintf_r+0x176>
 8006430:	7863      	ldrb	r3, [r4, #1]
 8006432:	2b2a      	cmp	r3, #42	; 0x2a
 8006434:	d135      	bne.n	80064a2 <_vfiprintf_r+0x1ce>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	9203      	str	r2, [sp, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfb8      	it	lt
 8006442:	f04f 33ff 	movlt.w	r3, #4294967295
 8006446:	3402      	adds	r4, #2
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006530 <_vfiprintf_r+0x25c>
 800644e:	7821      	ldrb	r1, [r4, #0]
 8006450:	2203      	movs	r2, #3
 8006452:	4650      	mov	r0, sl
 8006454:	f7f9 fecc 	bl	80001f0 <memchr>
 8006458:	b140      	cbz	r0, 800646c <_vfiprintf_r+0x198>
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	eba0 000a 	sub.w	r0, r0, sl
 8006460:	fa03 f000 	lsl.w	r0, r3, r0
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	4303      	orrs	r3, r0
 8006468:	3401      	adds	r4, #1
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006470:	482c      	ldr	r0, [pc, #176]	; (8006524 <_vfiprintf_r+0x250>)
 8006472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006476:	2206      	movs	r2, #6
 8006478:	f7f9 feba 	bl	80001f0 <memchr>
 800647c:	2800      	cmp	r0, #0
 800647e:	d03f      	beq.n	8006500 <_vfiprintf_r+0x22c>
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <_vfiprintf_r+0x254>)
 8006482:	bb1b      	cbnz	r3, 80064cc <_vfiprintf_r+0x1f8>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	3307      	adds	r3, #7
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	3308      	adds	r3, #8
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	443b      	add	r3, r7
 8006494:	9309      	str	r3, [sp, #36]	; 0x24
 8006496:	e767      	b.n	8006368 <_vfiprintf_r+0x94>
 8006498:	fb0c 3202 	mla	r2, ip, r2, r3
 800649c:	460c      	mov	r4, r1
 800649e:	2001      	movs	r0, #1
 80064a0:	e7a5      	b.n	80063ee <_vfiprintf_r+0x11a>
 80064a2:	2300      	movs	r3, #0
 80064a4:	3401      	adds	r4, #1
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f04f 0c0a 	mov.w	ip, #10
 80064ae:	4620      	mov	r0, r4
 80064b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b4:	3a30      	subs	r2, #48	; 0x30
 80064b6:	2a09      	cmp	r2, #9
 80064b8:	d903      	bls.n	80064c2 <_vfiprintf_r+0x1ee>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c5      	beq.n	800644a <_vfiprintf_r+0x176>
 80064be:	9105      	str	r1, [sp, #20]
 80064c0:	e7c3      	b.n	800644a <_vfiprintf_r+0x176>
 80064c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c6:	4604      	mov	r4, r0
 80064c8:	2301      	movs	r3, #1
 80064ca:	e7f0      	b.n	80064ae <_vfiprintf_r+0x1da>
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	462a      	mov	r2, r5
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <_vfiprintf_r+0x258>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4630      	mov	r0, r6
 80064d8:	f3af 8000 	nop.w
 80064dc:	4607      	mov	r7, r0
 80064de:	1c78      	adds	r0, r7, #1
 80064e0:	d1d6      	bne.n	8006490 <_vfiprintf_r+0x1bc>
 80064e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d405      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064e8:	89ab      	ldrh	r3, [r5, #12]
 80064ea:	059a      	lsls	r2, r3, #22
 80064ec:	d402      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f0:	f7ff fc23 	bl	8005d3a <__retarget_lock_release_recursive>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af12 	bmi.w	8006320 <_vfiprintf_r+0x4c>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	e711      	b.n	8006324 <_vfiprintf_r+0x50>
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <_vfiprintf_r+0x258>)
 8006508:	a904      	add	r1, sp, #16
 800650a:	4630      	mov	r0, r6
 800650c:	f000 f880 	bl	8006610 <_printf_i>
 8006510:	e7e4      	b.n	80064dc <_vfiprintf_r+0x208>
 8006512:	bf00      	nop
 8006514:	08006b84 	.word	0x08006b84
 8006518:	08006ba4 	.word	0x08006ba4
 800651c:	08006b64 	.word	0x08006b64
 8006520:	08006bc4 	.word	0x08006bc4
 8006524:	08006bce 	.word	0x08006bce
 8006528:	00000000 	.word	0x00000000
 800652c:	080062af 	.word	0x080062af
 8006530:	08006bca 	.word	0x08006bca

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4699      	mov	r9, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006580:	1e13      	subs	r3, r2, #0
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006590:	4649      	mov	r1, r9
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	68e5      	ldr	r5, [r4, #12]
 800659e:	6832      	ldr	r2, [r6, #0]
 80065a0:	f003 0306 	and.w	r3, r3, #6
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	bf08      	it	eq
 80065a8:	1aad      	subeq	r5, r5, r2
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6922      	ldr	r2, [r4, #16]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4649      	mov	r1, r9
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	; 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006618:	2f78      	cmp	r7, #120	; 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	; 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d8 	beq.w	80067e2 <_printf_i+0x1d2>
 8006632:	2f58      	cmp	r7, #88	; 0x58
 8006634:	f000 80a3 	beq.w	800677e <_printf_i+0x16e>
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	; (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067c9 	.word	0x080067c9
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080067ab 	.word	0x080067ab
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067eb 	.word	0x080067eb
 8006694:	08006639 	.word	0x08006639
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	080067b3 	.word	0x080067b3
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0a3      	b.n	8006804 <_printf_i+0x1f4>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	f101 0304 	add.w	r3, r1, #4
 80066c6:	d50a      	bpl.n	80066de <_printf_i+0xce>
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	da03      	bge.n	80066d8 <_printf_i+0xc8>
 80066d0:	232d      	movs	r3, #45	; 0x2d
 80066d2:	4276      	negs	r6, r6
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	485e      	ldr	r0, [pc, #376]	; (8006854 <_printf_i+0x244>)
 80066da:	230a      	movs	r3, #10
 80066dc:	e019      	b.n	8006712 <_printf_i+0x102>
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e6:	bf18      	it	ne
 80066e8:	b236      	sxthne	r6, r6
 80066ea:	e7ef      	b.n	80066cc <_printf_i+0xbc>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	6029      	str	r1, [r5, #0]
 80066f4:	0601      	lsls	r1, r0, #24
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0xec>
 80066f8:	681e      	ldr	r6, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0xf2>
 80066fc:	0646      	lsls	r6, r0, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0xe8>
 8006700:	881e      	ldrh	r6, [r3, #0]
 8006702:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x244>)
 8006704:	2f6f      	cmp	r7, #111	; 0x6f
 8006706:	bf0c      	ite	eq
 8006708:	2308      	moveq	r3, #8
 800670a:	230a      	movne	r3, #10
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006712:	6865      	ldr	r5, [r4, #4]
 8006714:	60a5      	str	r5, [r4, #8]
 8006716:	2d00      	cmp	r5, #0
 8006718:	bfa2      	ittt	ge
 800671a:	6821      	ldrge	r1, [r4, #0]
 800671c:	f021 0104 	bicge.w	r1, r1, #4
 8006720:	6021      	strge	r1, [r4, #0]
 8006722:	b90e      	cbnz	r6, 8006728 <_printf_i+0x118>
 8006724:	2d00      	cmp	r5, #0
 8006726:	d04d      	beq.n	80067c4 <_printf_i+0x1b4>
 8006728:	4615      	mov	r5, r2
 800672a:	fbb6 f1f3 	udiv	r1, r6, r3
 800672e:	fb03 6711 	mls	r7, r3, r1, r6
 8006732:	5dc7      	ldrb	r7, [r0, r7]
 8006734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006738:	4637      	mov	r7, r6
 800673a:	42bb      	cmp	r3, r7
 800673c:	460e      	mov	r6, r1
 800673e:	d9f4      	bls.n	800672a <_printf_i+0x11a>
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10b      	bne.n	800675c <_printf_i+0x14c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07de      	lsls	r6, r3, #31
 8006748:	d508      	bpl.n	800675c <_printf_i+0x14c>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4299      	cmp	r1, r3
 8006750:	bfde      	ittt	le
 8006752:	2330      	movle	r3, #48	; 0x30
 8006754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800675c:	1b52      	subs	r2, r2, r5
 800675e:	6122      	str	r2, [r4, #16]
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	464b      	mov	r3, r9
 8006766:	aa03      	add	r2, sp, #12
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff fee2 	bl	8006534 <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d14c      	bne.n	800680e <_printf_i+0x1fe>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b004      	add	sp, #16
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	4835      	ldr	r0, [pc, #212]	; (8006854 <_printf_i+0x244>)
 8006780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006784:	6829      	ldr	r1, [r5, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f851 6b04 	ldr.w	r6, [r1], #4
 800678c:	6029      	str	r1, [r5, #0]
 800678e:	061d      	lsls	r5, r3, #24
 8006790:	d514      	bpl.n	80067bc <_printf_i+0x1ac>
 8006792:	07df      	lsls	r7, r3, #31
 8006794:	bf44      	itt	mi
 8006796:	f043 0320 	orrmi.w	r3, r3, #32
 800679a:	6023      	strmi	r3, [r4, #0]
 800679c:	b91e      	cbnz	r6, 80067a6 <_printf_i+0x196>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7b0      	b.n	800670c <_printf_i+0xfc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	2378      	movs	r3, #120	; 0x78
 80067b4:	4828      	ldr	r0, [pc, #160]	; (8006858 <_printf_i+0x248>)
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ba:	e7e3      	b.n	8006784 <_printf_i+0x174>
 80067bc:	0659      	lsls	r1, r3, #25
 80067be:	bf48      	it	mi
 80067c0:	b2b6      	uxthmi	r6, r6
 80067c2:	e7e6      	b.n	8006792 <_printf_i+0x182>
 80067c4:	4615      	mov	r5, r2
 80067c6:	e7bb      	b.n	8006740 <_printf_i+0x130>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6826      	ldr	r6, [r4, #0]
 80067cc:	6961      	ldr	r1, [r4, #20]
 80067ce:	1d18      	adds	r0, r3, #4
 80067d0:	6028      	str	r0, [r5, #0]
 80067d2:	0635      	lsls	r5, r6, #24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0x1cc>
 80067d8:	6019      	str	r1, [r3, #0]
 80067da:	e002      	b.n	80067e2 <_printf_i+0x1d2>
 80067dc:	0670      	lsls	r0, r6, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0x1c8>
 80067e0:	8019      	strh	r1, [r3, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	4615      	mov	r5, r2
 80067e8:	e7ba      	b.n	8006760 <_printf_i+0x150>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	6862      	ldr	r2, [r4, #4]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f7f9 fcfa 	bl	80001f0 <memchr>
 80067fc:	b108      	cbz	r0, 8006802 <_printf_i+0x1f2>
 80067fe:	1b40      	subs	r0, r0, r5
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	2300      	movs	r3, #0
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680c:	e7a8      	b.n	8006760 <_printf_i+0x150>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	462a      	mov	r2, r5
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d0ab      	beq.n	8006774 <_printf_i+0x164>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	d413      	bmi.n	800684a <_printf_i+0x23a>
 8006822:	68e0      	ldr	r0, [r4, #12]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	4298      	cmp	r0, r3
 8006828:	bfb8      	it	lt
 800682a:	4618      	movlt	r0, r3
 800682c:	e7a4      	b.n	8006778 <_printf_i+0x168>
 800682e:	2301      	movs	r3, #1
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d09b      	beq.n	8006774 <_printf_i+0x164>
 800683c:	3501      	adds	r5, #1
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	9903      	ldr	r1, [sp, #12]
 8006842:	1a5b      	subs	r3, r3, r1
 8006844:	42ab      	cmp	r3, r5
 8006846:	dcf2      	bgt.n	800682e <_printf_i+0x21e>
 8006848:	e7eb      	b.n	8006822 <_printf_i+0x212>
 800684a:	2500      	movs	r5, #0
 800684c:	f104 0619 	add.w	r6, r4, #25
 8006850:	e7f5      	b.n	800683e <_printf_i+0x22e>
 8006852:	bf00      	nop
 8006854:	08006bd5 	.word	0x08006bd5
 8006858:	08006be6 	.word	0x08006be6

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_sbrk_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fa ff28 	bl	80016bc <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20004a4c 	.word	0x20004a4c

0800687c <__sread>:
 800687c:	b510      	push	{r4, lr}
 800687e:	460c      	mov	r4, r1
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	f000 f8ea 	bl	8006a5c <_read_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	bfab      	itete	ge
 800688c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800688e:	89a3      	ldrhlt	r3, [r4, #12]
 8006890:	181b      	addge	r3, r3, r0
 8006892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006896:	bfac      	ite	ge
 8006898:	6563      	strge	r3, [r4, #84]	; 0x54
 800689a:	81a3      	strhlt	r3, [r4, #12]
 800689c:	bd10      	pop	{r4, pc}

0800689e <__swrite>:
 800689e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	461f      	mov	r7, r3
 80068a4:	898b      	ldrh	r3, [r1, #12]
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	4605      	mov	r5, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4616      	mov	r6, r2
 80068ae:	d505      	bpl.n	80068bc <__swrite+0x1e>
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	2302      	movs	r3, #2
 80068b6:	2200      	movs	r2, #0
 80068b8:	f000 f868 	bl	800698c <_lseek_r>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	4632      	mov	r2, r6
 80068ca:	463b      	mov	r3, r7
 80068cc:	4628      	mov	r0, r5
 80068ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	f000 b817 	b.w	8006904 <_write_r>

080068d6 <__sseek>:
 80068d6:	b510      	push	{r4, lr}
 80068d8:	460c      	mov	r4, r1
 80068da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068de:	f000 f855 	bl	800698c <_lseek_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	bf15      	itete	ne
 80068e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068f2:	81a3      	strheq	r3, [r4, #12]
 80068f4:	bf18      	it	ne
 80068f6:	81a3      	strhne	r3, [r4, #12]
 80068f8:	bd10      	pop	{r4, pc}

080068fa <__sclose>:
 80068fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fe:	f000 b813 	b.w	8006928 <_close_r>
	...

08006904 <_write_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	; (8006924 <_write_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa fe81 	bl	800161a <_write>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_write_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_write_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20004a4c 	.word	0x20004a4c

08006928 <_close_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d06      	ldr	r5, [pc, #24]	; (8006944 <_close_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fa fe8d 	bl	8001652 <_close>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_close_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_close_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	20004a4c 	.word	0x20004a4c

08006948 <_fstat_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	; (8006968 <_fstat_r+0x20>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	f7fa fe88 	bl	800166a <_fstat>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d102      	bne.n	8006964 <_fstat_r+0x1c>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	b103      	cbz	r3, 8006964 <_fstat_r+0x1c>
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	20004a4c 	.word	0x20004a4c

0800696c <_isatty_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_isatty_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7fa fe87 	bl	800168a <_isatty>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_isatty_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_isatty_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	20004a4c 	.word	0x20004a4c

0800698c <_lseek_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_lseek_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa fe80 	bl	80016a0 <_lseek>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_lseek_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_lseek_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20004a4c 	.word	0x20004a4c

080069b0 <memmove>:
 80069b0:	4288      	cmp	r0, r1
 80069b2:	b510      	push	{r4, lr}
 80069b4:	eb01 0402 	add.w	r4, r1, r2
 80069b8:	d902      	bls.n	80069c0 <memmove+0x10>
 80069ba:	4284      	cmp	r4, r0
 80069bc:	4623      	mov	r3, r4
 80069be:	d807      	bhi.n	80069d0 <memmove+0x20>
 80069c0:	1e43      	subs	r3, r0, #1
 80069c2:	42a1      	cmp	r1, r4
 80069c4:	d008      	beq.n	80069d8 <memmove+0x28>
 80069c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ce:	e7f8      	b.n	80069c2 <memmove+0x12>
 80069d0:	4402      	add	r2, r0
 80069d2:	4601      	mov	r1, r0
 80069d4:	428a      	cmp	r2, r1
 80069d6:	d100      	bne.n	80069da <memmove+0x2a>
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069e2:	e7f7      	b.n	80069d4 <memmove+0x24>

080069e4 <__malloc_lock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <__malloc_lock+0x8>)
 80069e6:	f7ff b9a7 	b.w	8005d38 <__retarget_lock_acquire_recursive>
 80069ea:	bf00      	nop
 80069ec:	20004a40 	.word	0x20004a40

080069f0 <__malloc_unlock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_unlock+0x8>)
 80069f2:	f7ff b9a2 	b.w	8005d3a <__retarget_lock_release_recursive>
 80069f6:	bf00      	nop
 80069f8:	20004a40 	.word	0x20004a40

080069fc <_realloc_r>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	4680      	mov	r8, r0
 8006a02:	4614      	mov	r4, r2
 8006a04:	460e      	mov	r6, r1
 8006a06:	b921      	cbnz	r1, 8006a12 <_realloc_r+0x16>
 8006a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	f7ff ba67 	b.w	8005ee0 <_malloc_r>
 8006a12:	b92a      	cbnz	r2, 8006a20 <_realloc_r+0x24>
 8006a14:	f7ff f9f8 	bl	8005e08 <_free_r>
 8006a18:	4625      	mov	r5, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a20:	f000 f82e 	bl	8006a80 <_malloc_usable_size_r>
 8006a24:	4284      	cmp	r4, r0
 8006a26:	4607      	mov	r7, r0
 8006a28:	d802      	bhi.n	8006a30 <_realloc_r+0x34>
 8006a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a2e:	d812      	bhi.n	8006a56 <_realloc_r+0x5a>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4640      	mov	r0, r8
 8006a34:	f7ff fa54 	bl	8005ee0 <_malloc_r>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d0ed      	beq.n	8006a1a <_realloc_r+0x1e>
 8006a3e:	42bc      	cmp	r4, r7
 8006a40:	4622      	mov	r2, r4
 8006a42:	4631      	mov	r1, r6
 8006a44:	bf28      	it	cs
 8006a46:	463a      	movcs	r2, r7
 8006a48:	f7fe fe3a 	bl	80056c0 <memcpy>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7ff f9da 	bl	8005e08 <_free_r>
 8006a54:	e7e1      	b.n	8006a1a <_realloc_r+0x1e>
 8006a56:	4635      	mov	r5, r6
 8006a58:	e7df      	b.n	8006a1a <_realloc_r+0x1e>
	...

08006a5c <_read_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d07      	ldr	r5, [pc, #28]	; (8006a7c <_read_r+0x20>)
 8006a60:	4604      	mov	r4, r0
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f7fa fdb8 	bl	80015e0 <_read>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_read_r+0x1e>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_read_r+0x1e>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20004a4c 	.word	0x20004a4c

08006a80 <_malloc_usable_size_r>:
 8006a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a84:	1f18      	subs	r0, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bfbc      	itt	lt
 8006a8a:	580b      	ldrlt	r3, [r1, r0]
 8006a8c:	18c0      	addlt	r0, r0, r3
 8006a8e:	4770      	bx	lr

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
